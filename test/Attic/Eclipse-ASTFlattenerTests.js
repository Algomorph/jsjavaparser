    test("default class modifier", function(assert) {
      var src = multiline(function(){/*
        /*******************************************************************************
         * Copyright (c) 2000, 2014 IBM Corporation and others.
         * All rights reserved. This program and the accompanying materials
         * are made available under the terms of the Eclipse Public License v1.0
         * which accompanies this distribution, and is available at
         * http://www.eclipse.org/legal/epl-v10.html
         *
         * Contributors:
         *     IBM Corporation - initial API and implementation
         *******************************************************************************\/
        package org.eclipse.jdt.internal.corext.dom;

        import java.util.Iterator;
        import java.util.List;

        import org.eclipse.core.runtime.Assert;

        import org.eclipse.jdt.core.dom.*;

        import org.eclipse.jdt.internal.ui.javaeditor.ASTProvider;


        public class ASTFlattener extends GenericVisitor {

          /**
           * @deprecated to avoid deprecation warnings
           *\/
          @Deprecated
          private static final int JLS3= AST.JLS3;
          /**
           * @deprecated to avoid deprecation warnings
           *\/
          @Deprecated
          private static final int JLS4= AST.JLS4;
          
          /**
           * The string buffer into which the serialized representation of the AST is
           * written.
           *\/
          protected StringBuffer fBuffer;

          /**
           * Creates a new AST printer.
           *\/
          public ASTFlattener() {
            this.fBuffer= new StringBuffer();
          }

          /**
           * Returns the string accumulated in the visit.
           *
           * @return the serialized
           *\/
          public String getResult() {
            return this.fBuffer.toString();
          }

          /**
           * Resets this printer so that it can be used again.
           *\/
          public void reset() {
            this.fBuffer.setLength(0);
          }

          public static String asString(ASTNode node) {
            Assert.isTrue(node.getAST().apiLevel() == ASTProvider.SHARED_AST_LEVEL);

            ASTFlattener flattener= new ASTFlattener();
            node.accept(flattener);
            return flattener.getResult();
          }


          @Override
          protected boolean visitNode(ASTNode node) {
            Assert.isTrue(false, "No implementation to flatten node: " + node.toString()); //$NON-NLS-1$
            return false;
          }

          /**
           * Appends the text representation of the given modifier flags, followed by a single space.
           * Used for 3.0 modifiers and annotations.
           *
           * @param ext the list of modifier and annotation nodes
           * (element type: <code>IExtendedModifier</code>)
           *\/
          private void printModifiers(List<IExtendedModifier> ext) {
            for (Iterator<IExtendedModifier> it= ext.iterator(); it.hasNext();) {
              ASTNode p= (ASTNode) it.next();
              p.accept(this);
              this.fBuffer.append(" ");//$NON-NLS-1$
            }
          }

          private void printReferenceTypeArguments(List<Type> typeArguments) {
            this.fBuffer.append("::");//$NON-NLS-1$
            if (!typeArguments.isEmpty()) {
              this.fBuffer.append('<');
              for (Iterator<Type> it = typeArguments.iterator(); it.hasNext(); ) {
                Type t = it.next();
                t.accept(this);
                if (it.hasNext()) {
                  this.fBuffer.append(',');
                }
              }
              this.fBuffer.append('>');
            }
          }
          
          void printTypeAnnotations(AnnotatableType node) {
            if (node.getAST().apiLevel() >= AST.JLS8) {
              printAnnotationsList(node.annotations());
            }
          }

          void printAnnotationsList(List<? extends Annotation> annotations) {
            for (Iterator<? extends Annotation> it = annotations.iterator(); it.hasNext(); ) {
              Annotation annotation = it.next();
              annotation.accept(this);
              this.fBuffer.append(' ');
            }
          }

          /**
           * @param node node
           * @return component type
           * @deprecated to avoid deprecation warning
           *\/
          @Deprecated
          private static Type getComponentType(ArrayType node) {
            return node.getComponentType();
          }

          /**
           * @param node node
           * @return thrown exception names
           * @deprecated to avoid deprecation warning
           *\/
          @Deprecated
          private static List<Name> getThrownExceptions(MethodDeclaration node) {
            return node.thrownExceptions();
          }

          /*
           * @see ASTVisitor#visit(AnnotationTypeDeclaration)
           * @since 3.0
           *\/
          @Override
          public boolean visit(AnnotationTypeDeclaration node) {
            if (node.getJavadoc() != null) {
              node.getJavadoc().accept(this);
            }
            printModifiers(node.modifiers());
            this.fBuffer.append("@interface ");//$NON-NLS-1$
            node.getName().accept(this);
            this.fBuffer.append(" {");//$NON-NLS-1$
            for (Iterator<BodyDeclaration> it= node.bodyDeclarations().iterator(); it.hasNext();) {
              BodyDeclaration d= it.next();
              d.accept(this);
            }
            this.fBuffer.append("}");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(AnnotationTypeMemberDeclaration)
           * @since 3.0
           *\/
          @Override
          public boolean visit(AnnotationTypeMemberDeclaration node) {
            if (node.getJavadoc() != null) {
              node.getJavadoc().accept(this);
            }
            printModifiers(node.modifiers());
            node.getType().accept(this);
            this.fBuffer.append(" ");//$NON-NLS-1$
            node.getName().accept(this);
            this.fBuffer.append("()");//$NON-NLS-1$
            if (node.getDefault() != null) {
              this.fBuffer.append(" default ");//$NON-NLS-1$
              node.getDefault().accept(this);
            }
            this.fBuffer.append(";");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(AnonymousClassDeclaration)
           *\/
          @Override
          public boolean visit(AnonymousClassDeclaration node) {
            this.fBuffer.append("{");//$NON-NLS-1$
            List<BodyDeclaration> bodyDeclarations= node.bodyDeclarations();
            for (Iterator<BodyDeclaration> it= bodyDeclarations.iterator(); it.hasNext();) {
              BodyDeclaration b= it.next();
              b.accept(this);
            }
            this.fBuffer.append("}");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(ArrayAccess)
           *\/
          @Override
          public boolean visit(ArrayAccess node) {
            node.getArray().accept(this);
            this.fBuffer.append("[");//$NON-NLS-1$
            node.getIndex().accept(this);
            this.fBuffer.append("]");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(ArrayCreation)
           *\/
          @Override
          public boolean visit(ArrayCreation node) {
            this.fBuffer.append("new ");//$NON-NLS-1$
            ArrayType at= node.getType();
            int dims= at.getDimensions();
            Type elementType= at.getElementType();
            elementType.accept(this);
            for (Iterator<Expression> it= node.dimensions().iterator(); it.hasNext();) {
              this.fBuffer.append("[");//$NON-NLS-1$
              Expression e= it.next();
              e.accept(this);
              this.fBuffer.append("]");//$NON-NLS-1$
              dims--;
            }
            // add empty "[]" for each extra array dimension
            for (int i= 0; i < dims; i++) {
              this.fBuffer.append("[]");//$NON-NLS-1$
            }
            if (node.getInitializer() != null) {
              node.getInitializer().accept(this);
            }
            return false;
          }

          /*
           * @see ASTVisitor#visit(ArrayInitializer)
           *\/
          @Override
          public boolean visit(ArrayInitializer node) {
            this.fBuffer.append("{");//$NON-NLS-1$
            for (Iterator<Expression> it= node.expressions().iterator(); it.hasNext();) {
              Expression e= it.next();
              e.accept(this);
              if (it.hasNext()) {
                this.fBuffer.append(",");//$NON-NLS-1$
              }
            }
            this.fBuffer.append("}");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(ArrayType)
           *\/
          @Override
          public boolean visit(ArrayType node) {
            if (node.getAST().apiLevel() < AST.JLS8) {
              getComponentType(node).accept(this);
              this.fBuffer.append("[]");//$NON-NLS-1$
            } else {
              node.getElementType().accept(this);
              List<Dimension> dimensions = node.dimensions();
              for (int i = 0; i < dimensions.size() ; i++) {
                Dimension dimension = dimensions.get(i);
                dimension.accept(this);
              }
            }
            return false;
          }

          /*
           * @see ASTVisitor#visit(AssertStatement)
           *\/
          @Override
          public boolean visit(AssertStatement node) {
            this.fBuffer.append("assert ");//$NON-NLS-1$
            node.getExpression().accept(this);
            if (node.getMessage() != null) {
              this.fBuffer.append(" : ");//$NON-NLS-1$
              node.getMessage().accept(this);
            }
            this.fBuffer.append(";");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(Assignment)
           *\/
          @Override
          public boolean visit(Assignment node) {
            node.getLeftHandSide().accept(this);
            this.fBuffer.append(node.getOperator().toString());
            node.getRightHandSide().accept(this);
            return false;
          }

          /*
           * @see ASTVisitor#visit(Block)
           *\/
          @Override
          public boolean visit(Block node) {
            this.fBuffer.append("{");//$NON-NLS-1$
            for (Iterator<Statement> it= node.statements().iterator(); it.hasNext();) {
              Statement s= it.next();
              s.accept(this);
            }
            this.fBuffer.append("}");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(BlockComment)
           * @since 3.0
           *\/
          @Override
          public boolean visit(BlockComment node) {
            this.fBuffer.append("/* *\/");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(BooleanLiteral)
           *\/
          @Override
          public boolean visit(BooleanLiteral node) {
            if (node.booleanValue() == true) {
              this.fBuffer.append("true");//$NON-NLS-1$
            } else {
              this.fBuffer.append("false");//$NON-NLS-1$
            }
            return false;
          }

          /*
           * @see ASTVisitor#visit(BreakStatement)
           *\/
          @Override
          public boolean visit(BreakStatement node) {
            this.fBuffer.append("break");//$NON-NLS-1$
            if (node.getLabel() != null) {
              this.fBuffer.append(" ");//$NON-NLS-1$
              node.getLabel().accept(this);
            }
            this.fBuffer.append(";");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(CastExpression)
           *\/
          @Override
          public boolean visit(CastExpression node) {
            this.fBuffer.append("(");//$NON-NLS-1$
            node.getType().accept(this);
            this.fBuffer.append(")");//$NON-NLS-1$
            node.getExpression().accept(this);
            return false;
          }

          /*
           * @see ASTVisitor#visit(CatchClause)
           *\/
          @Override
          public boolean visit(CatchClause node) {
            this.fBuffer.append("catch (");//$NON-NLS-1$
            node.getException().accept(this);
            this.fBuffer.append(") ");//$NON-NLS-1$
            node.getBody().accept(this);
            return false;
          }

          /*
           * @see ASTVisitor#visit(CharacterLiteral)
           *\/
          @Override
          public boolean visit(CharacterLiteral node) {
            this.fBuffer.append(node.getEscapedValue());
            return false;
          }

          /*
           * @see ASTVisitor#visit(ClassInstanceCreation)
           *\/
          @Override
          public boolean visit(ClassInstanceCreation node) {
            if (node.getExpression() != null) {
              node.getExpression().accept(this);
              this.fBuffer.append(".");//$NON-NLS-1$
            }
            this.fBuffer.append("new ");//$NON-NLS-1$
            if (node.getAST().apiLevel() >= JLS3) {
              if (!node.typeArguments().isEmpty()) {
                this.fBuffer.append("<");//$NON-NLS-1$
                for (Iterator<Type> it= node.typeArguments().iterator(); it.hasNext();) {
                  Type t= it.next();
                  t.accept(this);
                  if (it.hasNext()) {
                    this.fBuffer.append(",");//$NON-NLS-1$
                  }
                }
                this.fBuffer.append(">");//$NON-NLS-1$
              }
              node.getType().accept(this);
            }
            this.fBuffer.append("(");//$NON-NLS-1$
            for (Iterator<Expression> it= node.arguments().iterator(); it.hasNext();) {
              Expression e= it.next();
              e.accept(this);
              if (it.hasNext()) {
                this.fBuffer.append(",");//$NON-NLS-1$
              }
            }
            this.fBuffer.append(")");//$NON-NLS-1$
            if (node.getAnonymousClassDeclaration() != null) {
              node.getAnonymousClassDeclaration().accept(this);
            }
            return false;
          }

          /*
           * @see ASTVisitor#visit(CompilationUnit)
           *\/
          @Override
          public boolean visit(CompilationUnit node) {
            if (node.getPackage() != null) {
              node.getPackage().accept(this);
            }
            for (Iterator<ImportDeclaration> it= node.imports().iterator(); it.hasNext();) {
              ImportDeclaration d= it.next();
              d.accept(this);
            }
            for (Iterator<AbstractTypeDeclaration> it= node.types().iterator(); it.hasNext();) {
              AbstractTypeDeclaration d= it.next();
              d.accept(this);
            }
            return false;
          }

          /*
           * @see ASTVisitor#visit(ConditionalExpression)
           *\/
          @Override
          public boolean visit(ConditionalExpression node) {
            node.getExpression().accept(this);
            this.fBuffer.append("?");//$NON-NLS-1$
            node.getThenExpression().accept(this);
            this.fBuffer.append(":");//$NON-NLS-1$
            node.getElseExpression().accept(this);
            return false;
          }

          /*
           * @see ASTVisitor#visit(ConstructorInvocation)
           *\/
          @Override
          public boolean visit(ConstructorInvocation node) {
            if (node.getAST().apiLevel() >= JLS3) {
              if (!node.typeArguments().isEmpty()) {
                this.fBuffer.append("<");//$NON-NLS-1$
                for (Iterator<Type> it= node.typeArguments().iterator(); it.hasNext();) {
                  Type t= it.next();
                  t.accept(this);
                  if (it.hasNext()) {
                    this.fBuffer.append(",");//$NON-NLS-1$
                  }
                }
                this.fBuffer.append(">");//$NON-NLS-1$
              }
            }
            this.fBuffer.append("this(");//$NON-NLS-1$
            for (Iterator<Expression> it= node.arguments().iterator(); it.hasNext();) {
              Expression e= it.next();
              e.accept(this);
              if (it.hasNext()) {
                this.fBuffer.append(",");//$NON-NLS-1$
              }
            }
            this.fBuffer.append(");");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(ContinueStatement)
           *\/
          @Override
          public boolean visit(ContinueStatement node) {
            this.fBuffer.append("continue");//$NON-NLS-1$
            if (node.getLabel() != null) {
              this.fBuffer.append(" ");//$NON-NLS-1$
              node.getLabel().accept(this);
            }
            this.fBuffer.append(";");//$NON-NLS-1$
            return false;
          }
          
          /*
           * @see ASTVisitor#visit(CreationReference)
           *\/
          @Override
          public boolean visit(CreationReference node) {
            node.getType().accept(this);
            printReferenceTypeArguments(node.typeArguments());
            this.fBuffer.append("new");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(Dimension)
           *\/
          @Override
          public boolean visit(Dimension node) {
            this.fBuffer.append(" ");//$NON-NLS-1$
            printAnnotationsList(node.annotations());
            this.fBuffer.append("[]"); //$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(DoStatement)
           *\/
          @Override
          public boolean visit(DoStatement node) {
            this.fBuffer.append("do ");//$NON-NLS-1$
            node.getBody().accept(this);
            this.fBuffer.append(" while (");//$NON-NLS-1$
            node.getExpression().accept(this);
            this.fBuffer.append(");");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(EmptyStatement)
           *\/
          @Override
          public boolean visit(EmptyStatement node) {
            this.fBuffer.append(";");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(EnhancedForStatement)
           * @since 3.0
           *\/
          @Override
          public boolean visit(EnhancedForStatement node) {
            this.fBuffer.append("for (");//$NON-NLS-1$
            node.getParameter().accept(this);
            this.fBuffer.append(" : ");//$NON-NLS-1$
            node.getExpression().accept(this);
            this.fBuffer.append(") ");//$NON-NLS-1$
            node.getBody().accept(this);
            return false;
          }

          /*
           * @see ASTVisitor#visit(EnumConstantDeclaration)
           * @since 3.0
           *\/
          @Override
          public boolean visit(EnumConstantDeclaration node) {
            if (node.getJavadoc() != null) {
              node.getJavadoc().accept(this);
            }
            printModifiers(node.modifiers());
            node.getName().accept(this);
            if (!node.arguments().isEmpty()) {
              this.fBuffer.append("(");//$NON-NLS-1$
              for (Iterator<Expression> it= node.arguments().iterator(); it.hasNext();) {
                Expression e= it.next();
                e.accept(this);
                if (it.hasNext()) {
                  this.fBuffer.append(",");//$NON-NLS-1$
                }
              }
              this.fBuffer.append(")");//$NON-NLS-1$
            }
            if (node.getAnonymousClassDeclaration() != null) {
              node.getAnonymousClassDeclaration().accept(this);
            }
            return false;
          }

          /*
           * @see ASTVisitor#visit(EnumDeclaration)
           * @since 3.0
           *\/
          @Override
          public boolean visit(EnumDeclaration node) {
            if (node.getJavadoc() != null) {
              node.getJavadoc().accept(this);
            }
            printModifiers(node.modifiers());
            this.fBuffer.append("enum ");//$NON-NLS-1$
            node.getName().accept(this);
            this.fBuffer.append(" ");//$NON-NLS-1$
            if (!node.superInterfaceTypes().isEmpty()) {
              this.fBuffer.append("implements ");//$NON-NLS-1$
              for (Iterator<Type> it= node.superInterfaceTypes().iterator(); it.hasNext();) {
                Type t= it.next();
                t.accept(this);
                if (it.hasNext()) {
                  this.fBuffer.append(", ");//$NON-NLS-1$
                }
              }
              this.fBuffer.append(" ");//$NON-NLS-1$
            }
            this.fBuffer.append("{");//$NON-NLS-1$
            for (Iterator<EnumConstantDeclaration> it = node.enumConstants().iterator(); it.hasNext(); ) {
              EnumConstantDeclaration d = it.next();
              d.accept(this);
              // enum constant declarations do not include punctuation
              if (it.hasNext()) {
                // enum constant declarations are separated by commas
                this.fBuffer.append(", ");//$NON-NLS-1$
              }
            }
            if (!node.bodyDeclarations().isEmpty()) {
              this.fBuffer.append("; ");//$NON-NLS-1$
              for (Iterator<BodyDeclaration> it = node.bodyDeclarations().iterator(); it.hasNext(); ) {
                BodyDeclaration d = it.next();
                d.accept(this);
                // other body declarations include trailing punctuation
              }
            }
            this.fBuffer.append("}");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(ExpressionMethodReference)
           *\/
          @Override
          public boolean visit(ExpressionMethodReference node) {
            node.getExpression().accept(this);
            printReferenceTypeArguments(node.typeArguments());
            node.getName().accept(this);
            return false;
          } 

          /*
           * @see ASTVisitor#visit(ExpressionStatement)
           *\/
          @Override
          public boolean visit(ExpressionStatement node) {
            node.getExpression().accept(this);
            this.fBuffer.append(";");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(FieldAccess)
           *\/
          @Override
          public boolean visit(FieldAccess node) {
            node.getExpression().accept(this);
            this.fBuffer.append(".");//$NON-NLS-1$
            node.getName().accept(this);
            return false;
          }

          /*
           * @see ASTVisitor#visit(FieldDeclaration)
           *\/
          @Override
          public boolean visit(FieldDeclaration node) {
            if (node.getJavadoc() != null) {
              node.getJavadoc().accept(this);
            }
            if (node.getAST().apiLevel() >= JLS3) {
              printModifiers(node.modifiers());
            }
            node.getType().accept(this);
            this.fBuffer.append(" ");//$NON-NLS-1$
            for (Iterator<VariableDeclarationFragment> it= node.fragments().iterator(); it.hasNext();) {
              VariableDeclarationFragment f= it.next();
              f.accept(this);
              if (it.hasNext()) {
                this.fBuffer.append(", ");//$NON-NLS-1$
              }
            }
            this.fBuffer.append(";");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(ForStatement)
           *\/
          @Override
          public boolean visit(ForStatement node) {
            this.fBuffer.append("for (");//$NON-NLS-1$
            for (Iterator<Expression> it= node.initializers().iterator(); it.hasNext();) {
              Expression e= it.next();
              e.accept(this);
            }
            this.fBuffer.append("; ");//$NON-NLS-1$
            if (node.getExpression() != null) {
              node.getExpression().accept(this);
            }
            this.fBuffer.append("; ");//$NON-NLS-1$
            for (Iterator<Expression> it= node.updaters().iterator(); it.hasNext();) {
              Expression e= it.next();
              e.accept(this);
            }
            this.fBuffer.append(") ");//$NON-NLS-1$
            node.getBody().accept(this);
            return false;
          }

          /*
           * @see ASTVisitor#visit(IfStatement)
           *\/
          @Override
          public boolean visit(IfStatement node) {
            this.fBuffer.append("if (");//$NON-NLS-1$
            node.getExpression().accept(this);
            this.fBuffer.append(") ");//$NON-NLS-1$
            node.getThenStatement().accept(this);
            if (node.getElseStatement() != null) {
              this.fBuffer.append(" else ");//$NON-NLS-1$
              node.getElseStatement().accept(this);
            }
            return false;
          }

          /*
           * @see ASTVisitor#visit(ImportDeclaration)
           *\/
          @Override
          public boolean visit(ImportDeclaration node) {
            this.fBuffer.append("import ");//$NON-NLS-1$
            if (node.getAST().apiLevel() >= JLS3) {
              if (node.isStatic()) {
                this.fBuffer.append("static ");//$NON-NLS-1$
              }
            }
            node.getName().accept(this);
            if (node.isOnDemand()) {
              this.fBuffer.append(".*");//$NON-NLS-1$
            }
            this.fBuffer.append(";");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(InfixExpression)
           *\/
          @Override
          public boolean visit(InfixExpression node) {
            node.getLeftOperand().accept(this);
            this.fBuffer.append(' '); // for cases like x= i - -1; or x= i++ + ++i;
            this.fBuffer.append(node.getOperator().toString());
            this.fBuffer.append(' ');
            node.getRightOperand().accept(this);
            final List<Expression>extendedOperands = node.extendedOperands();
            if (extendedOperands.size() != 0) {
              this.fBuffer.append(' ');
              for (Iterator<Expression> it = extendedOperands.iterator(); it.hasNext(); ) {
                this.fBuffer.append(node.getOperator().toString()).append(' ');
                Expression e = it.next();
                e.accept(this);
              }
            }
            return false;
          }

          /*
           * @see ASTVisitor#visit(Initializer)
           *\/
          @Override
          public boolean visit(Initializer node) {
            if (node.getJavadoc() != null) {
              node.getJavadoc().accept(this);
            }
            if (node.getAST().apiLevel() >= JLS3) {
              printModifiers(node.modifiers());
            }
            node.getBody().accept(this);
            return false;
          }

          /*
           * @see ASTVisitor#visit(InstanceofExpression)
           *\/
          @Override
          public boolean visit(InstanceofExpression node) {
            node.getLeftOperand().accept(this);
            this.fBuffer.append(" instanceof ");//$NON-NLS-1$
            node.getRightOperand().accept(this);
            return false;
          }

          /*
           * @see ASTVisitor#visit(IntersectionType)
           *\/
          @Override
          public boolean visit(IntersectionType node) {
            for (Iterator<Type> it = node.types().iterator(); it.hasNext(); ) {
              Type t = it.next();
              t.accept(this);
              if (it.hasNext()) {
                this.fBuffer.append(" & "); //$NON-NLS-1$
              }
            }
            return false;
          }

          /*
           * @see ASTVisitor#visit(Javadoc)
           *\/
          @Override
          public boolean visit(Javadoc node) {
            this.fBuffer.append("/** ");//$NON-NLS-1$
            for (Iterator<TagElement> it= node.tags().iterator(); it.hasNext();) {
              ASTNode e= it.next();
              e.accept(this);
            }
            this.fBuffer.append("\n *\/");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(LabeledStatement)
           *\/
          @Override
          public boolean visit(LabeledStatement node) {
            node.getLabel().accept(this);
            this.fBuffer.append(": ");//$NON-NLS-1$
            node.getBody().accept(this);
            return false;
          }

          /*
           * @see ASTVisitor#visit(LambdaExpression)
           *\/
          @Override
          public boolean visit(LambdaExpression node) {
            boolean hasParentheses= node.hasParentheses();
            if (hasParentheses)
              this.fBuffer.append('(');
            for (Iterator<? extends VariableDeclaration> it= node.parameters().iterator(); it.hasNext(); ) {
              VariableDeclaration v= it.next();
              v.accept(this);
              if (it.hasNext()) {
                this.fBuffer.append(",");//$NON-NLS-1$
              }
            }
            if (hasParentheses)
              this.fBuffer.append(')');
            this.fBuffer.append(" -> "); //$NON-NLS-1$
            node.getBody().accept(this);
            return false;
          }

          /*
           * @see ASTVisitor#visit(LineComment)
           * @since 3.0
           *\/
          @Override
          public boolean visit(LineComment node) {
            this.fBuffer.append("//\n");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(MarkerAnnotation)
           * @since 3.0
           *\/
          @Override
          public boolean visit(MarkerAnnotation node) {
            this.fBuffer.append("@");//$NON-NLS-1$
            node.getTypeName().accept(this);
            return false;
          }

          /*
           * @see ASTVisitor#visit(MemberRef)
           * @since 3.0
           *\/
          @Override
          public boolean visit(MemberRef node) {
            if (node.getQualifier() != null) {
              node.getQualifier().accept(this);
            }
            this.fBuffer.append("#");//$NON-NLS-1$
            node.getName().accept(this);
            return false;
          }

          /*
           * @see ASTVisitor#visit(MemberValuePair)
           * @since 3.0
           *\/
          @Override
          public boolean visit(MemberValuePair node) {
            node.getName().accept(this);
            this.fBuffer.append("=");//$NON-NLS-1$
            node.getValue().accept(this);
            return false;
          }

          /*
           * @see ASTVisitor#visit(MethodRef)
           * @since 3.0
           *\/
          @Override
          public boolean visit(MethodRef node) {
            if (node.getQualifier() != null) {
              node.getQualifier().accept(this);
            }
            this.fBuffer.append("#");//$NON-NLS-1$
            node.getName().accept(this);
            this.fBuffer.append("(");//$NON-NLS-1$
            for (Iterator<MethodRefParameter> it= node.parameters().iterator(); it.hasNext();) {
              MethodRefParameter e= it.next();
              e.accept(this);
              if (it.hasNext()) {
                this.fBuffer.append(",");//$NON-NLS-1$
              }
            }
            this.fBuffer.append(")");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(MethodRefParameter)
           * @since 3.0
           *\/
          @Override
          public boolean visit(MethodRefParameter node) {
            node.getType().accept(this);
            if (node.getAST().apiLevel() >= JLS3) {
              if (node.isVarargs()) {
                this.fBuffer.append("...");//$NON-NLS-1$
              }
            }
            if (node.getName() != null) {
              this.fBuffer.append(" ");//$NON-NLS-1$
              node.getName().accept(this);
            }
            return false;
          }

          /*
           * @see ASTVisitor#visit(MethodDeclaration)
           *\/
          @Override
          public boolean visit(MethodDeclaration node) {
            if (node.getJavadoc() != null) {
              node.getJavadoc().accept(this);
            }
            if (node.getAST().apiLevel() >= JLS3) {
              printModifiers(node.modifiers());
              if (!node.typeParameters().isEmpty()) {
                this.fBuffer.append("<");//$NON-NLS-1$
                for (Iterator<TypeParameter> it= node.typeParameters().iterator(); it.hasNext();) {
                  TypeParameter t= it.next();
                  t.accept(this);
                  if (it.hasNext()) {
                    this.fBuffer.append(", ");//$NON-NLS-1$
                  }
                }
                this.fBuffer.append("> ");//$NON-NLS-1$
              }
            }
            if (!node.isConstructor()) {
              if (node.getReturnType2() != null) {
                node.getReturnType2().accept(this);
              } else {
                // methods really ought to have a return type
                this.fBuffer.append("void");//$NON-NLS-1$
              }
              this.fBuffer.append(" ");//$NON-NLS-1$
            }
            node.getName().accept(this);
            this.fBuffer.append("(");//$NON-NLS-1$
            if (node.getAST().apiLevel() >= AST.JLS8) {
              Type receiverType= node.getReceiverType();
              if (receiverType != null) {
                receiverType.accept(this);
                this.fBuffer.append(' ');
                SimpleName qualifier= node.getReceiverQualifier();
                if (qualifier != null) {
                  qualifier.accept(this);
                  this.fBuffer.append('.');
                }
                this.fBuffer.append("this"); //$NON-NLS-1$
                if (node.parameters().size() > 0) {
                  this.fBuffer.append(',');
                }
              }
            }
            for (Iterator<SingleVariableDeclaration> it= node.parameters().iterator(); it.hasNext();) {
              SingleVariableDeclaration v= it.next();
              v.accept(this);
              if (it.hasNext()) {
                this.fBuffer.append(", ");//$NON-NLS-1$
              }
            }
            this.fBuffer.append(")");//$NON-NLS-1$
            if (node.getAST().apiLevel() >= AST.JLS8) {
              List<Dimension> dimensions = node.extraDimensions();
              for (Iterator<Dimension> it= dimensions.iterator(); it.hasNext(); ) {
                Dimension e= it.next();
                e.accept(this);
              }
            } else {
              for (int i= 0; i < node.getExtraDimensions(); i++) {
                this.fBuffer.append("[]"); //$NON-NLS-1$
              }
            }
            List<? extends ASTNode> thrownExceptions= node.getAST().apiLevel() >= AST.JLS8 ? node.thrownExceptionTypes() : getThrownExceptions(node);
            if (!thrownExceptions.isEmpty()) {        
              this.fBuffer.append(" throws ");//$NON-NLS-1$
              for (Iterator<? extends ASTNode> it= thrownExceptions.iterator(); it.hasNext();) {
                ASTNode n = it.next();
                n.accept(this);
                if (it.hasNext()) {
                  this.fBuffer.append(", ");//$NON-NLS-1$
                }
              }
              this.fBuffer.append(" ");//$NON-NLS-1$
            }
            if (node.getBody() == null) {
              this.fBuffer.append(";");//$NON-NLS-1$
            } else {
              node.getBody().accept(this);
            }
            return false;
          }

          /*
           * @see ASTVisitor#visit(MethodInvocation)
           *\/
          @Override
          public boolean visit(MethodInvocation node) {
            if (node.getExpression() != null) {
              node.getExpression().accept(this);
              this.fBuffer.append(".");//$NON-NLS-1$
            }
            if (node.getAST().apiLevel() >= JLS3) {
              if (!node.typeArguments().isEmpty()) {
                this.fBuffer.append("<");//$NON-NLS-1$
                for (Iterator<Type> it= node.typeArguments().iterator(); it.hasNext();) {
                  Type t= it.next();
                  t.accept(this);
                  if (it.hasNext()) {
                    this.fBuffer.append(",");//$NON-NLS-1$
                  }
                }
                this.fBuffer.append(">");//$NON-NLS-1$
              }
            }
            node.getName().accept(this);
            this.fBuffer.append("(");//$NON-NLS-1$
            for (Iterator<Expression> it= node.arguments().iterator(); it.hasNext();) {
              Expression e= it.next();
              e.accept(this);
              if (it.hasNext()) {
                this.fBuffer.append(",");//$NON-NLS-1$
              }
            }
            this.fBuffer.append(")");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(Modifier)
           * @since 3.0
           *\/
          @Override
          public boolean visit(Modifier node) {
            this.fBuffer.append(node.getKeyword().toString());
            return false;
          }

          /*
           * @see ASTVisitor#visit(NameQualifiedType)
           *\/
          @Override
          public boolean visit(NameQualifiedType node) {
            node.getQualifier().accept(this);
            this.fBuffer.append('.');
            printTypeAnnotations(node);
            node.getName().accept(this);
            return false;
          }

          /*
           * @see ASTVisitor#visit(NormalAnnotation)
           * @since 3.0
           *\/
          @Override
          public boolean visit(NormalAnnotation node) {
            this.fBuffer.append("@");//$NON-NLS-1$
            node.getTypeName().accept(this);
            this.fBuffer.append("(");//$NON-NLS-1$
            for (Iterator<MemberValuePair> it= node.values().iterator(); it.hasNext();) {
              MemberValuePair p= it.next();
              p.accept(this);
              if (it.hasNext()) {
                this.fBuffer.append(",");//$NON-NLS-1$
              }
            }
            this.fBuffer.append(")");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(NullLiteral)
           *\/
          @Override
          public boolean visit(NullLiteral node) {
            this.fBuffer.append("null");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(NumberLiteral)
           *\/
          @Override
          public boolean visit(NumberLiteral node) {
            this.fBuffer.append(node.getToken());
            return false;
          }

          /*
           * @see ASTVisitor#visit(PackageDeclaration)
           *\/
          @Override
          public boolean visit(PackageDeclaration node) {
            if (node.getAST().apiLevel() >= JLS3) {
              if (node.getJavadoc() != null) {
                node.getJavadoc().accept(this);
              }
              for (Iterator<Annotation> it= node.annotations().iterator(); it.hasNext();) {
                Annotation p= it.next();
                p.accept(this);
                this.fBuffer.append(" ");//$NON-NLS-1$
              }
            }
            this.fBuffer.append("package ");//$NON-NLS-1$
            node.getName().accept(this);
            this.fBuffer.append(";");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(ParameterizedType)
           * @since 3.0
           *\/
          @Override
          public boolean visit(ParameterizedType node) {
            node.getType().accept(this);
            this.fBuffer.append("<");//$NON-NLS-1$
            for (Iterator<Type> it= node.typeArguments().iterator(); it.hasNext();) {
              Type t= it.next();
              t.accept(this);
              if (it.hasNext()) {
                this.fBuffer.append(",");//$NON-NLS-1$
              }
            }
            this.fBuffer.append(">");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(ParenthesizedExpression)
           *\/
          @Override
          public boolean visit(ParenthesizedExpression node) {
            this.fBuffer.append("(");//$NON-NLS-1$
            node.getExpression().accept(this);
            this.fBuffer.append(")");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(PostfixExpression)
           *\/
          @Override
          public boolean visit(PostfixExpression node) {
            node.getOperand().accept(this);
            this.fBuffer.append(node.getOperator().toString());
            return false;
          }

          /*
           * @see ASTVisitor#visit(PrefixExpression)
           *\/
          @Override
          public boolean visit(PrefixExpression node) {
            this.fBuffer.append(node.getOperator().toString());
            node.getOperand().accept(this);
            return false;
          }

          /*
           * @see ASTVisitor#visit(PrimitiveType)
           *\/
          @Override
          public boolean visit(PrimitiveType node) {
            printTypeAnnotations(node);
            this.fBuffer.append(node.getPrimitiveTypeCode().toString());
            return false;
          }

          /*
           * @see ASTVisitor#visit(QualifiedName)
           *\/
          @Override
          public boolean visit(QualifiedName node) {
            node.getQualifier().accept(this);
            this.fBuffer.append(".");//$NON-NLS-1$
            node.getName().accept(this);
            return false;
          }

          /*
           * @see ASTVisitor#visit(QualifiedType)
           * @since 3.0
           *\/
          @Override
          public boolean visit(QualifiedType node) {
            node.getQualifier().accept(this);
            this.fBuffer.append(".");//$NON-NLS-1$
            printTypeAnnotations(node);
            node.getName().accept(this);
            return false;
          }

          /*
           * @see ASTVisitor#visit(ReturnStatement)
           *\/
          @Override
          public boolean visit(ReturnStatement node) {
            this.fBuffer.append("return");//$NON-NLS-1$
            if (node.getExpression() != null) {
              this.fBuffer.append(" ");//$NON-NLS-1$
              node.getExpression().accept(this);
            }
            this.fBuffer.append(";");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(SimpleName)
           *\/
          @Override
          public boolean visit(SimpleName node) {
            this.fBuffer.append(node.getIdentifier());
            return false;
          }

          /*
           * @see ASTVisitor#visit(SimpleType)
           *\/
          @Override
          public boolean visit(SimpleType node) {
            printTypeAnnotations(node);
            node.getName().accept(this);
            return false;
          }

          /*
           * @see ASTVisitor#visit(SingleMemberAnnotation)
           * @since 3.0
           *\/
          @Override
          public boolean visit(SingleMemberAnnotation node) {
            this.fBuffer.append("@");//$NON-NLS-1$
            node.getTypeName().accept(this);
            this.fBuffer.append("(");//$NON-NLS-1$
            node.getValue().accept(this);
            this.fBuffer.append(")");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(SingleVariableDeclaration)
           *\/
          @Override
          public boolean visit(SingleVariableDeclaration node) {
            if (node.getAST().apiLevel() >= JLS3) {
              printModifiers(node.modifiers());
            }
            node.getType().accept(this);
            if (node.getAST().apiLevel() >= JLS3) {
              if (node.isVarargs()) {
                if (node.getAST().apiLevel() >= AST.JLS8) {
                  this.fBuffer.append(' ');
                  List<Annotation> annotations= node.varargsAnnotations();
                  printAnnotationsList(annotations);
                }
                this.fBuffer.append("...");//$NON-NLS-1$
              }
            }
            this.fBuffer.append(" ");//$NON-NLS-1$
            node.getName().accept(this);
            if (node.getAST().apiLevel() >= AST.JLS8) {
              List<Dimension> dimensions = node.extraDimensions();
              for (Iterator<Dimension> it= dimensions.iterator(); it.hasNext(); ) {
                Dimension e= it.next();
                e.accept(this);
              }
            } else {
              for (int i= 0; i < node.getExtraDimensions(); i++) {
                this.fBuffer.append("[]"); //$NON-NLS-1$
              }
            }
            if (node.getInitializer() != null) {
              this.fBuffer.append("=");//$NON-NLS-1$
              node.getInitializer().accept(this);
            }
            return false;
          }

          /*
           * @see ASTVisitor#visit(StringLiteral)
           *\/
          @Override
          public boolean visit(StringLiteral node) {
            this.fBuffer.append(node.getEscapedValue());
            return false;
          }

          /*
           * @see ASTVisitor#visit(SuperConstructorInvocation)
           *\/
          @Override
          public boolean visit(SuperConstructorInvocation node) {
            if (node.getExpression() != null) {
              node.getExpression().accept(this);
              this.fBuffer.append(".");//$NON-NLS-1$
            }
            if (node.getAST().apiLevel() >= JLS3) {
              if (!node.typeArguments().isEmpty()) {
                this.fBuffer.append("<");//$NON-NLS-1$
                for (Iterator<Type> it= node.typeArguments().iterator(); it.hasNext();) {
                  Type t= it.next();
                  t.accept(this);
                  if (it.hasNext()) {
                    this.fBuffer.append(",");//$NON-NLS-1$
                  }
                }
                this.fBuffer.append(">");//$NON-NLS-1$
              }
            }
            this.fBuffer.append("super(");//$NON-NLS-1$
            for (Iterator<Expression> it= node.arguments().iterator(); it.hasNext();) {
              Expression e= it.next();
              e.accept(this);
              if (it.hasNext()) {
                this.fBuffer.append(",");//$NON-NLS-1$
              }
            }
            this.fBuffer.append(");");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(SuperFieldAccess)
           *\/
          @Override
          public boolean visit(SuperFieldAccess node) {
            if (node.getQualifier() != null) {
              node.getQualifier().accept(this);
              this.fBuffer.append(".");//$NON-NLS-1$
            }
            this.fBuffer.append("super.");//$NON-NLS-1$
            node.getName().accept(this);
            return false;
          }

          /*
           * @see ASTVisitor#visit(SuperMethodInvocation)
           *\/
          @Override
          public boolean visit(SuperMethodInvocation node) {
            if (node.getQualifier() != null) {
              node.getQualifier().accept(this);
              this.fBuffer.append(".");//$NON-NLS-1$
            }
            this.fBuffer.append("super.");//$NON-NLS-1$
            if (node.getAST().apiLevel() >= JLS3) {
              if (!node.typeArguments().isEmpty()) {
                this.fBuffer.append("<");//$NON-NLS-1$
                for (Iterator<Type> it= node.typeArguments().iterator(); it.hasNext();) {
                  Type t= it.next();
                  t.accept(this);
                  if (it.hasNext()) {
                    this.fBuffer.append(",");//$NON-NLS-1$
                  }
                }
                this.fBuffer.append(">");//$NON-NLS-1$
              }
            }
            node.getName().accept(this);
            this.fBuffer.append("(");//$NON-NLS-1$
            for (Iterator<Expression> it= node.arguments().iterator(); it.hasNext();) {
              Expression e= it.next();
              e.accept(this);
              if (it.hasNext()) {
                this.fBuffer.append(",");//$NON-NLS-1$
              }
            }
            this.fBuffer.append(")");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(SuperMethodReference)
           *\/
          @Override
          public boolean visit(SuperMethodReference node) {
            if (node.getQualifier() != null) {
              node.getQualifier().accept(this);
              this.fBuffer.append('.');
            }
            this.fBuffer.append("super");//$NON-NLS-1$
            printReferenceTypeArguments(node.typeArguments());
            node.getName().accept(this);
            return false;
          }

          /*
           * @see ASTVisitor#visit(SwitchCase)
           *\/
          @Override
          public boolean visit(SwitchCase node) {
            if (node.isDefault()) {
              this.fBuffer.append("default :");//$NON-NLS-1$
            } else {
              this.fBuffer.append("case ");//$NON-NLS-1$
              node.getExpression().accept(this);
              this.fBuffer.append(":");//$NON-NLS-1$
            }
            return false;
          }

          /*
           * @see ASTVisitor#visit(SwitchStatement)
           *\/
          @Override
          public boolean visit(SwitchStatement node) {
            this.fBuffer.append("switch (");//$NON-NLS-1$
            node.getExpression().accept(this);
            this.fBuffer.append(") ");//$NON-NLS-1$
            this.fBuffer.append("{");//$NON-NLS-1$
            for (Iterator<Statement> it= node.statements().iterator(); it.hasNext();) {
              Statement s= it.next();
              s.accept(this);
            }
            this.fBuffer.append("}");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(SynchronizedStatement)
           *\/
          @Override
          public boolean visit(SynchronizedStatement node) {
            this.fBuffer.append("synchronized (");//$NON-NLS-1$
            node.getExpression().accept(this);
            this.fBuffer.append(") ");//$NON-NLS-1$
            node.getBody().accept(this);
            return false;
          }

          /*
           * @see ASTVisitor#visit(TagElement)
           * @since 3.0
           *\/
          @Override
          public boolean visit(TagElement node) {
            if (node.isNested()) {
              // nested tags are always enclosed in braces
              this.fBuffer.append("{");//$NON-NLS-1$
            } else {
              // top-level tags always begin on a new line
              this.fBuffer.append("\n * ");//$NON-NLS-1$
            }
            boolean previousRequiresWhiteSpace= false;
            if (node.getTagName() != null) {
              this.fBuffer.append(node.getTagName());
              previousRequiresWhiteSpace= true;
            }
            boolean previousRequiresNewLine= false;
            for (Iterator<? extends ASTNode> it= node.fragments().iterator(); it.hasNext();) {
              ASTNode e= it.next();
              // assume text elements include necessary leading and trailing whitespace
              // but Name, MemberRef, MethodRef, and nested TagElement do not include white space
              boolean currentIncludesWhiteSpace= (e instanceof TextElement);
              if (previousRequiresNewLine && currentIncludesWhiteSpace) {
                this.fBuffer.append("\n * ");//$NON-NLS-1$
              }
              previousRequiresNewLine= currentIncludesWhiteSpace;
              // add space if required to separate
              if (previousRequiresWhiteSpace && !currentIncludesWhiteSpace) {
                this.fBuffer.append(" "); //$NON-NLS-1$
              }
              e.accept(this);
              previousRequiresWhiteSpace= !currentIncludesWhiteSpace && !(e instanceof TagElement);
            }
            if (node.isNested()) {
              this.fBuffer.append("}");//$NON-NLS-1$
            }
            return false;
          }

          /*
           * @see ASTVisitor#visit(TextElement)
           * @since 3.0
           *\/
          @Override
          public boolean visit(TextElement node) {
            this.fBuffer.append(node.getText());
            return false;
          }

          /*
           * @see ASTVisitor#visit(ThisExpression)
           *\/
          @Override
          public boolean visit(ThisExpression node) {
            if (node.getQualifier() != null) {
              node.getQualifier().accept(this);
              this.fBuffer.append(".");//$NON-NLS-1$
            }
            this.fBuffer.append("this");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(ThrowStatement)
           *\/
          @Override
          public boolean visit(ThrowStatement node) {
            this.fBuffer.append("throw ");//$NON-NLS-1$
            node.getExpression().accept(this);
            this.fBuffer.append(";");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(TryStatement)
           *\/
          @Override
          public boolean visit(TryStatement node) {
            this.fBuffer.append("try ");//$NON-NLS-1$
            if (node.getAST().apiLevel() >= JLS4) {
              if (!node.resources().isEmpty()) {
                this.fBuffer.append("(");//$NON-NLS-1$
                for (Iterator<VariableDeclarationExpression> it= node.resources().iterator(); it.hasNext();) {
                  VariableDeclarationExpression var= it.next();
                  var.accept(this);
                  if (it.hasNext()) {
                    this.fBuffer.append(",");//$NON-NLS-1$
                  }
                }
                this.fBuffer.append(") ");//$NON-NLS-1$
              }
            }
            node.getBody().accept(this);
            this.fBuffer.append(" ");//$NON-NLS-1$
            for (Iterator<CatchClause> it= node.catchClauses().iterator(); it.hasNext();) {
              CatchClause cc= it.next();
              cc.accept(this);
            }
            if (node.getFinally() != null) {
              this.fBuffer.append("finally ");//$NON-NLS-1$
              node.getFinally().accept(this);
            }
            return false;
          }

          /*
           * @see ASTVisitor#visit(TypeDeclaration)
           *\/
          @Override
          public boolean visit(TypeDeclaration node) {
            if (node.getJavadoc() != null) {
              node.getJavadoc().accept(this);
            }
            if (node.getAST().apiLevel() >= JLS3) {
              printModifiers(node.modifiers());
            }
            this.fBuffer.append(node.isInterface() ? "interface " : "class ");//$NON-NLS-2$//$NON-NLS-1$
            node.getName().accept(this);
            if (node.getAST().apiLevel() >= JLS3) {
              if (!node.typeParameters().isEmpty()) {
                this.fBuffer.append("<");//$NON-NLS-1$
                for (Iterator<TypeParameter> it= node.typeParameters().iterator(); it.hasNext();) {
                  TypeParameter t= it.next();
                  t.accept(this);
                  if (it.hasNext()) {
                    this.fBuffer.append(",");//$NON-NLS-1$
                  }
                }
                this.fBuffer.append(">");//$NON-NLS-1$
              }
            }
            this.fBuffer.append(" ");//$NON-NLS-1$
            if (node.getAST().apiLevel() >= JLS3) {
              if (node.getSuperclassType() != null) {
                this.fBuffer.append("extends ");//$NON-NLS-1$
                node.getSuperclassType().accept(this);
                this.fBuffer.append(" ");//$NON-NLS-1$
              }
              if (!node.superInterfaceTypes().isEmpty()) {
                this.fBuffer.append(node.isInterface() ? "extends " : "implements ");//$NON-NLS-2$//$NON-NLS-1$
                for (Iterator<Type> it= node.superInterfaceTypes().iterator(); it.hasNext();) {
                  Type t= it.next();
                  t.accept(this);
                  if (it.hasNext()) {
                    this.fBuffer.append(", ");//$NON-NLS-1$
                  }
                }
                this.fBuffer.append(" ");//$NON-NLS-1$
              }
            }
            this.fBuffer.append("{");//$NON-NLS-1$
            BodyDeclaration prev= null;
            for (Iterator<BodyDeclaration> it= node.bodyDeclarations().iterator(); it.hasNext();) {
              BodyDeclaration d= it.next();
              if (prev instanceof EnumConstantDeclaration) {
                // enum constant declarations do not include punctuation
                if (d instanceof EnumConstantDeclaration) {
                  // enum constant declarations are separated by commas
                  this.fBuffer.append(", ");//$NON-NLS-1$
                } else {
                  // semicolon separates last enum constant declaration from
                  // first class body declarations
                  this.fBuffer.append("; ");//$NON-NLS-1$
                }
              }
              d.accept(this);
              prev= d;
            }
            this.fBuffer.append("}");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(TypeDeclarationStatement)
           *\/
          @Override
          public boolean visit(TypeDeclarationStatement node) {
            if (node.getAST().apiLevel() >= JLS3) {
              node.getDeclaration().accept(this);
            }
            return false;
          }

          /*
           * @see ASTVisitor#visit(TypeLiteral)
           *\/
          @Override
          public boolean visit(TypeLiteral node) {
            node.getType().accept(this);
            this.fBuffer.append(".class");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(TypeMethodReference)
           *\/
          @Override
          public boolean visit(TypeMethodReference node) {
            node.getType().accept(this);
            printReferenceTypeArguments(node.typeArguments());
            node.getName().accept(this);
            return false;
          }

          /*
           * @see ASTVisitor#visit(TypeParameter)
           * @since 3.0
           *\/
          @Override
          public boolean visit(TypeParameter node) {
            printModifiers(node.modifiers());
            node.getName().accept(this);
            if (!node.typeBounds().isEmpty()) {
              this.fBuffer.append(" extends ");//$NON-NLS-1$
              for (Iterator<Type> it= node.typeBounds().iterator(); it.hasNext();) {
                Type t= it.next();
                t.accept(this);
                if (it.hasNext()) {
                  this.fBuffer.append(" & ");//$NON-NLS-1$
                }
              }
            }
            return false;
          }

          /*
           * @see ASTVisitor#visit(UnionType)
           *\/
          @Override
          public boolean visit(UnionType node) {
            for (Iterator<Type> it= node.types().iterator(); it.hasNext();) {
              Type t= it.next();
              t.accept(this);
              if (it.hasNext()) {
                this.fBuffer.append("|");//$NON-NLS-1$
              }
            }
            return false;
          }
          
          /*
           * @see ASTVisitor#visit(VariableDeclarationExpression)
           *\/
          @Override
          public boolean visit(VariableDeclarationExpression node) {
            if (node.getAST().apiLevel() >= JLS3) {
              printModifiers(node.modifiers());
            }
            node.getType().accept(this);
            this.fBuffer.append(" ");//$NON-NLS-1$
            for (Iterator<VariableDeclarationFragment> it= node.fragments().iterator(); it.hasNext();) {
              VariableDeclarationFragment f= it.next();
              f.accept(this);
              if (it.hasNext()) {
                this.fBuffer.append(", ");//$NON-NLS-1$
              }
            }
            return false;
          }

          /*
           * @see ASTVisitor#visit(VariableDeclarationFragment)
           *\/
          @Override
          public boolean visit(VariableDeclarationFragment node) {
            node.getName().accept(this);
            if (node.getAST().apiLevel() >= AST.JLS8) {
              List<Dimension> dimensions = node.extraDimensions();
              for (Iterator<Dimension> it= dimensions.iterator(); it.hasNext(); ) {
                Dimension e= it.next();
                e.accept(this);
              }
            } else {
              for (int i= 0; i < node.getExtraDimensions(); i++) {
                this.fBuffer.append("[]"); //$NON-NLS-1$
              }
            }
            if (node.getInitializer() != null) {
              this.fBuffer.append("=");//$NON-NLS-1$
              node.getInitializer().accept(this);
            }
            return false;
          }

          /*
           * @see ASTVisitor#visit(VariableDeclarationStatement)
           *\/
          @Override
          public boolean visit(VariableDeclarationStatement node) {
            if (node.getAST().apiLevel() >= JLS3) {
              printModifiers(node.modifiers());
            }
            node.getType().accept(this);
            this.fBuffer.append(" ");//$NON-NLS-1$
            for (Iterator<VariableDeclarationFragment> it= node.fragments().iterator(); it.hasNext();) {
              VariableDeclarationFragment f= it.next();
              f.accept(this);
              if (it.hasNext()) {
                this.fBuffer.append(", ");//$NON-NLS-1$
              }
            }
            this.fBuffer.append(";");//$NON-NLS-1$
            return false;
          }

          /*
           * @see ASTVisitor#visit(WhileStatement)
           *\/
          @Override
          public boolean visit(WhileStatement node) {
            this.fBuffer.append("while (");//$NON-NLS-1$
            node.getExpression().accept(this);
            this.fBuffer.append(") ");//$NON-NLS-1$
            node.getBody().accept(this);
            return false;
          }

          /*
           * @see ASTVisitor#visit(WildcardType)
           * @since 3.0
           *\/
          @Override
          public boolean visit(WildcardType node) {
            printTypeAnnotations(node);
            this.fBuffer.append("?");//$NON-NLS-1$
            Type bound= node.getBound();
            if (bound != null) {
              if (node.isUpperBound()) {
                this.fBuffer.append(" extends ");//$NON-NLS-1$
              } else {
                this.fBuffer.append(" super ");//$NON-NLS-1$
              }
              bound.accept(this);
            }
            return false;
          }

        }
      */}).replace(/\*\\\//g, '*/');
      assert.deepEqual(
        JavaParser.parse(src)
        ,
      {
          node: "CompilationUnit",
          package: {
              node: "PackageDeclaration",
              annotations: [],
              name: {
                  node: "QualifiedName",
                  qualifier: {
                      node: "QualifiedName",
                      qualifier: {
                          node: "QualifiedName",
                          qualifier: {
                              node: "QualifiedName",
                              qualifier: {
                                  node: "QualifiedName",
                                  qualifier: {
                                      node: "SimpleName",
                                      identifier: "org"
                                  },
                                  name: {
                                      node: "SimpleName",
                                      identifier: "eclipse"
                                  }
                              },
                              name: {
                                  node: "SimpleName",
                                  identifier: "jdt"
                              }
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "internal"
                          }
                      },
                      name: {
                          node: "SimpleName",
                          identifier: "corext"
                      }
                  },
                  name: {
                      node: "SimpleName",
                      identifier: "dom"
                  }
              }
          },
          imports: [
              {
                  node: "ImportDeclaration",
                  static: false,
                  name: {
                      node: "QualifiedName",
                      qualifier: {
                          node: "QualifiedName",
                          qualifier: {
                              node: "SimpleName",
                              identifier: "java"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "util"
                          }
                      },
                      name: {
                          node: "SimpleName",
                          identifier: "Iterator"
                      }
                  },
                  onDemand: false
              },
              {
                  node: "ImportDeclaration",
                  static: false,
                  name: {
                      node: "QualifiedName",
                      qualifier: {
                          node: "QualifiedName",
                          qualifier: {
                              node: "SimpleName",
                              identifier: "java"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "util"
                          }
                      },
                      name: {
                          node: "SimpleName",
                          identifier: "List"
                      }
                  },
                  onDemand: false
              },
              {
                  node: "ImportDeclaration",
                  static: false,
                  name: {
                      node: "QualifiedName",
                      qualifier: {
                          node: "QualifiedName",
                          qualifier: {
                              node: "QualifiedName",
                              qualifier: {
                                  node: "QualifiedName",
                                  qualifier: {
                                      node: "SimpleName",
                                      identifier: "org"
                                  },
                                  name: {
                                      node: "SimpleName",
                                      identifier: "eclipse"
                                  }
                              },
                              name: {
                                  node: "SimpleName",
                                  identifier: "core"
                              }
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "runtime"
                          }
                      },
                      name: {
                          node: "SimpleName",
                          identifier: "Assert"
                      }
                  },
                  onDemand: false
              },
              {
                  node: "ImportDeclaration",
                  static: false,
                  name: {
                      node: "QualifiedName",
                      qualifier: {
                          node: "QualifiedName",
                          qualifier: {
                              node: "QualifiedName",
                              qualifier: {
                                  node: "QualifiedName",
                                  qualifier: {
                                      node: "SimpleName",
                                      identifier: "org"
                                  },
                                  name: {
                                      node: "SimpleName",
                                      identifier: "eclipse"
                                  }
                              },
                              name: {
                                  node: "SimpleName",
                                  identifier: "jdt"
                              }
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "core"
                          }
                      },
                      name: {
                          node: "SimpleName",
                          identifier: "dom"
                      }
                  },
                  onDemand: true
              },
              {
                  node: "ImportDeclaration",
                  static: false,
                  name: {
                      node: "QualifiedName",
                      qualifier: {
                          node: "QualifiedName",
                          qualifier: {
                              node: "QualifiedName",
                              qualifier: {
                                  node: "QualifiedName",
                                  qualifier: {
                                      node: "QualifiedName",
                                      qualifier: {
                                          node: "QualifiedName",
                                          qualifier: {
                                              node: "SimpleName",
                                              identifier: "org"
                                          },
                                          name: {
                                              node: "SimpleName",
                                              identifier: "eclipse"
                                          }
                                      },
                                      name: {
                                          node: "SimpleName",
                                          identifier: "jdt"
                                      }
                                  },
                                  name: {
                                      node: "SimpleName",
                                      identifier: "internal"
                                  }
                              },
                              name: {
                                  node: "SimpleName",
                                  identifier: "ui"
                              }
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "javaeditor"
                          }
                      },
                      name: {
                          node: "SimpleName",
                          identifier: "ASTProvider"
                      }
                  },
                  onDemand: false
              }
          ],
          types: [
              {
                  node: "TypeDeclaration",
                  modifiers: [
                      {
                          node: "Modifier",
                          keyword: "public"
                      }
                  ],
                  interface: false,
                  name: {
                      node: "SimpleName",
                      identifier: "ASTFlattener"
                  },
                  typeParameters: [],
                  superclassType: {
                      node: "SimpleType",
                      name: {
                          node: "SimpleName",
                          identifier: "GenericVisitor"
                      }
                  },
                  superInterfaceTypes: [],
                  bodyDeclarations: [
                      {
                          node: "FieldDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Deprecated"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "private"
                              },
                              {
                                  node: "Modifier",
                                  keyword: "static"
                              },
                              {
                                  node: "Modifier",
                                  keyword: "final"
                              }
                          ],
                          type: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "int"
                          },
                          fragments: [
                              {
                                  node: "VariableDeclarationFragment",
                                  name: {
                                      node: "SimpleName",
                                      identifier: "JLS3"
                                  },
                                  extraDimensions: 0,
                                  initializer: {
                                      node: "QualifiedName",
                                      qualifier: {
                                          node: "SimpleName",
                                          identifier: "AST"
                                      },
                                      name: {
                                          node: "SimpleName",
                                          identifier: "JLS3"
                                      }
                                  }
                              }
                          ]
                      },
                      {
                          node: "FieldDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Deprecated"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "private"
                              },
                              {
                                  node: "Modifier",
                                  keyword: "static"
                              },
                              {
                                  node: "Modifier",
                                  keyword: "final"
                              }
                          ],
                          type: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "int"
                          },
                          fragments: [
                              {
                                  node: "VariableDeclarationFragment",
                                  name: {
                                      node: "SimpleName",
                                      identifier: "JLS4"
                                  },
                                  extraDimensions: 0,
                                  initializer: {
                                      node: "QualifiedName",
                                      qualifier: {
                                          node: "SimpleName",
                                          identifier: "AST"
                                      },
                                      name: {
                                          node: "SimpleName",
                                          identifier: "JLS4"
                                      }
                                  }
                              }
                          ]
                      },
                      {
                          node: "FieldDeclaration",
                          modifiers: [
                              {
                                  node: "Modifier",
                                  keyword: "protected"
                              }
                          ],
                          type: {
                              node: "SimpleType",
                              name: {
                                  node: "SimpleName",
                                  identifier: "StringBuffer"
                              }
                          },
                          fragments: [
                              {
                                  node: "VariableDeclarationFragment",
                                  name: {
                                      node: "SimpleName",
                                      identifier: "fBuffer"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ]
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: true,
                          typeParameters: [],
                          returnType2: null,
                          name: {
                              node: "SimpleName",
                              identifier: "ASTFlattener"
                          },
                          parameters: [],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "Assignment",
                                          leftHandSide: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          operator: "=",
                                          rightHandSide: {
                                              node: "ClassInstanceCreation",
                                              expression: null,
                                              typeArguments: [],
                                              type: {
                                                  node: "SimpleType",
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "StringBuffer"
                                                  }
                                              },
                                              arguments: [],
                                              anonymousClassDeclaration: null
                                          }
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "SimpleType",
                              name: {
                                  node: "SimpleName",
                                  identifier: "String"
                              }
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "getResult"
                          },
                          parameters: [],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "toString"
                                          },
                                          arguments: []
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "void"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "reset"
                          },
                          parameters: [],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "setLength"
                                          },
                                          arguments: [
                                              {
                                                  node: "NumberLiteral",
                                                  token: "0"
                                              }
                                          ]
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              },
                              {
                                  node: "Modifier",
                                  keyword: "static"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "SimpleType",
                              name: {
                                  node: "SimpleName",
                                  identifier: "String"
                              }
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "asString"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "ASTNode"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "Assert"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "isTrue"
                                          },
                                          arguments: [
                                              {
                                                  node: "InfixExpression",
                                                  leftOperand: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getAST"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "apiLevel"
                                                      },
                                                      arguments: []
                                                  },
                                                  operator: "==",
                                                  rightOperand: {
                                                      node: "QualifiedName",
                                                      qualifier: {
                                                          node: "SimpleName",
                                                          identifier: "ASTProvider"
                                                      },
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "SHARED_AST_LEVEL"
                                                      }
                                                  },
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "VariableDeclarationStatement",
                                      modifiers: [],
                                      type: {
                                          node: "SimpleType",
                                          name: {
                                              node: "SimpleName",
                                              identifier: "ASTFlattener"
                                          }
                                      },
                                      fragments: [
                                          {
                                              node: "VariableDeclarationFragment",
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "flattener"
                                              },
                                              extraDimensions: 0,
                                              initializer: {
                                                  node: "ClassInstanceCreation",
                                                  expression: null,
                                                  typeArguments: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "ASTFlattener"
                                                      }
                                                  },
                                                  arguments: [],
                                                  anonymousClassDeclaration: null
                                              }
                                          }
                                      ]
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "node"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "SimpleName",
                                                  identifier: "flattener"
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "flattener"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "getResult"
                                          },
                                          arguments: []
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "protected"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visitNode"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "ASTNode"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "Assert"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "isTrue"
                                          },
                                          arguments: [
                                              {
                                                  node: "BooleanLiteral",
                                                  booleanValue: false
                                              },
                                              {
                                                  node: "InfixExpression",
                                                  leftOperand: {
                                                      node: "StringLiteral",
                                                      escapedValue: "\"No implementation to flatten node: \""
                                                  },
                                                  operator: "+",
                                                  rightOperand: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "node"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "toString"
                                                      },
                                                      arguments: []
                                                  },
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "Modifier",
                                  keyword: "private"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "void"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "printModifiers"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "ParameterizedType",
                                      type: {
                                          node: "SimpleType",
                                          name: {
                                              node: "SimpleName",
                                              identifier: "List"
                                          }
                                      },
                                      typeArguments: [
                                          {
                                              node: "SimpleType",
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "IExtendedModifier"
                                              }
                                          }
                                      ]
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "ext"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "IExtendedModifier"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "ext"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "ASTNode"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "p"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "CastExpression",
                                                              type: {
                                                                  node: "SimpleType",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "ASTNode"
                                                                  }
                                                              },
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "SimpleName",
                                                                      identifier: "it"
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "next"
                                                                  },
                                                                  arguments: []
                                                              }
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "p"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\" \""
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "Modifier",
                                  keyword: "private"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "void"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "printReferenceTypeArguments"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "ParameterizedType",
                                      type: {
                                          node: "SimpleType",
                                          name: {
                                              node: "SimpleName",
                                              identifier: "List"
                                          }
                                      },
                                      typeArguments: [
                                          {
                                              node: "SimpleType",
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "Type"
                                              }
                                          }
                                      ]
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "typeArguments"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"::\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "PrefixExpression",
                                          operator: "!",
                                          operand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "typeArguments"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "isEmpty"
                                              },
                                              arguments: []
                                          }
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "CharacterLiteral",
                                                              escapedValue: "'<'"
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ForStatement",
                                                  initializers: [
                                                      {
                                                          node: "VariableDeclarationExpression",
                                                          modifiers: [],
                                                          type: {
                                                              node: "ParameterizedType",
                                                              type: {
                                                                  node: "SimpleType",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "Iterator"
                                                                  }
                                                              },
                                                              typeArguments: [
                                                                  {
                                                                      node: "SimpleType",
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "Type"
                                                                      }
                                                                  }
                                                              ]
                                                          },
                                                          fragments: [
                                                              {
                                                                  node: "VariableDeclarationFragment",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "it"
                                                                  },
                                                                  extraDimensions: 0,
                                                                  initializer: {
                                                                      node: "MethodInvocation",
                                                                      expression: {
                                                                          node: "SimpleName",
                                                                          identifier: "typeArguments"
                                                                      },
                                                                      typeArguments: [],
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "iterator"
                                                                      },
                                                                      arguments: []
                                                                  }
                                                              }
                                                          ]
                                                      }
                                                  ],
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "hasNext"
                                                      },
                                                      arguments: []
                                                  },
                                                  updaters: [],
                                                  body: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "VariableDeclarationStatement",
                                                              modifiers: [],
                                                              type: {
                                                                  node: "SimpleType",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "Type"
                                                                  }
                                                              },
                                                              fragments: [
                                                                  {
                                                                      node: "VariableDeclarationFragment",
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "t"
                                                                      },
                                                                      extraDimensions: 0,
                                                                      initializer: {
                                                                          node: "MethodInvocation",
                                                                          expression: {
                                                                              node: "SimpleName",
                                                                              identifier: "it"
                                                                          },
                                                                          typeArguments: [],
                                                                          name: {
                                                                              node: "SimpleName",
                                                                              identifier: "next"
                                                                          },
                                                                          arguments: []
                                                                      }
                                                                  }
                                                              ]
                                                          },
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "SimpleName",
                                                                      identifier: "t"
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "accept"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "IfStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "SimpleName",
                                                                      identifier: "it"
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "hasNext"
                                                                  },
                                                                  arguments: []
                                                              },
                                                              thenStatement: {
                                                                  node: "Block",
                                                                  statements: [
                                                                      {
                                                                          node: "ExpressionStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "FieldAccess",
                                                                                  expression: {
                                                                                      node: "ThisExpression",
                                                                                      qualifier: null
                                                                                  },
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "fBuffer"
                                                                                  }
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "append"
                                                                              },
                                                                              arguments: [
                                                                                  {
                                                                                      node: "CharacterLiteral",
                                                                                      escapedValue: "','"
                                                                                  }
                                                                              ]
                                                                          }
                                                                      }
                                                                  ]
                                                              },
                                                              elseStatement: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "CharacterLiteral",
                                                              escapedValue: "'>'"
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "void"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "printTypeAnnotations"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "AnnotatableType"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getAST"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "apiLevel"
                                              },
                                              arguments: []
                                          },
                                          operator: ">=",
                                          rightOperand: {
                                              node: "QualifiedName",
                                              qualifier: {
                                                  node: "SimpleName",
                                                  identifier: "AST"
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "JLS8"
                                              }
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: null,
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "printAnnotationsList"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "annotations"
                                                              },
                                                              arguments: []
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "void"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "printAnnotationsList"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "ParameterizedType",
                                      type: {
                                          node: "SimpleType",
                                          name: {
                                              node: "SimpleName",
                                              identifier: "List"
                                          }
                                      },
                                      typeArguments: [
                                          {
                                              node: "WildcardType",
                                              bound: {
                                                  node: "SimpleType",
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "Annotation"
                                                  }
                                              },
                                              upperBound: true
                                          }
                                      ]
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "annotations"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "WildcardType",
                                                          bound: {
                                                              node: "SimpleType",
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "Annotation"
                                                              }
                                                          },
                                                          upperBound: true
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "annotations"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Annotation"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "annotation"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "annotation"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "CharacterLiteral",
                                                              escapedValue: "' '"
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Deprecated"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "private"
                              },
                              {
                                  node: "Modifier",
                                  keyword: "static"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "SimpleType",
                              name: {
                                  node: "SimpleName",
                                  identifier: "Type"
                              }
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "getComponentType"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "ArrayType"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "node"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "getComponentType"
                                          },
                                          arguments: []
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Deprecated"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "private"
                              },
                              {
                                  node: "Modifier",
                                  keyword: "static"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "ParameterizedType",
                              type: {
                                  node: "SimpleType",
                                  name: {
                                      node: "SimpleName",
                                      identifier: "List"
                                  }
                              },
                              typeArguments: [
                                  {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "Name"
                                      }
                                  }
                              ]
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "getThrownExceptions"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "MethodDeclaration"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "node"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "thrownExceptions"
                                          },
                                          arguments: []
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "AnnotationTypeDeclaration"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getJavadoc"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getJavadoc"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: null,
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "printModifiers"
                                          },
                                          arguments: [
                                              {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "modifiers"
                                                  },
                                                  arguments: []
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"@interface \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getName"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\" {\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "BodyDeclaration"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "bodyDeclarations"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "BodyDeclaration"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "d"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "d"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"}\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "AnnotationTypeMemberDeclaration"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getJavadoc"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getJavadoc"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: null,
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "printModifiers"
                                          },
                                          arguments: [
                                              {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "modifiers"
                                                  },
                                                  arguments: []
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getType"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\" \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getName"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"()\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getDefault"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\" default \""
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getDefault"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\";\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "AnonymousClassDeclaration"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"{\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "VariableDeclarationStatement",
                                      modifiers: [],
                                      type: {
                                          node: "ParameterizedType",
                                          type: {
                                              node: "SimpleType",
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "List"
                                              }
                                          },
                                          typeArguments: [
                                              {
                                                  node: "SimpleType",
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "BodyDeclaration"
                                                  }
                                              }
                                          ]
                                      },
                                      fragments: [
                                          {
                                              node: "VariableDeclarationFragment",
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "bodyDeclarations"
                                              },
                                              extraDimensions: 0,
                                              initializer: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "bodyDeclarations"
                                                  },
                                                  arguments: []
                                              }
                                          }
                                      ]
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "BodyDeclaration"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "bodyDeclarations"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "BodyDeclaration"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "b"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "b"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"}\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "ArrayAccess"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getArray"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"[\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getIndex"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"]\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "ArrayCreation"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"new \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "VariableDeclarationStatement",
                                      modifiers: [],
                                      type: {
                                          node: "SimpleType",
                                          name: {
                                              node: "SimpleName",
                                              identifier: "ArrayType"
                                          }
                                      },
                                      fragments: [
                                          {
                                              node: "VariableDeclarationFragment",
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "at"
                                              },
                                              extraDimensions: 0,
                                              initializer: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getType"
                                                  },
                                                  arguments: []
                                              }
                                          }
                                      ]
                                  },
                                  {
                                      node: "VariableDeclarationStatement",
                                      modifiers: [],
                                      type: {
                                          node: "PrimitiveType",
                                          primitiveTypeCode: "int"
                                      },
                                      fragments: [
                                          {
                                              node: "VariableDeclarationFragment",
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "dims"
                                              },
                                              extraDimensions: 0,
                                              initializer: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "at"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getDimensions"
                                                  },
                                                  arguments: []
                                              }
                                          }
                                      ]
                                  },
                                  {
                                      node: "VariableDeclarationStatement",
                                      modifiers: [],
                                      type: {
                                          node: "SimpleType",
                                          name: {
                                              node: "SimpleName",
                                              identifier: "Type"
                                          }
                                      },
                                      fragments: [
                                          {
                                              node: "VariableDeclarationFragment",
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "elementType"
                                              },
                                              extraDimensions: 0,
                                              initializer: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "at"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getElementType"
                                                  },
                                                  arguments: []
                                              }
                                          }
                                      ]
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "elementType"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "Expression"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "dimensions"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\"[\""
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Expression"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "e"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "e"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\"]\""
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "PostfixExpression",
                                                      operand: {
                                                          node: "SimpleName",
                                                          identifier: "dims"
                                                      },
                                                      operator: "--"
                                                  }
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "PrimitiveType",
                                                  primitiveTypeCode: "int"
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "i"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "NumberLiteral",
                                                          token: "0"
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "SimpleName",
                                              identifier: "i"
                                          },
                                          operator: "<",
                                          rightOperand: {
                                              node: "SimpleName",
                                              identifier: "dims"
                                          },
                                      },
                                      updaters: [
                                          {
                                              node: "PostfixExpression",
                                              operand: {
                                                  node: "SimpleName",
                                                  identifier: "i"
                                              },
                                              operator: "++"
                                          }
                                      ],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\"[]\""
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getInitializer"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getInitializer"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "ArrayInitializer"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"{\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "Expression"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "expressions"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Expression"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "e"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "e"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "hasNext"
                                                      },
                                                      arguments: []
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\",\""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"}\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "ArrayType"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getAST"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "apiLevel"
                                              },
                                              arguments: []
                                          },
                                          operator: "<",
                                          rightOperand: {
                                              node: "QualifiedName",
                                              qualifier: {
                                                  node: "SimpleName",
                                                  identifier: "AST"
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "JLS8"
                                              }
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: null,
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getComponentType"
                                                          },
                                                          arguments: [
                                                              {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              }
                                                          ]
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\"[]\""
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getElementType"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "ParameterizedType",
                                                      type: {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "List"
                                                          }
                                                      },
                                                      typeArguments: [
                                                          {
                                                              node: "SimpleType",
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "Dimension"
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "dimensions"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "dimensions"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ForStatement",
                                                  initializers: [
                                                      {
                                                          node: "VariableDeclarationExpression",
                                                          modifiers: [],
                                                          type: {
                                                              node: "PrimitiveType",
                                                              primitiveTypeCode: "int"
                                                          },
                                                          fragments: [
                                                              {
                                                                  node: "VariableDeclarationFragment",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "i"
                                                                  },
                                                                  extraDimensions: 0,
                                                                  initializer: {
                                                                      node: "NumberLiteral",
                                                                      token: "0"
                                                                  }
                                                              }
                                                          ]
                                                      }
                                                  ],
                                                  expression: {
                                                      node: "InfixExpression",
                                                      leftOperand: {
                                                          node: "SimpleName",
                                                          identifier: "i"
                                                      },
                                                      operator: "<",
                                                      rightOperand: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "dimensions"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "size"
                                                          },
                                                          arguments: []
                                                      },
                                                  },
                                                  updaters: [
                                                      {
                                                          node: "PostfixExpression",
                                                          operand: {
                                                              node: "SimpleName",
                                                              identifier: "i"
                                                          },
                                                          operator: "++"
                                                      }
                                                  ],
                                                  body: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "VariableDeclarationStatement",
                                                              modifiers: [],
                                                              type: {
                                                                  node: "SimpleType",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "Dimension"
                                                                  }
                                                              },
                                                              fragments: [
                                                                  {
                                                                      node: "VariableDeclarationFragment",
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "dimension"
                                                                      },
                                                                      extraDimensions: 0,
                                                                      initializer: {
                                                                          node: "MethodInvocation",
                                                                          expression: {
                                                                              node: "SimpleName",
                                                                              identifier: "dimensions"
                                                                          },
                                                                          typeArguments: [],
                                                                          name: {
                                                                              node: "SimpleName",
                                                                              identifier: "get"
                                                                          },
                                                                          arguments: [
                                                                              {
                                                                                  node: "SimpleName",
                                                                                  identifier: "i"
                                                                              }
                                                                          ]
                                                                      }
                                                                  }
                                                              ]
                                                          },
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "SimpleName",
                                                                      identifier: "dimension"
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "accept"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "AssertStatement"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"assert \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getExpression"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getMessage"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\" : \""
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getMessage"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\";\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "Assignment"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getLeftHandSide"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "node"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "getOperator"
                                                      },
                                                      arguments: []
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "toString"
                                                  },
                                                  arguments: []
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getRightHandSide"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "Block"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"{\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "Statement"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "statements"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Statement"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "s"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "s"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"}\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "BlockComment"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"\/* *\/\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "BooleanLiteral"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "booleanValue"
                                              },
                                              arguments: []
                                          },
                                          operator: "==",
                                          rightOperand: {
                                              node: "BooleanLiteral",
                                              booleanValue: true
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\"true\""
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\"false\""
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "BreakStatement"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"break\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getLabel"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\" \""
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getLabel"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\";\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "CastExpression"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"(\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getType"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\")\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getExpression"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "CatchClause"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"catch (\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getException"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\") \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getBody"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "CharacterLiteral"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getEscapedValue"
                                                  },
                                                  arguments: []
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "ClassInstanceCreation"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getExpression"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getExpression"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\".\""
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"new \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getAST"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "apiLevel"
                                              },
                                              arguments: []
                                          },
                                          operator: ">=",
                                          rightOperand: {
                                              node: "SimpleName",
                                              identifier: "JLS3"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "PrefixExpression",
                                                      operator: "!",
                                                      operand: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "typeArguments"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "isEmpty"
                                                          },
                                                          arguments: []
                                                      }
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\"<\""
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "ForStatement",
                                                              initializers: [
                                                                  {
                                                                      node: "VariableDeclarationExpression",
                                                                      modifiers: [],
                                                                      type: {
                                                                          node: "ParameterizedType",
                                                                          type: {
                                                                              node: "SimpleType",
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "Iterator"
                                                                              }
                                                                          },
                                                                          typeArguments: [
                                                                              {
                                                                                  node: "SimpleType",
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "Type"
                                                                                  }
                                                                              }
                                                                          ]
                                                                      },
                                                                      fragments: [
                                                                          {
                                                                              node: "VariableDeclarationFragment",
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "it"
                                                                              },
                                                                              extraDimensions: 0,
                                                                              initializer: {
                                                                                  node: "MethodInvocation",
                                                                                  expression: {
                                                                                      node: "MethodInvocation",
                                                                                      expression: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "node"
                                                                                      },
                                                                                      typeArguments: [],
                                                                                      name: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "typeArguments"
                                                                                      },
                                                                                      arguments: []
                                                                                  },
                                                                                  typeArguments: [],
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "iterator"
                                                                                  },
                                                                                  arguments: []
                                                                              }
                                                                          }
                                                                      ]
                                                                  }
                                                              ],
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "SimpleName",
                                                                      identifier: "it"
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "hasNext"
                                                                  },
                                                                  arguments: []
                                                              },
                                                              updaters: [],
                                                              body: {
                                                                  node: "Block",
                                                                  statements: [
                                                                      {
                                                                          node: "VariableDeclarationStatement",
                                                                          modifiers: [],
                                                                          type: {
                                                                              node: "SimpleType",
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "Type"
                                                                              }
                                                                          },
                                                                          fragments: [
                                                                              {
                                                                                  node: "VariableDeclarationFragment",
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "t"
                                                                                  },
                                                                                  extraDimensions: 0,
                                                                                  initializer: {
                                                                                      node: "MethodInvocation",
                                                                                      expression: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "it"
                                                                                      },
                                                                                      typeArguments: [],
                                                                                      name: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "next"
                                                                                      },
                                                                                      arguments: []
                                                                                  }
                                                                              }
                                                                          ]
                                                                      },
                                                                      {
                                                                          node: "ExpressionStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "t"
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "accept"
                                                                              },
                                                                              arguments: [
                                                                                  {
                                                                                      node: "ThisExpression",
                                                                                      qualifier: null
                                                                                  }
                                                                              ]
                                                                          }
                                                                      },
                                                                      {
                                                                          node: "IfStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "it"
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "hasNext"
                                                                              },
                                                                              arguments: []
                                                                          },
                                                                          thenStatement: {
                                                                              node: "Block",
                                                                              statements: [
                                                                                  {
                                                                                      node: "ExpressionStatement",
                                                                                      expression: {
                                                                                          node: "MethodInvocation",
                                                                                          expression: {
                                                                                              node: "FieldAccess",
                                                                                              expression: {
                                                                                                  node: "ThisExpression",
                                                                                                  qualifier: null
                                                                                              },
                                                                                              name: {
                                                                                                  node: "SimpleName",
                                                                                                  identifier: "fBuffer"
                                                                                              }
                                                                                          },
                                                                                          typeArguments: [],
                                                                                          name: {
                                                                                              node: "SimpleName",
                                                                                              identifier: "append"
                                                                                          },
                                                                                          arguments: [
                                                                                              {
                                                                                                  node: "StringLiteral",
                                                                                                  escapedValue: "\",\""
                                                                                              }
                                                                                          ]
                                                                                      }
                                                                                  }
                                                                              ]
                                                                          },
                                                                          elseStatement: null
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\">\""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getType"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"(\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "Expression"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "arguments"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Expression"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "e"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "e"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "hasNext"
                                                      },
                                                      arguments: []
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\",\""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\")\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getAnonymousClassDeclaration"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getAnonymousClassDeclaration"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "CompilationUnit"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getPackage"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getPackage"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "ImportDeclaration"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "imports"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "ImportDeclaration"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "d"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "d"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "AbstractTypeDeclaration"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "types"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "AbstractTypeDeclaration"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "d"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "d"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "ConditionalExpression"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getExpression"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"?\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getThenExpression"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\":\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getElseExpression"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "ConstructorInvocation"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getAST"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "apiLevel"
                                              },
                                              arguments: []
                                          },
                                          operator: ">=",
                                          rightOperand: {
                                              node: "SimpleName",
                                              identifier: "JLS3"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "PrefixExpression",
                                                      operator: "!",
                                                      operand: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "typeArguments"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "isEmpty"
                                                          },
                                                          arguments: []
                                                      }
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\"<\""
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "ForStatement",
                                                              initializers: [
                                                                  {
                                                                      node: "VariableDeclarationExpression",
                                                                      modifiers: [],
                                                                      type: {
                                                                          node: "ParameterizedType",
                                                                          type: {
                                                                              node: "SimpleType",
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "Iterator"
                                                                              }
                                                                          },
                                                                          typeArguments: [
                                                                              {
                                                                                  node: "SimpleType",
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "Type"
                                                                                  }
                                                                              }
                                                                          ]
                                                                      },
                                                                      fragments: [
                                                                          {
                                                                              node: "VariableDeclarationFragment",
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "it"
                                                                              },
                                                                              extraDimensions: 0,
                                                                              initializer: {
                                                                                  node: "MethodInvocation",
                                                                                  expression: {
                                                                                      node: "MethodInvocation",
                                                                                      expression: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "node"
                                                                                      },
                                                                                      typeArguments: [],
                                                                                      name: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "typeArguments"
                                                                                      },
                                                                                      arguments: []
                                                                                  },
                                                                                  typeArguments: [],
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "iterator"
                                                                                  },
                                                                                  arguments: []
                                                                              }
                                                                          }
                                                                      ]
                                                                  }
                                                              ],
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "SimpleName",
                                                                      identifier: "it"
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "hasNext"
                                                                  },
                                                                  arguments: []
                                                              },
                                                              updaters: [],
                                                              body: {
                                                                  node: "Block",
                                                                  statements: [
                                                                      {
                                                                          node: "VariableDeclarationStatement",
                                                                          modifiers: [],
                                                                          type: {
                                                                              node: "SimpleType",
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "Type"
                                                                              }
                                                                          },
                                                                          fragments: [
                                                                              {
                                                                                  node: "VariableDeclarationFragment",
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "t"
                                                                                  },
                                                                                  extraDimensions: 0,
                                                                                  initializer: {
                                                                                      node: "MethodInvocation",
                                                                                      expression: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "it"
                                                                                      },
                                                                                      typeArguments: [],
                                                                                      name: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "next"
                                                                                      },
                                                                                      arguments: []
                                                                                  }
                                                                              }
                                                                          ]
                                                                      },
                                                                      {
                                                                          node: "ExpressionStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "t"
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "accept"
                                                                              },
                                                                              arguments: [
                                                                                  {
                                                                                      node: "ThisExpression",
                                                                                      qualifier: null
                                                                                  }
                                                                              ]
                                                                          }
                                                                      },
                                                                      {
                                                                          node: "IfStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "it"
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "hasNext"
                                                                              },
                                                                              arguments: []
                                                                          },
                                                                          thenStatement: {
                                                                              node: "Block",
                                                                              statements: [
                                                                                  {
                                                                                      node: "ExpressionStatement",
                                                                                      expression: {
                                                                                          node: "MethodInvocation",
                                                                                          expression: {
                                                                                              node: "FieldAccess",
                                                                                              expression: {
                                                                                                  node: "ThisExpression",
                                                                                                  qualifier: null
                                                                                              },
                                                                                              name: {
                                                                                                  node: "SimpleName",
                                                                                                  identifier: "fBuffer"
                                                                                              }
                                                                                          },
                                                                                          typeArguments: [],
                                                                                          name: {
                                                                                              node: "SimpleName",
                                                                                              identifier: "append"
                                                                                          },
                                                                                          arguments: [
                                                                                              {
                                                                                                  node: "StringLiteral",
                                                                                                  escapedValue: "\",\""
                                                                                              }
                                                                                          ]
                                                                                      }
                                                                                  }
                                                                              ]
                                                                          },
                                                                          elseStatement: null
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\">\""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"this(\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "Expression"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "arguments"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Expression"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "e"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "e"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "hasNext"
                                                      },
                                                      arguments: []
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\",\""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\");\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "ContinueStatement"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"continue\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getLabel"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\" \""
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getLabel"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\";\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "CreationReference"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getType"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: null,
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "printReferenceTypeArguments"
                                          },
                                          arguments: [
                                              {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "typeArguments"
                                                  },
                                                  arguments: []
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"new\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "Dimension"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\" \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: null,
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "printAnnotationsList"
                                          },
                                          arguments: [
                                              {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "annotations"
                                                  },
                                                  arguments: []
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"[]\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "DoStatement"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"do \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getBody"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\" while (\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getExpression"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\");\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "EmptyStatement"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\";\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "EnhancedForStatement"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"for (\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getParameter"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\" : \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getExpression"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\") \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getBody"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "EnumConstantDeclaration"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getJavadoc"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getJavadoc"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: null,
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "printModifiers"
                                          },
                                          arguments: [
                                              {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "modifiers"
                                                  },
                                                  arguments: []
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getName"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "PrefixExpression",
                                          operator: "!",
                                          operand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "arguments"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "isEmpty"
                                              },
                                              arguments: []
                                          }
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\"(\""
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ForStatement",
                                                  initializers: [
                                                      {
                                                          node: "VariableDeclarationExpression",
                                                          modifiers: [],
                                                          type: {
                                                              node: "ParameterizedType",
                                                              type: {
                                                                  node: "SimpleType",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "Iterator"
                                                                  }
                                                              },
                                                              typeArguments: [
                                                                  {
                                                                      node: "SimpleType",
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "Expression"
                                                                      }
                                                                  }
                                                              ]
                                                          },
                                                          fragments: [
                                                              {
                                                                  node: "VariableDeclarationFragment",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "it"
                                                                  },
                                                                  extraDimensions: 0,
                                                                  initializer: {
                                                                      node: "MethodInvocation",
                                                                      expression: {
                                                                          node: "MethodInvocation",
                                                                          expression: {
                                                                              node: "SimpleName",
                                                                              identifier: "node"
                                                                          },
                                                                          typeArguments: [],
                                                                          name: {
                                                                              node: "SimpleName",
                                                                              identifier: "arguments"
                                                                          },
                                                                          arguments: []
                                                                      },
                                                                      typeArguments: [],
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "iterator"
                                                                      },
                                                                      arguments: []
                                                                  }
                                                              }
                                                          ]
                                                      }
                                                  ],
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "hasNext"
                                                      },
                                                      arguments: []
                                                  },
                                                  updaters: [],
                                                  body: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "VariableDeclarationStatement",
                                                              modifiers: [],
                                                              type: {
                                                                  node: "SimpleType",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "Expression"
                                                                  }
                                                              },
                                                              fragments: [
                                                                  {
                                                                      node: "VariableDeclarationFragment",
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "e"
                                                                      },
                                                                      extraDimensions: 0,
                                                                      initializer: {
                                                                          node: "MethodInvocation",
                                                                          expression: {
                                                                              node: "SimpleName",
                                                                              identifier: "it"
                                                                          },
                                                                          typeArguments: [],
                                                                          name: {
                                                                              node: "SimpleName",
                                                                              identifier: "next"
                                                                          },
                                                                          arguments: []
                                                                      }
                                                                  }
                                                              ]
                                                          },
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "SimpleName",
                                                                      identifier: "e"
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "accept"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "IfStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "SimpleName",
                                                                      identifier: "it"
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "hasNext"
                                                                  },
                                                                  arguments: []
                                                              },
                                                              thenStatement: {
                                                                  node: "Block",
                                                                  statements: [
                                                                      {
                                                                          node: "ExpressionStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "FieldAccess",
                                                                                  expression: {
                                                                                      node: "ThisExpression",
                                                                                      qualifier: null
                                                                                  },
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "fBuffer"
                                                                                  }
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "append"
                                                                              },
                                                                              arguments: [
                                                                                  {
                                                                                      node: "StringLiteral",
                                                                                      escapedValue: "\",\""
                                                                                  }
                                                                              ]
                                                                          }
                                                                      }
                                                                  ]
                                                              },
                                                              elseStatement: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\")\""
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getAnonymousClassDeclaration"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getAnonymousClassDeclaration"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "EnumDeclaration"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getJavadoc"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getJavadoc"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: null,
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "printModifiers"
                                          },
                                          arguments: [
                                              {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "modifiers"
                                                  },
                                                  arguments: []
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"enum \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getName"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\" \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "PrefixExpression",
                                          operator: "!",
                                          operand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "superInterfaceTypes"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "isEmpty"
                                              },
                                              arguments: []
                                          }
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\"implements \""
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ForStatement",
                                                  initializers: [
                                                      {
                                                          node: "VariableDeclarationExpression",
                                                          modifiers: [],
                                                          type: {
                                                              node: "ParameterizedType",
                                                              type: {
                                                                  node: "SimpleType",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "Iterator"
                                                                  }
                                                              },
                                                              typeArguments: [
                                                                  {
                                                                      node: "SimpleType",
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "Type"
                                                                      }
                                                                  }
                                                              ]
                                                          },
                                                          fragments: [
                                                              {
                                                                  node: "VariableDeclarationFragment",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "it"
                                                                  },
                                                                  extraDimensions: 0,
                                                                  initializer: {
                                                                      node: "MethodInvocation",
                                                                      expression: {
                                                                          node: "MethodInvocation",
                                                                          expression: {
                                                                              node: "SimpleName",
                                                                              identifier: "node"
                                                                          },
                                                                          typeArguments: [],
                                                                          name: {
                                                                              node: "SimpleName",
                                                                              identifier: "superInterfaceTypes"
                                                                          },
                                                                          arguments: []
                                                                      },
                                                                      typeArguments: [],
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "iterator"
                                                                      },
                                                                      arguments: []
                                                                  }
                                                              }
                                                          ]
                                                      }
                                                  ],
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "hasNext"
                                                      },
                                                      arguments: []
                                                  },
                                                  updaters: [],
                                                  body: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "VariableDeclarationStatement",
                                                              modifiers: [],
                                                              type: {
                                                                  node: "SimpleType",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "Type"
                                                                  }
                                                              },
                                                              fragments: [
                                                                  {
                                                                      node: "VariableDeclarationFragment",
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "t"
                                                                      },
                                                                      extraDimensions: 0,
                                                                      initializer: {
                                                                          node: "MethodInvocation",
                                                                          expression: {
                                                                              node: "SimpleName",
                                                                              identifier: "it"
                                                                          },
                                                                          typeArguments: [],
                                                                          name: {
                                                                              node: "SimpleName",
                                                                              identifier: "next"
                                                                          },
                                                                          arguments: []
                                                                      }
                                                                  }
                                                              ]
                                                          },
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "SimpleName",
                                                                      identifier: "t"
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "accept"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "IfStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "SimpleName",
                                                                      identifier: "it"
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "hasNext"
                                                                  },
                                                                  arguments: []
                                                              },
                                                              thenStatement: {
                                                                  node: "Block",
                                                                  statements: [
                                                                      {
                                                                          node: "ExpressionStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "FieldAccess",
                                                                                  expression: {
                                                                                      node: "ThisExpression",
                                                                                      qualifier: null
                                                                                  },
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "fBuffer"
                                                                                  }
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "append"
                                                                              },
                                                                              arguments: [
                                                                                  {
                                                                                      node: "StringLiteral",
                                                                                      escapedValue: "\", \""
                                                                                  }
                                                                              ]
                                                                          }
                                                                      }
                                                                  ]
                                                              },
                                                              elseStatement: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\" \""
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"{\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "EnumConstantDeclaration"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "enumConstants"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "EnumConstantDeclaration"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "d"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "d"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "hasNext"
                                                      },
                                                      arguments: []
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\", \""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "PrefixExpression",
                                          operator: "!",
                                          operand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "bodyDeclarations"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "isEmpty"
                                              },
                                              arguments: []
                                          }
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\"; \""
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ForStatement",
                                                  initializers: [
                                                      {
                                                          node: "VariableDeclarationExpression",
                                                          modifiers: [],
                                                          type: {
                                                              node: "ParameterizedType",
                                                              type: {
                                                                  node: "SimpleType",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "Iterator"
                                                                  }
                                                              },
                                                              typeArguments: [
                                                                  {
                                                                      node: "SimpleType",
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "BodyDeclaration"
                                                                      }
                                                                  }
                                                              ]
                                                          },
                                                          fragments: [
                                                              {
                                                                  node: "VariableDeclarationFragment",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "it"
                                                                  },
                                                                  extraDimensions: 0,
                                                                  initializer: {
                                                                      node: "MethodInvocation",
                                                                      expression: {
                                                                          node: "MethodInvocation",
                                                                          expression: {
                                                                              node: "SimpleName",
                                                                              identifier: "node"
                                                                          },
                                                                          typeArguments: [],
                                                                          name: {
                                                                              node: "SimpleName",
                                                                              identifier: "bodyDeclarations"
                                                                          },
                                                                          arguments: []
                                                                      },
                                                                      typeArguments: [],
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "iterator"
                                                                      },
                                                                      arguments: []
                                                                  }
                                                              }
                                                          ]
                                                      }
                                                  ],
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "hasNext"
                                                      },
                                                      arguments: []
                                                  },
                                                  updaters: [],
                                                  body: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "VariableDeclarationStatement",
                                                              modifiers: [],
                                                              type: {
                                                                  node: "SimpleType",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "BodyDeclaration"
                                                                  }
                                                              },
                                                              fragments: [
                                                                  {
                                                                      node: "VariableDeclarationFragment",
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "d"
                                                                      },
                                                                      extraDimensions: 0,
                                                                      initializer: {
                                                                          node: "MethodInvocation",
                                                                          expression: {
                                                                              node: "SimpleName",
                                                                              identifier: "it"
                                                                          },
                                                                          typeArguments: [],
                                                                          name: {
                                                                              node: "SimpleName",
                                                                              identifier: "next"
                                                                          },
                                                                          arguments: []
                                                                      }
                                                                  }
                                                              ]
                                                          },
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "SimpleName",
                                                                      identifier: "d"
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "accept"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"}\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "ExpressionMethodReference"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getExpression"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: null,
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "printReferenceTypeArguments"
                                          },
                                          arguments: [
                                              {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "typeArguments"
                                                  },
                                                  arguments: []
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getName"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "ExpressionStatement"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getExpression"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\";\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "FieldAccess"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getExpression"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\".\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getName"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "FieldDeclaration"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getJavadoc"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getJavadoc"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getAST"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "apiLevel"
                                              },
                                              arguments: []
                                          },
                                          operator: ">=",
                                          rightOperand: {
                                              node: "SimpleName",
                                              identifier: "JLS3"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: null,
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "printModifiers"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "modifiers"
                                                              },
                                                              arguments: []
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getType"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\" \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "VariableDeclarationFragment"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "fragments"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "VariableDeclarationFragment"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "f"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "f"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "hasNext"
                                                      },
                                                      arguments: []
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\", \""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\";\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "ForStatement"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"for (\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "Expression"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "initializers"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Expression"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "e"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "e"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"; \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getExpression"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getExpression"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"; \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "Expression"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "updaters"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Expression"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "e"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "e"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\") \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getBody"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "IfStatement"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"if (\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getExpression"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\") \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getThenStatement"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getElseStatement"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\" else \""
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getElseStatement"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "ImportDeclaration"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"import \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getAST"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "apiLevel"
                                              },
                                              arguments: []
                                          },
                                          operator: ">=",
                                          rightOperand: {
                                              node: "SimpleName",
                                              identifier: "JLS3"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "node"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "isStatic"
                                                      },
                                                      arguments: []
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\"static \""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getName"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "node"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "isOnDemand"
                                          },
                                          arguments: []
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\".*\""
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\";\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "InfixExpression"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getLeftOperand"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "CharacterLiteral",
                                                  escapedValue: "' '"
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "node"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "getOperator"
                                                      },
                                                      arguments: []
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "toString"
                                                  },
                                                  arguments: []
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "CharacterLiteral",
                                                  escapedValue: "' '"
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getRightOperand"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "VariableDeclarationStatement",
                                      modifiers: [
                                          {
                                              node: "Modifier",
                                              keyword: "final"
                                          }
                                      ],
                                      type: {
                                          node: "ParameterizedType",
                                          type: {
                                              node: "SimpleType",
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "List"
                                              }
                                          },
                                          typeArguments: [
                                              {
                                                  node: "SimpleType",
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "Expression"
                                                  }
                                              }
                                          ]
                                      },
                                      fragments: [
                                          {
                                              node: "VariableDeclarationFragment",
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "extendedOperands"
                                              },
                                              extraDimensions: 0,
                                              initializer: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "extendedOperands"
                                                  },
                                                  arguments: []
                                              }
                                          }
                                      ]
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "extendedOperands"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "size"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NumberLiteral",
                                              token: "0"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "CharacterLiteral",
                                                              escapedValue: "' '"
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ForStatement",
                                                  initializers: [
                                                      {
                                                          node: "VariableDeclarationExpression",
                                                          modifiers: [],
                                                          type: {
                                                              node: "ParameterizedType",
                                                              type: {
                                                                  node: "SimpleType",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "Iterator"
                                                                  }
                                                              },
                                                              typeArguments: [
                                                                  {
                                                                      node: "SimpleType",
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "Expression"
                                                                      }
                                                                  }
                                                              ]
                                                          },
                                                          fragments: [
                                                              {
                                                                  node: "VariableDeclarationFragment",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "it"
                                                                  },
                                                                  extraDimensions: 0,
                                                                  initializer: {
                                                                      node: "MethodInvocation",
                                                                      expression: {
                                                                          node: "SimpleName",
                                                                          identifier: "extendedOperands"
                                                                      },
                                                                      typeArguments: [],
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "iterator"
                                                                      },
                                                                      arguments: []
                                                                  }
                                                              }
                                                          ]
                                                      }
                                                  ],
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "hasNext"
                                                      },
                                                      arguments: []
                                                  },
                                                  updaters: [],
                                                  body: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "MethodInvocation",
                                                                      expression: {
                                                                          node: "FieldAccess",
                                                                          expression: {
                                                                              node: "ThisExpression",
                                                                              qualifier: null
                                                                          },
                                                                          name: {
                                                                              node: "SimpleName",
                                                                              identifier: "fBuffer"
                                                                          }
                                                                      },
                                                                      typeArguments: [],
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "append"
                                                                      },
                                                                      arguments: [
                                                                          {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "MethodInvocation",
                                                                                  expression: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "node"
                                                                                  },
                                                                                  typeArguments: [],
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "getOperator"
                                                                                  },
                                                                                  arguments: []
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "toString"
                                                                              },
                                                                              arguments: []
                                                                          }
                                                                      ]
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "CharacterLiteral",
                                                                          escapedValue: "' '"
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "VariableDeclarationStatement",
                                                              modifiers: [],
                                                              type: {
                                                                  node: "SimpleType",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "Expression"
                                                                  }
                                                              },
                                                              fragments: [
                                                                  {
                                                                      node: "VariableDeclarationFragment",
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "e"
                                                                      },
                                                                      extraDimensions: 0,
                                                                      initializer: {
                                                                          node: "MethodInvocation",
                                                                          expression: {
                                                                              node: "SimpleName",
                                                                              identifier: "it"
                                                                          },
                                                                          typeArguments: [],
                                                                          name: {
                                                                              node: "SimpleName",
                                                                              identifier: "next"
                                                                          },
                                                                          arguments: []
                                                                      }
                                                                  }
                                                              ]
                                                          },
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "SimpleName",
                                                                      identifier: "e"
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "accept"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "Initializer"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getJavadoc"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getJavadoc"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getAST"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "apiLevel"
                                              },
                                              arguments: []
                                          },
                                          operator: ">=",
                                          rightOperand: {
                                              node: "SimpleName",
                                              identifier: "JLS3"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: null,
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "printModifiers"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "modifiers"
                                                              },
                                                              arguments: []
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getBody"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "InstanceofExpression"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getLeftOperand"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\" instanceof \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getRightOperand"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "IntersectionType"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "Type"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "types"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Type"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "t"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "t"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "hasNext"
                                                      },
                                                      arguments: []
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\" & \""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "Javadoc"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"\/** \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "TagElement"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "tags"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "ASTNode"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "e"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "e"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"\\n *\/\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "LabeledStatement"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getLabel"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\": \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getBody"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "LambdaExpression"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "VariableDeclarationStatement",
                                      modifiers: [],
                                      type: {
                                          node: "PrimitiveType",
                                          primitiveTypeCode: "boolean"
                                      },
                                      fragments: [
                                          {
                                              node: "VariableDeclarationFragment",
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "hasParentheses"
                                              },
                                              extraDimensions: 0,
                                              initializer: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "hasParentheses"
                                                  },
                                                  arguments: []
                                              }
                                          }
                                      ]
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "SimpleName",
                                          identifier: "hasParentheses"
                                      },
                                      thenStatement: {
                                          node: "ExpressionStatement",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "FieldAccess",
                                                  expression: {
                                                      node: "ThisExpression",
                                                      qualifier: null
                                                  },
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "fBuffer"
                                                  }
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "append"
                                              },
                                              arguments: [
                                                  {
                                                      node: "CharacterLiteral",
                                                      escapedValue: "'('"
                                                  }
                                              ]
                                          }
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "WildcardType",
                                                          bound: {
                                                              node: "SimpleType",
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "VariableDeclaration"
                                                              }
                                                          },
                                                          upperBound: true
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "parameters"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "VariableDeclaration"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "v"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "v"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "hasNext"
                                                      },
                                                      arguments: []
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\",\""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "SimpleName",
                                          identifier: "hasParentheses"
                                      },
                                      thenStatement: {
                                          node: "ExpressionStatement",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "FieldAccess",
                                                  expression: {
                                                      node: "ThisExpression",
                                                      qualifier: null
                                                  },
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "fBuffer"
                                                  }
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "append"
                                              },
                                              arguments: [
                                                  {
                                                      node: "CharacterLiteral",
                                                      escapedValue: "')'"
                                                  }
                                              ]
                                          }
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\" -> \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getBody"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "LineComment"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"\/\/\\n\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "MarkerAnnotation"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"@\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getTypeName"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "MemberRef"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getQualifier"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getQualifier"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"#\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getName"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "MemberValuePair"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getName"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"=\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getValue"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "MethodRef"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getQualifier"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getQualifier"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"#\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getName"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"(\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "MethodRefParameter"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "parameters"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "MethodRefParameter"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "e"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "e"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "hasNext"
                                                      },
                                                      arguments: []
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\",\""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\")\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "MethodRefParameter"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getType"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getAST"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "apiLevel"
                                              },
                                              arguments: []
                                          },
                                          operator: ">=",
                                          rightOperand: {
                                              node: "SimpleName",
                                              identifier: "JLS3"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "node"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "isVarargs"
                                                      },
                                                      arguments: []
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\"...\""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getName"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\" \""
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getName"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "MethodDeclaration"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getJavadoc"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getJavadoc"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getAST"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "apiLevel"
                                              },
                                              arguments: []
                                          },
                                          operator: ">=",
                                          rightOperand: {
                                              node: "SimpleName",
                                              identifier: "JLS3"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: null,
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "printModifiers"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "modifiers"
                                                              },
                                                              arguments: []
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "PrefixExpression",
                                                      operator: "!",
                                                      operand: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "typeParameters"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "isEmpty"
                                                          },
                                                          arguments: []
                                                      }
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\"<\""
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "ForStatement",
                                                              initializers: [
                                                                  {
                                                                      node: "VariableDeclarationExpression",
                                                                      modifiers: [],
                                                                      type: {
                                                                          node: "ParameterizedType",
                                                                          type: {
                                                                              node: "SimpleType",
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "Iterator"
                                                                              }
                                                                          },
                                                                          typeArguments: [
                                                                              {
                                                                                  node: "SimpleType",
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "TypeParameter"
                                                                                  }
                                                                              }
                                                                          ]
                                                                      },
                                                                      fragments: [
                                                                          {
                                                                              node: "VariableDeclarationFragment",
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "it"
                                                                              },
                                                                              extraDimensions: 0,
                                                                              initializer: {
                                                                                  node: "MethodInvocation",
                                                                                  expression: {
                                                                                      node: "MethodInvocation",
                                                                                      expression: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "node"
                                                                                      },
                                                                                      typeArguments: [],
                                                                                      name: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "typeParameters"
                                                                                      },
                                                                                      arguments: []
                                                                                  },
                                                                                  typeArguments: [],
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "iterator"
                                                                                  },
                                                                                  arguments: []
                                                                              }
                                                                          }
                                                                      ]
                                                                  }
                                                              ],
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "SimpleName",
                                                                      identifier: "it"
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "hasNext"
                                                                  },
                                                                  arguments: []
                                                              },
                                                              updaters: [],
                                                              body: {
                                                                  node: "Block",
                                                                  statements: [
                                                                      {
                                                                          node: "VariableDeclarationStatement",
                                                                          modifiers: [],
                                                                          type: {
                                                                              node: "SimpleType",
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "TypeParameter"
                                                                              }
                                                                          },
                                                                          fragments: [
                                                                              {
                                                                                  node: "VariableDeclarationFragment",
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "t"
                                                                                  },
                                                                                  extraDimensions: 0,
                                                                                  initializer: {
                                                                                      node: "MethodInvocation",
                                                                                      expression: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "it"
                                                                                      },
                                                                                      typeArguments: [],
                                                                                      name: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "next"
                                                                                      },
                                                                                      arguments: []
                                                                                  }
                                                                              }
                                                                          ]
                                                                      },
                                                                      {
                                                                          node: "ExpressionStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "t"
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "accept"
                                                                              },
                                                                              arguments: [
                                                                                  {
                                                                                      node: "ThisExpression",
                                                                                      qualifier: null
                                                                                  }
                                                                              ]
                                                                          }
                                                                      },
                                                                      {
                                                                          node: "IfStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "it"
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "hasNext"
                                                                              },
                                                                              arguments: []
                                                                          },
                                                                          thenStatement: {
                                                                              node: "Block",
                                                                              statements: [
                                                                                  {
                                                                                      node: "ExpressionStatement",
                                                                                      expression: {
                                                                                          node: "MethodInvocation",
                                                                                          expression: {
                                                                                              node: "FieldAccess",
                                                                                              expression: {
                                                                                                  node: "ThisExpression",
                                                                                                  qualifier: null
                                                                                              },
                                                                                              name: {
                                                                                                  node: "SimpleName",
                                                                                                  identifier: "fBuffer"
                                                                                              }
                                                                                          },
                                                                                          typeArguments: [],
                                                                                          name: {
                                                                                              node: "SimpleName",
                                                                                              identifier: "append"
                                                                                          },
                                                                                          arguments: [
                                                                                              {
                                                                                                  node: "StringLiteral",
                                                                                                  escapedValue: "\", \""
                                                                                              }
                                                                                          ]
                                                                                      }
                                                                                  }
                                                                              ]
                                                                          },
                                                                          elseStatement: null
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\"> \""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "PrefixExpression",
                                          operator: "!",
                                          operand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "isConstructor"
                                              },
                                              arguments: []
                                          }
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "InfixExpression",
                                                      leftOperand: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getReturnType2"
                                                          },
                                                          arguments: []
                                                      },
                                                      operator: "!=",
                                                      rightOperand: {
                                                          node: "NullLiteral"
                                                      },
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "MethodInvocation",
                                                                      expression: {
                                                                          node: "SimpleName",
                                                                          identifier: "node"
                                                                      },
                                                                      typeArguments: [],
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "getReturnType2"
                                                                      },
                                                                      arguments: []
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "accept"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\"void\""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\" \""
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getName"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"(\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getAST"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "apiLevel"
                                              },
                                              arguments: []
                                          },
                                          operator: ">=",
                                          rightOperand: {
                                              node: "QualifiedName",
                                              qualifier: {
                                                  node: "SimpleName",
                                                  identifier: "AST"
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "JLS8"
                                              }
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Type"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "receiverType"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "getReceiverType"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "InfixExpression",
                                                      leftOperand: {
                                                          node: "SimpleName",
                                                          identifier: "receiverType"
                                                      },
                                                      operator: "!=",
                                                      rightOperand: {
                                                          node: "NullLiteral"
                                                      },
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "SimpleName",
                                                                      identifier: "receiverType"
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "accept"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "CharacterLiteral",
                                                                          escapedValue: "' '"
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "VariableDeclarationStatement",
                                                              modifiers: [],
                                                              type: {
                                                                  node: "SimpleType",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "SimpleName"
                                                                  }
                                                              },
                                                              fragments: [
                                                                  {
                                                                      node: "VariableDeclarationFragment",
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "qualifier"
                                                                      },
                                                                      extraDimensions: 0,
                                                                      initializer: {
                                                                          node: "MethodInvocation",
                                                                          expression: {
                                                                              node: "SimpleName",
                                                                              identifier: "node"
                                                                          },
                                                                          typeArguments: [],
                                                                          name: {
                                                                              node: "SimpleName",
                                                                              identifier: "getReceiverQualifier"
                                                                          },
                                                                          arguments: []
                                                                      }
                                                                  }
                                                              ]
                                                          },
                                                          {
                                                              node: "IfStatement",
                                                              expression: {
                                                                  node: "InfixExpression",
                                                                  leftOperand: {
                                                                      node: "SimpleName",
                                                                      identifier: "qualifier"
                                                                  },
                                                                  operator: "!=",
                                                                  rightOperand: {
                                                                      node: "NullLiteral"
                                                                  },
                                                              },
                                                              thenStatement: {
                                                                  node: "Block",
                                                                  statements: [
                                                                      {
                                                                          node: "ExpressionStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "qualifier"
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "accept"
                                                                              },
                                                                              arguments: [
                                                                                  {
                                                                                      node: "ThisExpression",
                                                                                      qualifier: null
                                                                                  }
                                                                              ]
                                                                          }
                                                                      },
                                                                      {
                                                                          node: "ExpressionStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "FieldAccess",
                                                                                  expression: {
                                                                                      node: "ThisExpression",
                                                                                      qualifier: null
                                                                                  },
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "fBuffer"
                                                                                  }
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "append"
                                                                              },
                                                                              arguments: [
                                                                                  {
                                                                                      node: "CharacterLiteral",
                                                                                      escapedValue: "'.'"
                                                                                  }
                                                                              ]
                                                                          }
                                                                      }
                                                                  ]
                                                              },
                                                              elseStatement: null
                                                          },
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\"this\""
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "IfStatement",
                                                              expression: {
                                                                  node: "InfixExpression",
                                                                  leftOperand: {
                                                                      node: "MethodInvocation",
                                                                      expression: {
                                                                          node: "MethodInvocation",
                                                                          expression: {
                                                                              node: "SimpleName",
                                                                              identifier: "node"
                                                                          },
                                                                          typeArguments: [],
                                                                          name: {
                                                                              node: "SimpleName",
                                                                              identifier: "parameters"
                                                                          },
                                                                          arguments: []
                                                                      },
                                                                      typeArguments: [],
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "size"
                                                                      },
                                                                      arguments: []
                                                                  },
                                                                  operator: ">",
                                                                  rightOperand: {
                                                                      node: "NumberLiteral",
                                                                      token: "0"
                                                                  },
                                                              },
                                                              thenStatement: {
                                                                  node: "Block",
                                                                  statements: [
                                                                      {
                                                                          node: "ExpressionStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "FieldAccess",
                                                                                  expression: {
                                                                                      node: "ThisExpression",
                                                                                      qualifier: null
                                                                                  },
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "fBuffer"
                                                                                  }
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "append"
                                                                              },
                                                                              arguments: [
                                                                                  {
                                                                                      node: "CharacterLiteral",
                                                                                      escapedValue: "','"
                                                                                  }
                                                                              ]
                                                                          }
                                                                      }
                                                                  ]
                                                              },
                                                              elseStatement: null
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "SingleVariableDeclaration"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "parameters"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "SingleVariableDeclaration"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "v"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "v"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "hasNext"
                                                      },
                                                      arguments: []
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\", \""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\")\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getAST"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "apiLevel"
                                              },
                                              arguments: []
                                          },
                                          operator: ">=",
                                          rightOperand: {
                                              node: "QualifiedName",
                                              qualifier: {
                                                  node: "SimpleName",
                                                  identifier: "AST"
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "JLS8"
                                              }
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "ParameterizedType",
                                                      type: {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "List"
                                                          }
                                                      },
                                                      typeArguments: [
                                                          {
                                                              node: "SimpleType",
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "Dimension"
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "dimensions"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "extraDimensions"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ForStatement",
                                                  initializers: [
                                                      {
                                                          node: "VariableDeclarationExpression",
                                                          modifiers: [],
                                                          type: {
                                                              node: "ParameterizedType",
                                                              type: {
                                                                  node: "SimpleType",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "Iterator"
                                                                  }
                                                              },
                                                              typeArguments: [
                                                                  {
                                                                      node: "SimpleType",
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "Dimension"
                                                                      }
                                                                  }
                                                              ]
                                                          },
                                                          fragments: [
                                                              {
                                                                  node: "VariableDeclarationFragment",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "it"
                                                                  },
                                                                  extraDimensions: 0,
                                                                  initializer: {
                                                                      node: "MethodInvocation",
                                                                      expression: {
                                                                          node: "SimpleName",
                                                                          identifier: "dimensions"
                                                                      },
                                                                      typeArguments: [],
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "iterator"
                                                                      },
                                                                      arguments: []
                                                                  }
                                                              }
                                                          ]
                                                      }
                                                  ],
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "hasNext"
                                                      },
                                                      arguments: []
                                                  },
                                                  updaters: [],
                                                  body: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "VariableDeclarationStatement",
                                                              modifiers: [],
                                                              type: {
                                                                  node: "SimpleType",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "Dimension"
                                                                  }
                                                              },
                                                              fragments: [
                                                                  {
                                                                      node: "VariableDeclarationFragment",
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "e"
                                                                      },
                                                                      extraDimensions: 0,
                                                                      initializer: {
                                                                          node: "MethodInvocation",
                                                                          expression: {
                                                                              node: "SimpleName",
                                                                              identifier: "it"
                                                                          },
                                                                          typeArguments: [],
                                                                          name: {
                                                                              node: "SimpleName",
                                                                              identifier: "next"
                                                                          },
                                                                          arguments: []
                                                                      }
                                                                  }
                                                              ]
                                                          },
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "SimpleName",
                                                                      identifier: "e"
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "accept"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ForStatement",
                                                  initializers: [
                                                      {
                                                          node: "VariableDeclarationExpression",
                                                          modifiers: [],
                                                          type: {
                                                              node: "PrimitiveType",
                                                              primitiveTypeCode: "int"
                                                          },
                                                          fragments: [
                                                              {
                                                                  node: "VariableDeclarationFragment",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "i"
                                                                  },
                                                                  extraDimensions: 0,
                                                                  initializer: {
                                                                      node: "NumberLiteral",
                                                                      token: "0"
                                                                  }
                                                              }
                                                          ]
                                                      }
                                                  ],
                                                  expression: {
                                                      node: "InfixExpression",
                                                      leftOperand: {
                                                          node: "SimpleName",
                                                          identifier: "i"
                                                      },
                                                      operator: "<",
                                                      rightOperand: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getExtraDimensions"
                                                          },
                                                          arguments: []
                                                      },
                                                  },
                                                  updaters: [
                                                      {
                                                          node: "PostfixExpression",
                                                          operand: {
                                                              node: "SimpleName",
                                                              identifier: "i"
                                                          },
                                                          operator: "++"
                                                      }
                                                  ],
                                                  body: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\"[]\""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "VariableDeclarationStatement",
                                      modifiers: [],
                                      type: {
                                          node: "ParameterizedType",
                                          type: {
                                              node: "SimpleType",
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "List"
                                              }
                                          },
                                          typeArguments: [
                                              {
                                                  node: "WildcardType",
                                                  bound: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "ASTNode"
                                                      }
                                                  },
                                                  upperBound: true
                                              }
                                          ]
                                      },
                                      fragments: [
                                          {
                                              node: "VariableDeclarationFragment",
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "thrownExceptions"
                                              },
                                              extraDimensions: 0,
                                              initializer: {
                                                  node: "ConditionalExpression",
                                                  expression: {
                                                      node: "InfixExpression",
                                                      leftOperand: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "getAST"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "apiLevel"
                                                          },
                                                          arguments: []
                                                      },
                                                      operator: ">=",
                                                      rightOperand: {
                                                          node: "QualifiedName",
                                                          qualifier: {
                                                              node: "SimpleName",
                                                              identifier: "AST"
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "JLS8"
                                                          }
                                                      },
                                                  },
                                                  thenExpression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "node"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "thrownExceptionTypes"
                                                      },
                                                      arguments: []
                                                  },
                                                  elseExpression: {
                                                      node: "MethodInvocation",
                                                      expression: null,
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "getThrownExceptions"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          }
                                                      ]
                                                  }
                                              }
                                          }
                                      ]
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "PrefixExpression",
                                          operator: "!",
                                          operand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "thrownExceptions"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "isEmpty"
                                              },
                                              arguments: []
                                          }
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\" throws \""
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ForStatement",
                                                  initializers: [
                                                      {
                                                          node: "VariableDeclarationExpression",
                                                          modifiers: [],
                                                          type: {
                                                              node: "ParameterizedType",
                                                              type: {
                                                                  node: "SimpleType",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "Iterator"
                                                                  }
                                                              },
                                                              typeArguments: [
                                                                  {
                                                                      node: "WildcardType",
                                                                      bound: {
                                                                          node: "SimpleType",
                                                                          name: {
                                                                              node: "SimpleName",
                                                                              identifier: "ASTNode"
                                                                          }
                                                                      },
                                                                      upperBound: true
                                                                  }
                                                              ]
                                                          },
                                                          fragments: [
                                                              {
                                                                  node: "VariableDeclarationFragment",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "it"
                                                                  },
                                                                  extraDimensions: 0,
                                                                  initializer: {
                                                                      node: "MethodInvocation",
                                                                      expression: {
                                                                          node: "SimpleName",
                                                                          identifier: "thrownExceptions"
                                                                      },
                                                                      typeArguments: [],
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "iterator"
                                                                      },
                                                                      arguments: []
                                                                  }
                                                              }
                                                          ]
                                                      }
                                                  ],
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "hasNext"
                                                      },
                                                      arguments: []
                                                  },
                                                  updaters: [],
                                                  body: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "VariableDeclarationStatement",
                                                              modifiers: [],
                                                              type: {
                                                                  node: "SimpleType",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "ASTNode"
                                                                  }
                                                              },
                                                              fragments: [
                                                                  {
                                                                      node: "VariableDeclarationFragment",
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "n"
                                                                      },
                                                                      extraDimensions: 0,
                                                                      initializer: {
                                                                          node: "MethodInvocation",
                                                                          expression: {
                                                                              node: "SimpleName",
                                                                              identifier: "it"
                                                                          },
                                                                          typeArguments: [],
                                                                          name: {
                                                                              node: "SimpleName",
                                                                              identifier: "next"
                                                                          },
                                                                          arguments: []
                                                                      }
                                                                  }
                                                              ]
                                                          },
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "SimpleName",
                                                                      identifier: "n"
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "accept"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "IfStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "SimpleName",
                                                                      identifier: "it"
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "hasNext"
                                                                  },
                                                                  arguments: []
                                                              },
                                                              thenStatement: {
                                                                  node: "Block",
                                                                  statements: [
                                                                      {
                                                                          node: "ExpressionStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "FieldAccess",
                                                                                  expression: {
                                                                                      node: "ThisExpression",
                                                                                      qualifier: null
                                                                                  },
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "fBuffer"
                                                                                  }
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "append"
                                                                              },
                                                                              arguments: [
                                                                                  {
                                                                                      node: "StringLiteral",
                                                                                      escapedValue: "\", \""
                                                                                  }
                                                                              ]
                                                                          }
                                                                      }
                                                                  ]
                                                              },
                                                              elseStatement: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\" \""
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getBody"
                                              },
                                              arguments: []
                                          },
                                          operator: "==",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\";\""
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getBody"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "MethodInvocation"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getExpression"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getExpression"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\".\""
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getAST"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "apiLevel"
                                              },
                                              arguments: []
                                          },
                                          operator: ">=",
                                          rightOperand: {
                                              node: "SimpleName",
                                              identifier: "JLS3"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "PrefixExpression",
                                                      operator: "!",
                                                      operand: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "typeArguments"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "isEmpty"
                                                          },
                                                          arguments: []
                                                      }
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\"<\""
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "ForStatement",
                                                              initializers: [
                                                                  {
                                                                      node: "VariableDeclarationExpression",
                                                                      modifiers: [],
                                                                      type: {
                                                                          node: "ParameterizedType",
                                                                          type: {
                                                                              node: "SimpleType",
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "Iterator"
                                                                              }
                                                                          },
                                                                          typeArguments: [
                                                                              {
                                                                                  node: "SimpleType",
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "Type"
                                                                                  }
                                                                              }
                                                                          ]
                                                                      },
                                                                      fragments: [
                                                                          {
                                                                              node: "VariableDeclarationFragment",
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "it"
                                                                              },
                                                                              extraDimensions: 0,
                                                                              initializer: {
                                                                                  node: "MethodInvocation",
                                                                                  expression: {
                                                                                      node: "MethodInvocation",
                                                                                      expression: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "node"
                                                                                      },
                                                                                      typeArguments: [],
                                                                                      name: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "typeArguments"
                                                                                      },
                                                                                      arguments: []
                                                                                  },
                                                                                  typeArguments: [],
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "iterator"
                                                                                  },
                                                                                  arguments: []
                                                                              }
                                                                          }
                                                                      ]
                                                                  }
                                                              ],
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "SimpleName",
                                                                      identifier: "it"
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "hasNext"
                                                                  },
                                                                  arguments: []
                                                              },
                                                              updaters: [],
                                                              body: {
                                                                  node: "Block",
                                                                  statements: [
                                                                      {
                                                                          node: "VariableDeclarationStatement",
                                                                          modifiers: [],
                                                                          type: {
                                                                              node: "SimpleType",
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "Type"
                                                                              }
                                                                          },
                                                                          fragments: [
                                                                              {
                                                                                  node: "VariableDeclarationFragment",
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "t"
                                                                                  },
                                                                                  extraDimensions: 0,
                                                                                  initializer: {
                                                                                      node: "MethodInvocation",
                                                                                      expression: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "it"
                                                                                      },
                                                                                      typeArguments: [],
                                                                                      name: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "next"
                                                                                      },
                                                                                      arguments: []
                                                                                  }
                                                                              }
                                                                          ]
                                                                      },
                                                                      {
                                                                          node: "ExpressionStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "t"
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "accept"
                                                                              },
                                                                              arguments: [
                                                                                  {
                                                                                      node: "ThisExpression",
                                                                                      qualifier: null
                                                                                  }
                                                                              ]
                                                                          }
                                                                      },
                                                                      {
                                                                          node: "IfStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "it"
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "hasNext"
                                                                              },
                                                                              arguments: []
                                                                          },
                                                                          thenStatement: {
                                                                              node: "Block",
                                                                              statements: [
                                                                                  {
                                                                                      node: "ExpressionStatement",
                                                                                      expression: {
                                                                                          node: "MethodInvocation",
                                                                                          expression: {
                                                                                              node: "FieldAccess",
                                                                                              expression: {
                                                                                                  node: "ThisExpression",
                                                                                                  qualifier: null
                                                                                              },
                                                                                              name: {
                                                                                                  node: "SimpleName",
                                                                                                  identifier: "fBuffer"
                                                                                              }
                                                                                          },
                                                                                          typeArguments: [],
                                                                                          name: {
                                                                                              node: "SimpleName",
                                                                                              identifier: "append"
                                                                                          },
                                                                                          arguments: [
                                                                                              {
                                                                                                  node: "StringLiteral",
                                                                                                  escapedValue: "\",\""
                                                                                              }
                                                                                          ]
                                                                                      }
                                                                                  }
                                                                              ]
                                                                          },
                                                                          elseStatement: null
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\">\""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getName"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"(\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "Expression"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "arguments"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Expression"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "e"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "e"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "hasNext"
                                                      },
                                                      arguments: []
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\",\""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\")\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "Modifier"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "node"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "getKeyword"
                                                      },
                                                      arguments: []
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "toString"
                                                  },
                                                  arguments: []
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "NameQualifiedType"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getQualifier"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "CharacterLiteral",
                                                  escapedValue: "'.'"
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: null,
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "printTypeAnnotations"
                                          },
                                          arguments: [
                                              {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getName"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "NormalAnnotation"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"@\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getTypeName"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"(\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "MemberValuePair"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "values"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "MemberValuePair"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "p"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "p"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "hasNext"
                                                      },
                                                      arguments: []
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\",\""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\")\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "NullLiteral"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"null\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "NumberLiteral"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getToken"
                                                  },
                                                  arguments: []
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "PackageDeclaration"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getAST"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "apiLevel"
                                              },
                                              arguments: []
                                          },
                                          operator: ">=",
                                          rightOperand: {
                                              node: "SimpleName",
                                              identifier: "JLS3"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "InfixExpression",
                                                      leftOperand: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getJavadoc"
                                                          },
                                                          arguments: []
                                                      },
                                                      operator: "!=",
                                                      rightOperand: {
                                                          node: "NullLiteral"
                                                      },
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "MethodInvocation",
                                                                      expression: {
                                                                          node: "SimpleName",
                                                                          identifier: "node"
                                                                      },
                                                                      typeArguments: [],
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "getJavadoc"
                                                                      },
                                                                      arguments: []
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "accept"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              },
                                              {
                                                  node: "ForStatement",
                                                  initializers: [
                                                      {
                                                          node: "VariableDeclarationExpression",
                                                          modifiers: [],
                                                          type: {
                                                              node: "ParameterizedType",
                                                              type: {
                                                                  node: "SimpleType",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "Iterator"
                                                                  }
                                                              },
                                                              typeArguments: [
                                                                  {
                                                                      node: "SimpleType",
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "Annotation"
                                                                      }
                                                                  }
                                                              ]
                                                          },
                                                          fragments: [
                                                              {
                                                                  node: "VariableDeclarationFragment",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "it"
                                                                  },
                                                                  extraDimensions: 0,
                                                                  initializer: {
                                                                      node: "MethodInvocation",
                                                                      expression: {
                                                                          node: "MethodInvocation",
                                                                          expression: {
                                                                              node: "SimpleName",
                                                                              identifier: "node"
                                                                          },
                                                                          typeArguments: [],
                                                                          name: {
                                                                              node: "SimpleName",
                                                                              identifier: "annotations"
                                                                          },
                                                                          arguments: []
                                                                      },
                                                                      typeArguments: [],
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "iterator"
                                                                      },
                                                                      arguments: []
                                                                  }
                                                              }
                                                          ]
                                                      }
                                                  ],
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "hasNext"
                                                      },
                                                      arguments: []
                                                  },
                                                  updaters: [],
                                                  body: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "VariableDeclarationStatement",
                                                              modifiers: [],
                                                              type: {
                                                                  node: "SimpleType",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "Annotation"
                                                                  }
                                                              },
                                                              fragments: [
                                                                  {
                                                                      node: "VariableDeclarationFragment",
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "p"
                                                                      },
                                                                      extraDimensions: 0,
                                                                      initializer: {
                                                                          node: "MethodInvocation",
                                                                          expression: {
                                                                              node: "SimpleName",
                                                                              identifier: "it"
                                                                          },
                                                                          typeArguments: [],
                                                                          name: {
                                                                              node: "SimpleName",
                                                                              identifier: "next"
                                                                          },
                                                                          arguments: []
                                                                      }
                                                                  }
                                                              ]
                                                          },
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "SimpleName",
                                                                      identifier: "p"
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "accept"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\" \""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"package \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getName"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\";\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "ParameterizedType"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getType"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"<\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "Type"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "typeArguments"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Type"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "t"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "t"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "hasNext"
                                                      },
                                                      arguments: []
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\",\""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\">\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "ParenthesizedExpression"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"(\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getExpression"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\")\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "PostfixExpression"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getOperand"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "node"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "getOperator"
                                                      },
                                                      arguments: []
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "toString"
                                                  },
                                                  arguments: []
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "PrefixExpression"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "node"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "getOperator"
                                                      },
                                                      arguments: []
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "toString"
                                                  },
                                                  arguments: []
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getOperand"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "PrimitiveType"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: null,
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "printTypeAnnotations"
                                          },
                                          arguments: [
                                              {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "node"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "getPrimitiveTypeCode"
                                                      },
                                                      arguments: []
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "toString"
                                                  },
                                                  arguments: []
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "QualifiedName"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getQualifier"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\".\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getName"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "QualifiedType"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getQualifier"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\".\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: null,
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "printTypeAnnotations"
                                          },
                                          arguments: [
                                              {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getName"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "ReturnStatement"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"return\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getExpression"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\" \""
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getExpression"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\";\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "SimpleName"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getIdentifier"
                                                  },
                                                  arguments: []
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "SimpleType"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: null,
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "printTypeAnnotations"
                                          },
                                          arguments: [
                                              {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getName"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "SingleMemberAnnotation"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"@\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getTypeName"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"(\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getValue"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\")\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "SingleVariableDeclaration"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getAST"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "apiLevel"
                                              },
                                              arguments: []
                                          },
                                          operator: ">=",
                                          rightOperand: {
                                              node: "SimpleName",
                                              identifier: "JLS3"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: null,
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "printModifiers"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "modifiers"
                                                              },
                                                              arguments: []
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getType"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getAST"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "apiLevel"
                                              },
                                              arguments: []
                                          },
                                          operator: ">=",
                                          rightOperand: {
                                              node: "SimpleName",
                                              identifier: "JLS3"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "node"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "isVarargs"
                                                      },
                                                      arguments: []
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "IfStatement",
                                                              expression: {
                                                                  node: "InfixExpression",
                                                                  leftOperand: {
                                                                      node: "MethodInvocation",
                                                                      expression: {
                                                                          node: "MethodInvocation",
                                                                          expression: {
                                                                              node: "SimpleName",
                                                                              identifier: "node"
                                                                          },
                                                                          typeArguments: [],
                                                                          name: {
                                                                              node: "SimpleName",
                                                                              identifier: "getAST"
                                                                          },
                                                                          arguments: []
                                                                      },
                                                                      typeArguments: [],
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "apiLevel"
                                                                      },
                                                                      arguments: []
                                                                  },
                                                                  operator: ">=",
                                                                  rightOperand: {
                                                                      node: "QualifiedName",
                                                                      qualifier: {
                                                                          node: "SimpleName",
                                                                          identifier: "AST"
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "JLS8"
                                                                      }
                                                                  },
                                                              },
                                                              thenStatement: {
                                                                  node: "Block",
                                                                  statements: [
                                                                      {
                                                                          node: "ExpressionStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "FieldAccess",
                                                                                  expression: {
                                                                                      node: "ThisExpression",
                                                                                      qualifier: null
                                                                                  },
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "fBuffer"
                                                                                  }
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "append"
                                                                              },
                                                                              arguments: [
                                                                                  {
                                                                                      node: "CharacterLiteral",
                                                                                      escapedValue: "' '"
                                                                                  }
                                                                              ]
                                                                          }
                                                                      },
                                                                      {
                                                                          node: "VariableDeclarationStatement",
                                                                          modifiers: [],
                                                                          type: {
                                                                              node: "ParameterizedType",
                                                                              type: {
                                                                                  node: "SimpleType",
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "List"
                                                                                  }
                                                                              },
                                                                              typeArguments: [
                                                                                  {
                                                                                      node: "SimpleType",
                                                                                      name: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "Annotation"
                                                                                      }
                                                                                  }
                                                                              ]
                                                                          },
                                                                          fragments: [
                                                                              {
                                                                                  node: "VariableDeclarationFragment",
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "annotations"
                                                                                  },
                                                                                  extraDimensions: 0,
                                                                                  initializer: {
                                                                                      node: "MethodInvocation",
                                                                                      expression: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "node"
                                                                                      },
                                                                                      typeArguments: [],
                                                                                      name: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "varargsAnnotations"
                                                                                      },
                                                                                      arguments: []
                                                                                  }
                                                                              }
                                                                          ]
                                                                      },
                                                                      {
                                                                          node: "ExpressionStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: null,
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "printAnnotationsList"
                                                                              },
                                                                              arguments: [
                                                                                  {
                                                                                      node: "SimpleName",
                                                                                      identifier: "annotations"
                                                                                  }
                                                                              ]
                                                                          }
                                                                      }
                                                                  ]
                                                              },
                                                              elseStatement: null
                                                          },
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\"...\""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\" \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getName"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getAST"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "apiLevel"
                                              },
                                              arguments: []
                                          },
                                          operator: ">=",
                                          rightOperand: {
                                              node: "QualifiedName",
                                              qualifier: {
                                                  node: "SimpleName",
                                                  identifier: "AST"
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "JLS8"
                                              }
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "ParameterizedType",
                                                      type: {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "List"
                                                          }
                                                      },
                                                      typeArguments: [
                                                          {
                                                              node: "SimpleType",
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "Dimension"
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "dimensions"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "extraDimensions"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ForStatement",
                                                  initializers: [
                                                      {
                                                          node: "VariableDeclarationExpression",
                                                          modifiers: [],
                                                          type: {
                                                              node: "ParameterizedType",
                                                              type: {
                                                                  node: "SimpleType",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "Iterator"
                                                                  }
                                                              },
                                                              typeArguments: [
                                                                  {
                                                                      node: "SimpleType",
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "Dimension"
                                                                      }
                                                                  }
                                                              ]
                                                          },
                                                          fragments: [
                                                              {
                                                                  node: "VariableDeclarationFragment",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "it"
                                                                  },
                                                                  extraDimensions: 0,
                                                                  initializer: {
                                                                      node: "MethodInvocation",
                                                                      expression: {
                                                                          node: "SimpleName",
                                                                          identifier: "dimensions"
                                                                      },
                                                                      typeArguments: [],
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "iterator"
                                                                      },
                                                                      arguments: []
                                                                  }
                                                              }
                                                          ]
                                                      }
                                                  ],
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "hasNext"
                                                      },
                                                      arguments: []
                                                  },
                                                  updaters: [],
                                                  body: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "VariableDeclarationStatement",
                                                              modifiers: [],
                                                              type: {
                                                                  node: "SimpleType",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "Dimension"
                                                                  }
                                                              },
                                                              fragments: [
                                                                  {
                                                                      node: "VariableDeclarationFragment",
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "e"
                                                                      },
                                                                      extraDimensions: 0,
                                                                      initializer: {
                                                                          node: "MethodInvocation",
                                                                          expression: {
                                                                              node: "SimpleName",
                                                                              identifier: "it"
                                                                          },
                                                                          typeArguments: [],
                                                                          name: {
                                                                              node: "SimpleName",
                                                                              identifier: "next"
                                                                          },
                                                                          arguments: []
                                                                      }
                                                                  }
                                                              ]
                                                          },
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "SimpleName",
                                                                      identifier: "e"
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "accept"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ForStatement",
                                                  initializers: [
                                                      {
                                                          node: "VariableDeclarationExpression",
                                                          modifiers: [],
                                                          type: {
                                                              node: "PrimitiveType",
                                                              primitiveTypeCode: "int"
                                                          },
                                                          fragments: [
                                                              {
                                                                  node: "VariableDeclarationFragment",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "i"
                                                                  },
                                                                  extraDimensions: 0,
                                                                  initializer: {
                                                                      node: "NumberLiteral",
                                                                      token: "0"
                                                                  }
                                                              }
                                                          ]
                                                      }
                                                  ],
                                                  expression: {
                                                      node: "InfixExpression",
                                                      leftOperand: {
                                                          node: "SimpleName",
                                                          identifier: "i"
                                                      },
                                                      operator: "<",
                                                      rightOperand: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getExtraDimensions"
                                                          },
                                                          arguments: []
                                                      },
                                                  },
                                                  updaters: [
                                                      {
                                                          node: "PostfixExpression",
                                                          operand: {
                                                              node: "SimpleName",
                                                              identifier: "i"
                                                          },
                                                          operator: "++"
                                                      }
                                                  ],
                                                  body: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\"[]\""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getInitializer"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\"=\""
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getInitializer"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "StringLiteral"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getEscapedValue"
                                                  },
                                                  arguments: []
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "SuperConstructorInvocation"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getExpression"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getExpression"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\".\""
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getAST"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "apiLevel"
                                              },
                                              arguments: []
                                          },
                                          operator: ">=",
                                          rightOperand: {
                                              node: "SimpleName",
                                              identifier: "JLS3"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "PrefixExpression",
                                                      operator: "!",
                                                      operand: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "typeArguments"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "isEmpty"
                                                          },
                                                          arguments: []
                                                      }
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\"<\""
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "ForStatement",
                                                              initializers: [
                                                                  {
                                                                      node: "VariableDeclarationExpression",
                                                                      modifiers: [],
                                                                      type: {
                                                                          node: "ParameterizedType",
                                                                          type: {
                                                                              node: "SimpleType",
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "Iterator"
                                                                              }
                                                                          },
                                                                          typeArguments: [
                                                                              {
                                                                                  node: "SimpleType",
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "Type"
                                                                                  }
                                                                              }
                                                                          ]
                                                                      },
                                                                      fragments: [
                                                                          {
                                                                              node: "VariableDeclarationFragment",
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "it"
                                                                              },
                                                                              extraDimensions: 0,
                                                                              initializer: {
                                                                                  node: "MethodInvocation",
                                                                                  expression: {
                                                                                      node: "MethodInvocation",
                                                                                      expression: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "node"
                                                                                      },
                                                                                      typeArguments: [],
                                                                                      name: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "typeArguments"
                                                                                      },
                                                                                      arguments: []
                                                                                  },
                                                                                  typeArguments: [],
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "iterator"
                                                                                  },
                                                                                  arguments: []
                                                                              }
                                                                          }
                                                                      ]
                                                                  }
                                                              ],
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "SimpleName",
                                                                      identifier: "it"
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "hasNext"
                                                                  },
                                                                  arguments: []
                                                              },
                                                              updaters: [],
                                                              body: {
                                                                  node: "Block",
                                                                  statements: [
                                                                      {
                                                                          node: "VariableDeclarationStatement",
                                                                          modifiers: [],
                                                                          type: {
                                                                              node: "SimpleType",
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "Type"
                                                                              }
                                                                          },
                                                                          fragments: [
                                                                              {
                                                                                  node: "VariableDeclarationFragment",
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "t"
                                                                                  },
                                                                                  extraDimensions: 0,
                                                                                  initializer: {
                                                                                      node: "MethodInvocation",
                                                                                      expression: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "it"
                                                                                      },
                                                                                      typeArguments: [],
                                                                                      name: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "next"
                                                                                      },
                                                                                      arguments: []
                                                                                  }
                                                                              }
                                                                          ]
                                                                      },
                                                                      {
                                                                          node: "ExpressionStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "t"
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "accept"
                                                                              },
                                                                              arguments: [
                                                                                  {
                                                                                      node: "ThisExpression",
                                                                                      qualifier: null
                                                                                  }
                                                                              ]
                                                                          }
                                                                      },
                                                                      {
                                                                          node: "IfStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "it"
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "hasNext"
                                                                              },
                                                                              arguments: []
                                                                          },
                                                                          thenStatement: {
                                                                              node: "Block",
                                                                              statements: [
                                                                                  {
                                                                                      node: "ExpressionStatement",
                                                                                      expression: {
                                                                                          node: "MethodInvocation",
                                                                                          expression: {
                                                                                              node: "FieldAccess",
                                                                                              expression: {
                                                                                                  node: "ThisExpression",
                                                                                                  qualifier: null
                                                                                              },
                                                                                              name: {
                                                                                                  node: "SimpleName",
                                                                                                  identifier: "fBuffer"
                                                                                              }
                                                                                          },
                                                                                          typeArguments: [],
                                                                                          name: {
                                                                                              node: "SimpleName",
                                                                                              identifier: "append"
                                                                                          },
                                                                                          arguments: [
                                                                                              {
                                                                                                  node: "StringLiteral",
                                                                                                  escapedValue: "\",\""
                                                                                              }
                                                                                          ]
                                                                                      }
                                                                                  }
                                                                              ]
                                                                          },
                                                                          elseStatement: null
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\">\""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"super(\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "Expression"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "arguments"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Expression"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "e"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "e"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "hasNext"
                                                      },
                                                      arguments: []
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\",\""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\");\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "SuperFieldAccess"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getQualifier"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getQualifier"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\".\""
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"super.\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getName"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "SuperMethodInvocation"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getQualifier"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getQualifier"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\".\""
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"super.\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getAST"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "apiLevel"
                                              },
                                              arguments: []
                                          },
                                          operator: ">=",
                                          rightOperand: {
                                              node: "SimpleName",
                                              identifier: "JLS3"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "PrefixExpression",
                                                      operator: "!",
                                                      operand: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "typeArguments"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "isEmpty"
                                                          },
                                                          arguments: []
                                                      }
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\"<\""
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "ForStatement",
                                                              initializers: [
                                                                  {
                                                                      node: "VariableDeclarationExpression",
                                                                      modifiers: [],
                                                                      type: {
                                                                          node: "ParameterizedType",
                                                                          type: {
                                                                              node: "SimpleType",
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "Iterator"
                                                                              }
                                                                          },
                                                                          typeArguments: [
                                                                              {
                                                                                  node: "SimpleType",
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "Type"
                                                                                  }
                                                                              }
                                                                          ]
                                                                      },
                                                                      fragments: [
                                                                          {
                                                                              node: "VariableDeclarationFragment",
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "it"
                                                                              },
                                                                              extraDimensions: 0,
                                                                              initializer: {
                                                                                  node: "MethodInvocation",
                                                                                  expression: {
                                                                                      node: "MethodInvocation",
                                                                                      expression: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "node"
                                                                                      },
                                                                                      typeArguments: [],
                                                                                      name: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "typeArguments"
                                                                                      },
                                                                                      arguments: []
                                                                                  },
                                                                                  typeArguments: [],
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "iterator"
                                                                                  },
                                                                                  arguments: []
                                                                              }
                                                                          }
                                                                      ]
                                                                  }
                                                              ],
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "SimpleName",
                                                                      identifier: "it"
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "hasNext"
                                                                  },
                                                                  arguments: []
                                                              },
                                                              updaters: [],
                                                              body: {
                                                                  node: "Block",
                                                                  statements: [
                                                                      {
                                                                          node: "VariableDeclarationStatement",
                                                                          modifiers: [],
                                                                          type: {
                                                                              node: "SimpleType",
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "Type"
                                                                              }
                                                                          },
                                                                          fragments: [
                                                                              {
                                                                                  node: "VariableDeclarationFragment",
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "t"
                                                                                  },
                                                                                  extraDimensions: 0,
                                                                                  initializer: {
                                                                                      node: "MethodInvocation",
                                                                                      expression: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "it"
                                                                                      },
                                                                                      typeArguments: [],
                                                                                      name: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "next"
                                                                                      },
                                                                                      arguments: []
                                                                                  }
                                                                              }
                                                                          ]
                                                                      },
                                                                      {
                                                                          node: "ExpressionStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "t"
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "accept"
                                                                              },
                                                                              arguments: [
                                                                                  {
                                                                                      node: "ThisExpression",
                                                                                      qualifier: null
                                                                                  }
                                                                              ]
                                                                          }
                                                                      },
                                                                      {
                                                                          node: "IfStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "it"
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "hasNext"
                                                                              },
                                                                              arguments: []
                                                                          },
                                                                          thenStatement: {
                                                                              node: "Block",
                                                                              statements: [
                                                                                  {
                                                                                      node: "ExpressionStatement",
                                                                                      expression: {
                                                                                          node: "MethodInvocation",
                                                                                          expression: {
                                                                                              node: "FieldAccess",
                                                                                              expression: {
                                                                                                  node: "ThisExpression",
                                                                                                  qualifier: null
                                                                                              },
                                                                                              name: {
                                                                                                  node: "SimpleName",
                                                                                                  identifier: "fBuffer"
                                                                                              }
                                                                                          },
                                                                                          typeArguments: [],
                                                                                          name: {
                                                                                              node: "SimpleName",
                                                                                              identifier: "append"
                                                                                          },
                                                                                          arguments: [
                                                                                              {
                                                                                                  node: "StringLiteral",
                                                                                                  escapedValue: "\",\""
                                                                                              }
                                                                                          ]
                                                                                      }
                                                                                  }
                                                                              ]
                                                                          },
                                                                          elseStatement: null
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\">\""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getName"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"(\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "Expression"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "arguments"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Expression"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "e"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "e"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "hasNext"
                                                      },
                                                      arguments: []
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\",\""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\")\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "SuperMethodReference"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getQualifier"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getQualifier"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "CharacterLiteral",
                                                              escapedValue: "'.'"
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"super\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: null,
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "printReferenceTypeArguments"
                                          },
                                          arguments: [
                                              {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "typeArguments"
                                                  },
                                                  arguments: []
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getName"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "SwitchCase"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "node"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "isDefault"
                                          },
                                          arguments: []
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\"default :\""
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\"case \""
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getExpression"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\":\""
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "SwitchStatement"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"switch (\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getExpression"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\") \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"{\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "Statement"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "statements"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Statement"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "s"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "s"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"}\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "SynchronizedStatement"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"synchronized (\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getExpression"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\") \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getBody"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "TagElement"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "node"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "isNested"
                                          },
                                          arguments: []
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\"{\""
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\"\\n * \""
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "VariableDeclarationStatement",
                                      modifiers: [],
                                      type: {
                                          node: "PrimitiveType",
                                          primitiveTypeCode: "boolean"
                                      },
                                      fragments: [
                                          {
                                              node: "VariableDeclarationFragment",
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "previousRequiresWhiteSpace"
                                              },
                                              extraDimensions: 0,
                                              initializer: {
                                                  node: "BooleanLiteral",
                                                  booleanValue: false
                                              }
                                          }
                                      ]
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getTagName"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "getTagName"
                                                              },
                                                              arguments: []
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "Assignment",
                                                      leftHandSide: {
                                                          node: "SimpleName",
                                                          identifier: "previousRequiresWhiteSpace"
                                                      },
                                                      operator: "=",
                                                      rightHandSide: {
                                                          node: "BooleanLiteral",
                                                          booleanValue: true
                                                      }
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "VariableDeclarationStatement",
                                      modifiers: [],
                                      type: {
                                          node: "PrimitiveType",
                                          primitiveTypeCode: "boolean"
                                      },
                                      fragments: [
                                          {
                                              node: "VariableDeclarationFragment",
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "previousRequiresNewLine"
                                              },
                                              extraDimensions: 0,
                                              initializer: {
                                                  node: "BooleanLiteral",
                                                  booleanValue: false
                                              }
                                          }
                                      ]
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "WildcardType",
                                                          bound: {
                                                              node: "SimpleType",
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "ASTNode"
                                                              }
                                                          },
                                                          upperBound: true
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "fragments"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "ASTNode"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "e"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "PrimitiveType",
                                                      primitiveTypeCode: "boolean"
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "currentIncludesWhiteSpace"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "ParenthesizedExpression",
                                                              expression: {
                                                                  node: "InstanceofExpression",
                                                                  leftOperand: {
                                                                      node: "SimpleName",
                                                                      identifier: "e"
                                                                  },
                                                                  rightOperand: {
                                                                      node: "SimpleType",
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "TextElement"
                                                                      }
                                                                  }
                                                              }
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "InfixExpression",
                                                      leftOperand: {
                                                          node: "SimpleName",
                                                          identifier: "previousRequiresNewLine"
                                                      },
                                                      operator: "&&",
                                                      rightOperand: {
                                                          node: "SimpleName",
                                                          identifier: "currentIncludesWhiteSpace"
                                                      },
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\"\\n * \""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "Assignment",
                                                      leftHandSide: {
                                                          node: "SimpleName",
                                                          identifier: "previousRequiresNewLine"
                                                      },
                                                      operator: "=",
                                                      rightHandSide: {
                                                          node: "SimpleName",
                                                          identifier: "currentIncludesWhiteSpace"
                                                      }
                                                  }
                                              },
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "InfixExpression",
                                                      leftOperand: {
                                                          node: "SimpleName",
                                                          identifier: "previousRequiresWhiteSpace"
                                                      },
                                                      operator: "&&",
                                                      rightOperand: {
                                                          node: "PrefixExpression",
                                                          operator: "!",
                                                          operand: {
                                                              node: "SimpleName",
                                                              identifier: "currentIncludesWhiteSpace"
                                                          }
                                                      },
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\" \""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "e"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "Assignment",
                                                      leftHandSide: {
                                                          node: "SimpleName",
                                                          identifier: "previousRequiresWhiteSpace"
                                                      },
                                                      operator: "=",
                                                      rightHandSide: {
                                                          node: "InfixExpression",
                                                          leftOperand: {
                                                              node: "PrefixExpression",
                                                              operator: "!",
                                                              operand: {
                                                                  node: "SimpleName",
                                                                  identifier: "currentIncludesWhiteSpace"
                                                              }
                                                          },
                                                          operator: "&&",
                                                          rightOperand: {
                                                              node: "PrefixExpression",
                                                              operator: "!",
                                                              operand: {
                                                                  node: "ParenthesizedExpression",
                                                                  expression: {
                                                                      node: "InstanceofExpression",
                                                                      leftOperand: {
                                                                          node: "SimpleName",
                                                                          identifier: "e"
                                                                      },
                                                                      rightOperand: {
                                                                          node: "SimpleType",
                                                                          name: {
                                                                              node: "SimpleName",
                                                                              identifier: "TagElement"
                                                                          }
                                                                      }
                                                                  }
                                                              }
                                                          },
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "node"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "isNested"
                                          },
                                          arguments: []
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\"}\""
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "TextElement"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getText"
                                                  },
                                                  arguments: []
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "ThisExpression"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getQualifier"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getQualifier"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\".\""
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"this\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "ThrowStatement"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"throw \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getExpression"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\";\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "TryStatement"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"try \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getAST"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "apiLevel"
                                              },
                                              arguments: []
                                          },
                                          operator: ">=",
                                          rightOperand: {
                                              node: "SimpleName",
                                              identifier: "JLS4"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "PrefixExpression",
                                                      operator: "!",
                                                      operand: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "resources"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "isEmpty"
                                                          },
                                                          arguments: []
                                                      }
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\"(\""
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "ForStatement",
                                                              initializers: [
                                                                  {
                                                                      node: "VariableDeclarationExpression",
                                                                      modifiers: [],
                                                                      type: {
                                                                          node: "ParameterizedType",
                                                                          type: {
                                                                              node: "SimpleType",
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "Iterator"
                                                                              }
                                                                          },
                                                                          typeArguments: [
                                                                              {
                                                                                  node: "SimpleType",
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "VariableDeclarationExpression"
                                                                                  }
                                                                              }
                                                                          ]
                                                                      },
                                                                      fragments: [
                                                                          {
                                                                              node: "VariableDeclarationFragment",
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "it"
                                                                              },
                                                                              extraDimensions: 0,
                                                                              initializer: {
                                                                                  node: "MethodInvocation",
                                                                                  expression: {
                                                                                      node: "MethodInvocation",
                                                                                      expression: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "node"
                                                                                      },
                                                                                      typeArguments: [],
                                                                                      name: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "resources"
                                                                                      },
                                                                                      arguments: []
                                                                                  },
                                                                                  typeArguments: [],
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "iterator"
                                                                                  },
                                                                                  arguments: []
                                                                              }
                                                                          }
                                                                      ]
                                                                  }
                                                              ],
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "SimpleName",
                                                                      identifier: "it"
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "hasNext"
                                                                  },
                                                                  arguments: []
                                                              },
                                                              updaters: [],
                                                              body: {
                                                                  node: "Block",
                                                                  statements: [
                                                                      {
                                                                          node: "VariableDeclarationStatement",
                                                                          modifiers: [],
                                                                          type: {
                                                                              node: "SimpleType",
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "VariableDeclarationExpression"
                                                                              }
                                                                          },
                                                                          fragments: [
                                                                              {
                                                                                  node: "VariableDeclarationFragment",
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "var"
                                                                                  },
                                                                                  extraDimensions: 0,
                                                                                  initializer: {
                                                                                      node: "MethodInvocation",
                                                                                      expression: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "it"
                                                                                      },
                                                                                      typeArguments: [],
                                                                                      name: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "next"
                                                                                      },
                                                                                      arguments: []
                                                                                  }
                                                                              }
                                                                          ]
                                                                      },
                                                                      {
                                                                          node: "ExpressionStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "var"
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "accept"
                                                                              },
                                                                              arguments: [
                                                                                  {
                                                                                      node: "ThisExpression",
                                                                                      qualifier: null
                                                                                  }
                                                                              ]
                                                                          }
                                                                      },
                                                                      {
                                                                          node: "IfStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "it"
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "hasNext"
                                                                              },
                                                                              arguments: []
                                                                          },
                                                                          thenStatement: {
                                                                              node: "Block",
                                                                              statements: [
                                                                                  {
                                                                                      node: "ExpressionStatement",
                                                                                      expression: {
                                                                                          node: "MethodInvocation",
                                                                                          expression: {
                                                                                              node: "FieldAccess",
                                                                                              expression: {
                                                                                                  node: "ThisExpression",
                                                                                                  qualifier: null
                                                                                              },
                                                                                              name: {
                                                                                                  node: "SimpleName",
                                                                                                  identifier: "fBuffer"
                                                                                              }
                                                                                          },
                                                                                          typeArguments: [],
                                                                                          name: {
                                                                                              node: "SimpleName",
                                                                                              identifier: "append"
                                                                                          },
                                                                                          arguments: [
                                                                                              {
                                                                                                  node: "StringLiteral",
                                                                                                  escapedValue: "\",\""
                                                                                              }
                                                                                          ]
                                                                                      }
                                                                                  }
                                                                              ]
                                                                          },
                                                                          elseStatement: null
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\") \""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getBody"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\" \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "CatchClause"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "catchClauses"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "CatchClause"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "cc"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "cc"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getFinally"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\"finally \""
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getFinally"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "TypeDeclaration"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getJavadoc"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getJavadoc"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getAST"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "apiLevel"
                                              },
                                              arguments: []
                                          },
                                          operator: ">=",
                                          rightOperand: {
                                              node: "SimpleName",
                                              identifier: "JLS3"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: null,
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "printModifiers"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "modifiers"
                                                              },
                                                              arguments: []
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "ConditionalExpression",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "node"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "isInterface"
                                                      },
                                                      arguments: []
                                                  },
                                                  thenExpression: {
                                                      node: "StringLiteral",
                                                      escapedValue: "\"interface \""
                                                  },
                                                  elseExpression: {
                                                      node: "StringLiteral",
                                                      escapedValue: "\"class \""
                                                  }
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getName"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getAST"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "apiLevel"
                                              },
                                              arguments: []
                                          },
                                          operator: ">=",
                                          rightOperand: {
                                              node: "SimpleName",
                                              identifier: "JLS3"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "PrefixExpression",
                                                      operator: "!",
                                                      operand: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "typeParameters"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "isEmpty"
                                                          },
                                                          arguments: []
                                                      }
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\"<\""
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "ForStatement",
                                                              initializers: [
                                                                  {
                                                                      node: "VariableDeclarationExpression",
                                                                      modifiers: [],
                                                                      type: {
                                                                          node: "ParameterizedType",
                                                                          type: {
                                                                              node: "SimpleType",
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "Iterator"
                                                                              }
                                                                          },
                                                                          typeArguments: [
                                                                              {
                                                                                  node: "SimpleType",
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "TypeParameter"
                                                                                  }
                                                                              }
                                                                          ]
                                                                      },
                                                                      fragments: [
                                                                          {
                                                                              node: "VariableDeclarationFragment",
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "it"
                                                                              },
                                                                              extraDimensions: 0,
                                                                              initializer: {
                                                                                  node: "MethodInvocation",
                                                                                  expression: {
                                                                                      node: "MethodInvocation",
                                                                                      expression: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "node"
                                                                                      },
                                                                                      typeArguments: [],
                                                                                      name: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "typeParameters"
                                                                                      },
                                                                                      arguments: []
                                                                                  },
                                                                                  typeArguments: [],
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "iterator"
                                                                                  },
                                                                                  arguments: []
                                                                              }
                                                                          }
                                                                      ]
                                                                  }
                                                              ],
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "SimpleName",
                                                                      identifier: "it"
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "hasNext"
                                                                  },
                                                                  arguments: []
                                                              },
                                                              updaters: [],
                                                              body: {
                                                                  node: "Block",
                                                                  statements: [
                                                                      {
                                                                          node: "VariableDeclarationStatement",
                                                                          modifiers: [],
                                                                          type: {
                                                                              node: "SimpleType",
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "TypeParameter"
                                                                              }
                                                                          },
                                                                          fragments: [
                                                                              {
                                                                                  node: "VariableDeclarationFragment",
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "t"
                                                                                  },
                                                                                  extraDimensions: 0,
                                                                                  initializer: {
                                                                                      node: "MethodInvocation",
                                                                                      expression: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "it"
                                                                                      },
                                                                                      typeArguments: [],
                                                                                      name: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "next"
                                                                                      },
                                                                                      arguments: []
                                                                                  }
                                                                              }
                                                                          ]
                                                                      },
                                                                      {
                                                                          node: "ExpressionStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "t"
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "accept"
                                                                              },
                                                                              arguments: [
                                                                                  {
                                                                                      node: "ThisExpression",
                                                                                      qualifier: null
                                                                                  }
                                                                              ]
                                                                          }
                                                                      },
                                                                      {
                                                                          node: "IfStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "it"
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "hasNext"
                                                                              },
                                                                              arguments: []
                                                                          },
                                                                          thenStatement: {
                                                                              node: "Block",
                                                                              statements: [
                                                                                  {
                                                                                      node: "ExpressionStatement",
                                                                                      expression: {
                                                                                          node: "MethodInvocation",
                                                                                          expression: {
                                                                                              node: "FieldAccess",
                                                                                              expression: {
                                                                                                  node: "ThisExpression",
                                                                                                  qualifier: null
                                                                                              },
                                                                                              name: {
                                                                                                  node: "SimpleName",
                                                                                                  identifier: "fBuffer"
                                                                                              }
                                                                                          },
                                                                                          typeArguments: [],
                                                                                          name: {
                                                                                              node: "SimpleName",
                                                                                              identifier: "append"
                                                                                          },
                                                                                          arguments: [
                                                                                              {
                                                                                                  node: "StringLiteral",
                                                                                                  escapedValue: "\",\""
                                                                                              }
                                                                                          ]
                                                                                      }
                                                                                  }
                                                                              ]
                                                                          },
                                                                          elseStatement: null
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\">\""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\" \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getAST"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "apiLevel"
                                              },
                                              arguments: []
                                          },
                                          operator: ">=",
                                          rightOperand: {
                                              node: "SimpleName",
                                              identifier: "JLS3"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "InfixExpression",
                                                      leftOperand: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getSuperclassType"
                                                          },
                                                          arguments: []
                                                      },
                                                      operator: "!=",
                                                      rightOperand: {
                                                          node: "NullLiteral"
                                                      },
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\"extends \""
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "MethodInvocation",
                                                                      expression: {
                                                                          node: "SimpleName",
                                                                          identifier: "node"
                                                                      },
                                                                      typeArguments: [],
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "getSuperclassType"
                                                                      },
                                                                      arguments: []
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "accept"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\" \""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              },
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "PrefixExpression",
                                                      operator: "!",
                                                      operand: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "superInterfaceTypes"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "isEmpty"
                                                          },
                                                          arguments: []
                                                      }
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "ConditionalExpression",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "node"
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "isInterface"
                                                                              },
                                                                              arguments: []
                                                                          },
                                                                          thenExpression: {
                                                                              node: "StringLiteral",
                                                                              escapedValue: "\"extends \""
                                                                          },
                                                                          elseExpression: {
                                                                              node: "StringLiteral",
                                                                              escapedValue: "\"implements \""
                                                                          }
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "ForStatement",
                                                              initializers: [
                                                                  {
                                                                      node: "VariableDeclarationExpression",
                                                                      modifiers: [],
                                                                      type: {
                                                                          node: "ParameterizedType",
                                                                          type: {
                                                                              node: "SimpleType",
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "Iterator"
                                                                              }
                                                                          },
                                                                          typeArguments: [
                                                                              {
                                                                                  node: "SimpleType",
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "Type"
                                                                                  }
                                                                              }
                                                                          ]
                                                                      },
                                                                      fragments: [
                                                                          {
                                                                              node: "VariableDeclarationFragment",
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "it"
                                                                              },
                                                                              extraDimensions: 0,
                                                                              initializer: {
                                                                                  node: "MethodInvocation",
                                                                                  expression: {
                                                                                      node: "MethodInvocation",
                                                                                      expression: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "node"
                                                                                      },
                                                                                      typeArguments: [],
                                                                                      name: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "superInterfaceTypes"
                                                                                      },
                                                                                      arguments: []
                                                                                  },
                                                                                  typeArguments: [],
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "iterator"
                                                                                  },
                                                                                  arguments: []
                                                                              }
                                                                          }
                                                                      ]
                                                                  }
                                                              ],
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "SimpleName",
                                                                      identifier: "it"
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "hasNext"
                                                                  },
                                                                  arguments: []
                                                              },
                                                              updaters: [],
                                                              body: {
                                                                  node: "Block",
                                                                  statements: [
                                                                      {
                                                                          node: "VariableDeclarationStatement",
                                                                          modifiers: [],
                                                                          type: {
                                                                              node: "SimpleType",
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "Type"
                                                                              }
                                                                          },
                                                                          fragments: [
                                                                              {
                                                                                  node: "VariableDeclarationFragment",
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "t"
                                                                                  },
                                                                                  extraDimensions: 0,
                                                                                  initializer: {
                                                                                      node: "MethodInvocation",
                                                                                      expression: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "it"
                                                                                      },
                                                                                      typeArguments: [],
                                                                                      name: {
                                                                                          node: "SimpleName",
                                                                                          identifier: "next"
                                                                                      },
                                                                                      arguments: []
                                                                                  }
                                                                              }
                                                                          ]
                                                                      },
                                                                      {
                                                                          node: "ExpressionStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "t"
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "accept"
                                                                              },
                                                                              arguments: [
                                                                                  {
                                                                                      node: "ThisExpression",
                                                                                      qualifier: null
                                                                                  }
                                                                              ]
                                                                          }
                                                                      },
                                                                      {
                                                                          node: "IfStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "it"
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "hasNext"
                                                                              },
                                                                              arguments: []
                                                                          },
                                                                          thenStatement: {
                                                                              node: "Block",
                                                                              statements: [
                                                                                  {
                                                                                      node: "ExpressionStatement",
                                                                                      expression: {
                                                                                          node: "MethodInvocation",
                                                                                          expression: {
                                                                                              node: "FieldAccess",
                                                                                              expression: {
                                                                                                  node: "ThisExpression",
                                                                                                  qualifier: null
                                                                                              },
                                                                                              name: {
                                                                                                  node: "SimpleName",
                                                                                                  identifier: "fBuffer"
                                                                                              }
                                                                                          },
                                                                                          typeArguments: [],
                                                                                          name: {
                                                                                              node: "SimpleName",
                                                                                              identifier: "append"
                                                                                          },
                                                                                          arguments: [
                                                                                              {
                                                                                                  node: "StringLiteral",
                                                                                                  escapedValue: "\", \""
                                                                                              }
                                                                                          ]
                                                                                      }
                                                                                  }
                                                                              ]
                                                                          },
                                                                          elseStatement: null
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\" \""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"{\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "VariableDeclarationStatement",
                                      modifiers: [],
                                      type: {
                                          node: "SimpleType",
                                          name: {
                                              node: "SimpleName",
                                              identifier: "BodyDeclaration"
                                          }
                                      },
                                      fragments: [
                                          {
                                              node: "VariableDeclarationFragment",
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "prev"
                                              },
                                              extraDimensions: 0,
                                              initializer: {
                                                  node: "NullLiteral"
                                              }
                                          }
                                      ]
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "BodyDeclaration"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "bodyDeclarations"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "BodyDeclaration"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "d"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "InstanceofExpression",
                                                      leftOperand: {
                                                          node: "SimpleName",
                                                          identifier: "prev"
                                                      },
                                                      rightOperand: {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "EnumConstantDeclaration"
                                                          }
                                                      }
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "IfStatement",
                                                              expression: {
                                                                  node: "InstanceofExpression",
                                                                  leftOperand: {
                                                                      node: "SimpleName",
                                                                      identifier: "d"
                                                                  },
                                                                  rightOperand: {
                                                                      node: "SimpleType",
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "EnumConstantDeclaration"
                                                                      }
                                                                  }
                                                              },
                                                              thenStatement: {
                                                                  node: "Block",
                                                                  statements: [
                                                                      {
                                                                          node: "ExpressionStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "FieldAccess",
                                                                                  expression: {
                                                                                      node: "ThisExpression",
                                                                                      qualifier: null
                                                                                  },
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "fBuffer"
                                                                                  }
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "append"
                                                                              },
                                                                              arguments: [
                                                                                  {
                                                                                      node: "StringLiteral",
                                                                                      escapedValue: "\", \""
                                                                                  }
                                                                              ]
                                                                          }
                                                                      }
                                                                  ]
                                                              },
                                                              elseStatement: {
                                                                  node: "Block",
                                                                  statements: [
                                                                      {
                                                                          node: "ExpressionStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "FieldAccess",
                                                                                  expression: {
                                                                                      node: "ThisExpression",
                                                                                      qualifier: null
                                                                                  },
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "fBuffer"
                                                                                  }
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "append"
                                                                              },
                                                                              arguments: [
                                                                                  {
                                                                                      node: "StringLiteral",
                                                                                      escapedValue: "\"; \""
                                                                                  }
                                                                              ]
                                                                          }
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "d"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "Assignment",
                                                      leftHandSide: {
                                                          node: "SimpleName",
                                                          identifier: "prev"
                                                      },
                                                      operator: "=",
                                                      rightHandSide: {
                                                          node: "SimpleName",
                                                          identifier: "d"
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"}\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "TypeDeclarationStatement"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getAST"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "apiLevel"
                                              },
                                              arguments: []
                                          },
                                          operator: ">=",
                                          rightOperand: {
                                              node: "SimpleName",
                                              identifier: "JLS3"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getDeclaration"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "TypeLiteral"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getType"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\".class\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "TypeMethodReference"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getType"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: null,
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "printReferenceTypeArguments"
                                          },
                                          arguments: [
                                              {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "typeArguments"
                                                  },
                                                  arguments: []
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getName"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "TypeParameter"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: null,
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "printModifiers"
                                          },
                                          arguments: [
                                              {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "modifiers"
                                                  },
                                                  arguments: []
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getName"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "PrefixExpression",
                                          operator: "!",
                                          operand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "typeBounds"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "isEmpty"
                                              },
                                              arguments: []
                                          }
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\" extends \""
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ForStatement",
                                                  initializers: [
                                                      {
                                                          node: "VariableDeclarationExpression",
                                                          modifiers: [],
                                                          type: {
                                                              node: "ParameterizedType",
                                                              type: {
                                                                  node: "SimpleType",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "Iterator"
                                                                  }
                                                              },
                                                              typeArguments: [
                                                                  {
                                                                      node: "SimpleType",
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "Type"
                                                                      }
                                                                  }
                                                              ]
                                                          },
                                                          fragments: [
                                                              {
                                                                  node: "VariableDeclarationFragment",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "it"
                                                                  },
                                                                  extraDimensions: 0,
                                                                  initializer: {
                                                                      node: "MethodInvocation",
                                                                      expression: {
                                                                          node: "MethodInvocation",
                                                                          expression: {
                                                                              node: "SimpleName",
                                                                              identifier: "node"
                                                                          },
                                                                          typeArguments: [],
                                                                          name: {
                                                                              node: "SimpleName",
                                                                              identifier: "typeBounds"
                                                                          },
                                                                          arguments: []
                                                                      },
                                                                      typeArguments: [],
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "iterator"
                                                                      },
                                                                      arguments: []
                                                                  }
                                                              }
                                                          ]
                                                      }
                                                  ],
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "hasNext"
                                                      },
                                                      arguments: []
                                                  },
                                                  updaters: [],
                                                  body: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "VariableDeclarationStatement",
                                                              modifiers: [],
                                                              type: {
                                                                  node: "SimpleType",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "Type"
                                                                  }
                                                              },
                                                              fragments: [
                                                                  {
                                                                      node: "VariableDeclarationFragment",
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "t"
                                                                      },
                                                                      extraDimensions: 0,
                                                                      initializer: {
                                                                          node: "MethodInvocation",
                                                                          expression: {
                                                                              node: "SimpleName",
                                                                              identifier: "it"
                                                                          },
                                                                          typeArguments: [],
                                                                          name: {
                                                                              node: "SimpleName",
                                                                              identifier: "next"
                                                                          },
                                                                          arguments: []
                                                                      }
                                                                  }
                                                              ]
                                                          },
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "SimpleName",
                                                                      identifier: "t"
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "accept"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              node: "IfStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "SimpleName",
                                                                      identifier: "it"
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "hasNext"
                                                                  },
                                                                  arguments: []
                                                              },
                                                              thenStatement: {
                                                                  node: "Block",
                                                                  statements: [
                                                                      {
                                                                          node: "ExpressionStatement",
                                                                          expression: {
                                                                              node: "MethodInvocation",
                                                                              expression: {
                                                                                  node: "FieldAccess",
                                                                                  expression: {
                                                                                      node: "ThisExpression",
                                                                                      qualifier: null
                                                                                  },
                                                                                  name: {
                                                                                      node: "SimpleName",
                                                                                      identifier: "fBuffer"
                                                                                  }
                                                                              },
                                                                              typeArguments: [],
                                                                              name: {
                                                                                  node: "SimpleName",
                                                                                  identifier: "append"
                                                                              },
                                                                              arguments: [
                                                                                  {
                                                                                      node: "StringLiteral",
                                                                                      escapedValue: "\" & \""
                                                                                  }
                                                                              ]
                                                                          }
                                                                      }
                                                                  ]
                                                              },
                                                              elseStatement: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "UnionType"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "Type"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "types"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Type"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "t"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "t"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "hasNext"
                                                      },
                                                      arguments: []
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\"|\""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "VariableDeclarationExpression"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getAST"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "apiLevel"
                                              },
                                              arguments: []
                                          },
                                          operator: ">=",
                                          rightOperand: {
                                              node: "SimpleName",
                                              identifier: "JLS3"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: null,
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "printModifiers"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "modifiers"
                                                              },
                                                              arguments: []
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getType"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\" \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "VariableDeclarationFragment"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "fragments"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "VariableDeclarationFragment"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "f"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "f"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "hasNext"
                                                      },
                                                      arguments: []
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\", \""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "VariableDeclarationFragment"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getName"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getAST"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "apiLevel"
                                              },
                                              arguments: []
                                          },
                                          operator: ">=",
                                          rightOperand: {
                                              node: "QualifiedName",
                                              qualifier: {
                                                  node: "SimpleName",
                                                  identifier: "AST"
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "JLS8"
                                              }
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "ParameterizedType",
                                                      type: {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "List"
                                                          }
                                                      },
                                                      typeArguments: [
                                                          {
                                                              node: "SimpleType",
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "Dimension"
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "dimensions"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "extraDimensions"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ForStatement",
                                                  initializers: [
                                                      {
                                                          node: "VariableDeclarationExpression",
                                                          modifiers: [],
                                                          type: {
                                                              node: "ParameterizedType",
                                                              type: {
                                                                  node: "SimpleType",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "Iterator"
                                                                  }
                                                              },
                                                              typeArguments: [
                                                                  {
                                                                      node: "SimpleType",
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "Dimension"
                                                                      }
                                                                  }
                                                              ]
                                                          },
                                                          fragments: [
                                                              {
                                                                  node: "VariableDeclarationFragment",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "it"
                                                                  },
                                                                  extraDimensions: 0,
                                                                  initializer: {
                                                                      node: "MethodInvocation",
                                                                      expression: {
                                                                          node: "SimpleName",
                                                                          identifier: "dimensions"
                                                                      },
                                                                      typeArguments: [],
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "iterator"
                                                                      },
                                                                      arguments: []
                                                                  }
                                                              }
                                                          ]
                                                      }
                                                  ],
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "hasNext"
                                                      },
                                                      arguments: []
                                                  },
                                                  updaters: [],
                                                  body: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "VariableDeclarationStatement",
                                                              modifiers: [],
                                                              type: {
                                                                  node: "SimpleType",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "Dimension"
                                                                  }
                                                              },
                                                              fragments: [
                                                                  {
                                                                      node: "VariableDeclarationFragment",
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "e"
                                                                      },
                                                                      extraDimensions: 0,
                                                                      initializer: {
                                                                          node: "MethodInvocation",
                                                                          expression: {
                                                                              node: "SimpleName",
                                                                              identifier: "it"
                                                                          },
                                                                          typeArguments: [],
                                                                          name: {
                                                                              node: "SimpleName",
                                                                              identifier: "next"
                                                                          },
                                                                          arguments: []
                                                                      }
                                                                  }
                                                              ]
                                                          },
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "SimpleName",
                                                                      identifier: "e"
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "accept"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ForStatement",
                                                  initializers: [
                                                      {
                                                          node: "VariableDeclarationExpression",
                                                          modifiers: [],
                                                          type: {
                                                              node: "PrimitiveType",
                                                              primitiveTypeCode: "int"
                                                          },
                                                          fragments: [
                                                              {
                                                                  node: "VariableDeclarationFragment",
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "i"
                                                                  },
                                                                  extraDimensions: 0,
                                                                  initializer: {
                                                                      node: "NumberLiteral",
                                                                      token: "0"
                                                                  }
                                                              }
                                                          ]
                                                      }
                                                  ],
                                                  expression: {
                                                      node: "InfixExpression",
                                                      leftOperand: {
                                                          node: "SimpleName",
                                                          identifier: "i"
                                                      },
                                                      operator: "<",
                                                      rightOperand: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getExtraDimensions"
                                                          },
                                                          arguments: []
                                                      },
                                                  },
                                                  updaters: [
                                                      {
                                                          node: "PostfixExpression",
                                                          operand: {
                                                              node: "SimpleName",
                                                              identifier: "i"
                                                          },
                                                          operator: "++"
                                                      }
                                                  ],
                                                  body: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\"[]\""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getInitializer"
                                              },
                                              arguments: []
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "FieldAccess",
                                                          expression: {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          },
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "fBuffer"
                                                          }
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "append"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "StringLiteral",
                                                              escapedValue: "\"=\""
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "SimpleName",
                                                              identifier: "node"
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "getInitializer"
                                                          },
                                                          arguments: []
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "VariableDeclarationStatement"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getAST"
                                                  },
                                                  arguments: []
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "apiLevel"
                                              },
                                              arguments: []
                                          },
                                          operator: ">=",
                                          rightOperand: {
                                              node: "SimpleName",
                                              identifier: "JLS3"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: null,
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "printModifiers"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "modifiers"
                                                              },
                                                              arguments: []
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getType"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\" \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ForStatement",
                                      initializers: [
                                          {
                                              node: "VariableDeclarationExpression",
                                              modifiers: [],
                                              type: {
                                                  node: "ParameterizedType",
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "Iterator"
                                                      }
                                                  },
                                                  typeArguments: [
                                                      {
                                                          node: "SimpleType",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "VariableDeclarationFragment"
                                                          }
                                                      }
                                                  ]
                                              },
                                              fragments: [
                                                  {
                                                      node: "VariableDeclarationFragment",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      extraDimensions: 0,
                                                      initializer: {
                                                          node: "MethodInvocation",
                                                          expression: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "node"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "fragments"
                                                              },
                                                              arguments: []
                                                          },
                                                          typeArguments: [],
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "iterator"
                                                          },
                                                          arguments: []
                                                      }
                                                  }
                                              ]
                                          }
                                      ],
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "SimpleName",
                                              identifier: "it"
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "hasNext"
                                          },
                                          arguments: []
                                      },
                                      updaters: [],
                                      body: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "VariableDeclarationStatement",
                                                  modifiers: [],
                                                  type: {
                                                      node: "SimpleType",
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "VariableDeclarationFragment"
                                                      }
                                                  },
                                                  fragments: [
                                                      {
                                                          node: "VariableDeclarationFragment",
                                                          name: {
                                                              node: "SimpleName",
                                                              identifier: "f"
                                                          },
                                                          extraDimensions: 0,
                                                          initializer: {
                                                              node: "MethodInvocation",
                                                              expression: {
                                                                  node: "SimpleName",
                                                                  identifier: "it"
                                                              },
                                                              typeArguments: [],
                                                              name: {
                                                                  node: "SimpleName",
                                                                  identifier: "next"
                                                              },
                                                              arguments: []
                                                          }
                                                      }
                                                  ]
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "f"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "it"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "hasNext"
                                                      },
                                                      arguments: []
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\", \""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\";\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "WhileStatement"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"while (\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getExpression"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\") \""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "MethodInvocation",
                                              expression: {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              },
                                              typeArguments: [],
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "getBody"
                                              },
                                              arguments: []
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "accept"
                                          },
                                          arguments: [
                                              {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          node: "MethodDeclaration",
                          modifiers: [
                              {
                                  node: "MarkerAnnotation",
                                  typeName: {
                                      node: "SimpleName",
                                      identifier: "Override"
                                  }
                              },
                              {
                                  node: "Modifier",
                                  keyword: "public"
                              }
                          ],
                          constructor: false,
                          typeParameters: [],
                          returnType2: {
                              node: "PrimitiveType",
                              primitiveTypeCode: "boolean"
                          },
                          name: {
                              node: "SimpleName",
                              identifier: "visit"
                          },
                          parameters: [
                              {
                                  node: "SingleVariableDeclaration",
                                  modifiers: [],
                                  type: {
                                      node: "SimpleType",
                                      name: {
                                          node: "SimpleName",
                                          identifier: "WildcardType"
                                      }
                                  },
                                  varargs: false,
                                  name: {
                                      node: "SimpleName",
                                      identifier: "node"
                                  },
                                  extraDimensions: 0,
                                  initializer: null
                              }
                          ],
                          extraDimensions: 0,
                          thrownExceptions: [],
                          body: {
                              node: "Block",
                              statements: [
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: null,
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "printTypeAnnotations"
                                          },
                                          arguments: [
                                              {
                                                  node: "SimpleName",
                                                  identifier: "node"
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "ExpressionStatement",
                                      expression: {
                                          node: "MethodInvocation",
                                          expression: {
                                              node: "FieldAccess",
                                              expression: {
                                                  node: "ThisExpression",
                                                  qualifier: null
                                              },
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "fBuffer"
                                              }
                                          },
                                          typeArguments: [],
                                          name: {
                                              node: "SimpleName",
                                              identifier: "append"
                                          },
                                          arguments: [
                                              {
                                                  node: "StringLiteral",
                                                  escapedValue: "\"?\""
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      node: "VariableDeclarationStatement",
                                      modifiers: [],
                                      type: {
                                          node: "SimpleType",
                                          name: {
                                              node: "SimpleName",
                                              identifier: "Type"
                                          }
                                      },
                                      fragments: [
                                          {
                                              node: "VariableDeclarationFragment",
                                              name: {
                                                  node: "SimpleName",
                                                  identifier: "bound"
                                              },
                                              extraDimensions: 0,
                                              initializer: {
                                                  node: "MethodInvocation",
                                                  expression: {
                                                      node: "SimpleName",
                                                      identifier: "node"
                                                  },
                                                  typeArguments: [],
                                                  name: {
                                                      node: "SimpleName",
                                                      identifier: "getBound"
                                                  },
                                                  arguments: []
                                              }
                                          }
                                      ]
                                  },
                                  {
                                      node: "IfStatement",
                                      expression: {
                                          node: "InfixExpression",
                                          leftOperand: {
                                              node: "SimpleName",
                                              identifier: "bound"
                                          },
                                          operator: "!=",
                                          rightOperand: {
                                              node: "NullLiteral"
                                          },
                                      },
                                      thenStatement: {
                                          node: "Block",
                                          statements: [
                                              {
                                                  node: "IfStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "node"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "isUpperBound"
                                                      },
                                                      arguments: []
                                                  },
                                                  thenStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\" extends \""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  },
                                                  elseStatement: {
                                                      node: "Block",
                                                      statements: [
                                                          {
                                                              node: "ExpressionStatement",
                                                              expression: {
                                                                  node: "MethodInvocation",
                                                                  expression: {
                                                                      node: "FieldAccess",
                                                                      expression: {
                                                                          node: "ThisExpression",
                                                                          qualifier: null
                                                                      },
                                                                      name: {
                                                                          node: "SimpleName",
                                                                          identifier: "fBuffer"
                                                                      }
                                                                  },
                                                                  typeArguments: [],
                                                                  name: {
                                                                      node: "SimpleName",
                                                                      identifier: "append"
                                                                  },
                                                                  arguments: [
                                                                      {
                                                                          node: "StringLiteral",
                                                                          escapedValue: "\" super \""
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  node: "ExpressionStatement",
                                                  expression: {
                                                      node: "MethodInvocation",
                                                      expression: {
                                                          node: "SimpleName",
                                                          identifier: "bound"
                                                      },
                                                      typeArguments: [],
                                                      name: {
                                                          node: "SimpleName",
                                                          identifier: "accept"
                                                      },
                                                      arguments: [
                                                          {
                                                              node: "ThisExpression",
                                                              qualifier: null
                                                          }
                                                      ]
                                                  }
                                              }
                                          ]
                                      },
                                      elseStatement: null
                                  },
                                  {
                                      node: "ReturnStatement",
                                      expression: {
                                          node: "BooleanLiteral",
                                          booleanValue: false
                                      }
                                  }
                              ]
                          }
                      }
                  ]
              }
          ]
      }
    );
    });