//===========================================================================
//
//  Parsing Expression Grammar of Java 1.7 for Mouse 1.1 - 1.6.
//  Based on Java Language Specification, Java SE 7 Edition, dated 2012-07-27,
//  obtained from http://docs.oracle.com/javase/specs/jls/se7/html/index.html.
//
//---------------------------------------------------------------------------
//
//  Copyright (C) 2006, 2009, 2010, 2011, 2013
//  by Roman R Redziejowski(www.romanredz.se).
//
//  The author gives unlimited permission to copy and distribute
//  this file, with or without modifications, as long as this notice
//  is preserved, and any changes are properly documented.
//
//  This file is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//
//---------------------------------------------------------------------------
//
//  Latest update 2013-04-23
//
//---------------------------------------------------------------------------
//  Change log
//---------------------------------------------------------------------------
//
//    2006-12-06 Posted on Internet.
//    2009-04-04 Modified to conform to Mouse syntax:
//               Underscore removed from names
//               \f in Space replaced by Unicode for FormFeed.
//    2009-07-10 Unused rule THREADSAFE removed.
//    2009-07-10 Copying and distribution conditions relaxed by the author.
//    2010-07-01 Updated Mouse version in the comment.
//    2010-09-15 Updated comment on Java release.
//    2010-09-18 Updated list of reserved words ("keywords") according to
//               JLS 3.9: added "const" and "goto", removed "threadsafe".
//    2010-09-18 Removed superfluous "?" everywhere after "Spacing".
//    2010-10-05 Removed erroneous "TypeArguments?" from "EnumConstant".
//               See JLS 8.9, JLS 18.1.
//               NB. "Annotations" are optional, but not shown as such in JLS.
//    2010-10-20 Corrected "FormalParameterList" according to JLS 8.4.1.
//               NB. "VariableModifiers" in "FormalParameter" and "LastFormalParameter"
//               are optional, but not shown as such in JLS.
//    2010-10-20 Corrected "Annotation" according to JLS 9.7.
//               Is incorrect in JLS 18.1 (does not allow list of value pairs).
//    2010-10-20 Corrected "LocalVariableDeclarationStatement".
//               Is incorrect in JLS 18.1: only FINAL allowed as "VariableModifier".
//               Is incorrect in JLS 14.4: "VariableModifiers" not shown as optional.
//    2010-10-20 Corrected "AnnotationTypeElementRest": added SEMI as last alternative.
//               See JLS 9.6. NB. Missing in JLS 18.1.
//    2010-10-20 Moved "Identifier" from "AnnotationTypeElementRest" to
//               "AnnotationMethodRest". Was incorrect in JLS 18.1.
//    2010-10-21 Inverted order of alternatives in "HexSignificand".
//    2010-10-24 Corrected previous correction: moved SEMI from
//               "AnnotationTypeElementRest" to "AnnotationTypeElementDeclaration".
//    2010-10-25 Repeated "u" allowed in UnicodeEscape (JLS 3.3).
//               Line terminators not allowed in StringLiteral (JLS 3.10.5).
//               (Found thanks to Java PEG for Parboiled, which in turn credits
//               Reinier Zwitserloot for finding it.)
//
//---------------------------------------------------------------------------
//    Change log for Java 1.7 starts here.
//    Updates based on project documentation, guess, and javac parser code.
//---------------------------------------------------------------------------
//
//    2011-07-18 Implemented Binary Literals: added "BinaryNumeral".
//    2011-07-19 Implemented Underscores in Numerical Literals:
//               Added "Digits" and "HexDigits". Removed "Digit".
//               Modified "DecimalNumeral", "HexNumeral", "BinaryNumeral",
//               "OctalNumeral", "DecimalFloat", "Exponent",
//               "HexSignificand", and "BinaryExponent".
//    2011-07-19 Added SEMI after "VariableDeclarators" in "MemberDecl" (JLS 8.3).
//    2011-07-21 Corrected "ArrayInitializer" to allow for "{,}" (JLS 10.6).
//    2011-07-20 Implemented Type Inference for Generic Instance Creation:
//               Added "Diamond".
//               Modified "ClassCreatorRest" by adding "Diamond?".
//    2011-07-20 Implemented try-with-resources Statement:
//               Added try-with-resources as an alternative of "Statement".
//               Added "Resource".
//    2011-07-20 Implemented catching of multiple exceptions:
//               Modified "Catch" to allow multiple exception types.
//    2011-10-15 Updated Mouse version in the comment.
//    2011-11-05 Updated Mouse version in the comment.
//
//---------------------------------------------------------------------------
//    Updates based on the new Java Language Specifications
//    (SE7 Edition of 2012-07-27)
//---------------------------------------------------------------------------
//
//    2013-02-15 Try-with-resource (14.20.3): replaced "Modifiers*"
//               in "Resource" by "(FINAL / Annotation)*",
//               which is the syntax for VariableModifier*.
//    2013-02-15  Diamond operator: Copied definition of "Creator",
//               "CreatedName", "TypeArgumentsOrDiamond",
//               "NonWildcardTypeArgumentsOrDiamond", "ClassCreatorRest",
//               "ArrayCreatorRest", and "InnerCreator" from Chapter 18.
//               Removed "Diamond".
//    2013-02-15 In "Creator", allowed "BasicType" for array creator.
//               Was obviously an error. See JLS 15.10.
//               (Found already 2006-11-10, not corrected in SE7.)
//    2013-02-15 Expanded "ArrayCreatorRest".
//    2013-02-18 Line terminators not allowed in CharLiteral (JLS 3.10.4).
//    2013-02-19 Added "NonWildcardTypeArguments?" in the second alternative
//               of "SuperSuffix". Version in Chapter 18 is incorrect.
//               See JLS 15.10.
//    2013-02-19 Added semicolon as dummy import declaration.
//    2013-02-19 Commented deviations from JLS SE7.
//    2013-04-23 Updated Mouse version in the comment.
//               Corrected spelling in a comment to IdentifierSuffix.
//
//===========================================================================

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//  AST:  Copyright (C) 2015 Oleg Mazko
//  TODO: Comments, javadoc; Ugly UnaryExpression->Primary->Selector, split rules ?
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ClassType
//  = Identifier TypeArguments? (DOT Identifier TypeArguments?)*
// ==>
// ClassType
//  = QualifiedIdentifier TypeArguments? (DOT Identifier TypeArguments?)*
//---------------------------------------------------------------------------
// Expression
//  = ConditionalExpression (AssignmentOperator ConditionalExpression)*
// ==>
// Expression
//  = ConditionalExpression AssignmentOperator Expression
//  / ConditionalExpression
//---------------------------------------------------------------------------
// ConditionalExpression
//  = ConditionalOrExpression (QUERY Expression COLON ConditionalOrExpression)*
// ==>
// ConditionalExpression
//  = ConditionalOrExpression QUERY Expression COLON ConditionalExpression
//  / ConditionalOrExpression
//---------------------------------------------------------------------------
// Primary
//  = ParExpression
//  ...
//  / QualifiedIdentifier IdentifierSuffix?
// ==>
// Primary
//  = ParExpression
//  ...
//  / QualifiedIdentifierSuffix
//  / QualifiedIdentifier
//---------------------------------------------------------------------------
// IdentifierSuffix
//  = LBRK ( RBRK Dim* DOT CLASS / Expression RBRK )
//    / Arguments
//    / DOT
//      ( CLASS
//      / ExplicitGenericInvocation
//      / THIS
//      / SUPER Arguments
//      / NEW NonWildcardTypeArguments? InnerCreator
//      )
// ==>
// QualifiedIdentifierSuffix
//  = QualifiedIdentifier Dim+ DOT CLASS
//  / QualifiedIdentifier LBRK Expression RBRK
//  / QualifiedIdentifier Arguments
//  / QualifiedIdentifier DOT CLASS
//  / QualifiedIdentifier DOT ExplicitGenericInvocation
//  / QualifiedIdentifier DOT THIS
//  / QualifiedIdentifier DOT SUPER Arguments
//  / QualifiedIdentifier DOT NEW NonWildcardTypeArguments? InnerCreator
//---------------------------------------------------------------------------
// CreatedName
//  = Identifier TypeArgumentsOrDiamond? ( DOT Identifier TypeArgumentsOrDiamond? )*
// ==>
// CreatedName
//  = QualifiedIdentifier TypeArgumentsOrDiamond?
//  ( DOT Identifier TypeArgumentsOrDiamond? )*
//---------------------------------------------------------------------------
// UnaryExpression
//  = PrefixOp UnaryExpression
//  / LPAR Type RPAR UnaryExpression
//  / Primary (Selector)* (PostfixOp)*
// ==>
// UnaryExpression
//  = PrefixOp UnaryExpression
//  / UnaryExpressionNotPlusMinus
//
// UnaryExpressionNotPlusMinus
//  = CastExpression
//  / Primary Selector Selector* PostfixOp+
//  / Primary Selector Selector*
//  / Primary PostfixOp+
//  / Primary
//
// CastExpression
//  = LPAR PrimitiveType RPAR UnaryExpression
//  / LPAR ReferenceType RPAR UnaryExpressionNotPlusMinus
//
// PrimitiveType
//  = BasicType
//---------------------------------------------------------------------------
// Selector
//  = DOT Identifier Arguments?
// ==>
// Selector
//  = DOT Identifier Arguments
//  / DOT Identifier
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
//    Copyright (C) Gregory Kramida
//    (SE15 Edition of 2012-07-27)
//---------------------------------------------------------------------------
//
// Finished transition to Java 15 on all earlier tests & Eclipse parser from
// version 3.24.0 of org.eclipse.jdt.core.
// Some new parser & Java 8-15 features supported (but not all).
// Testing support restored (transitioned from QUnit to Jest)
// Now nodes optionally contain location in code (can be disabled via options
// object such as { addLocations : false } being passed as the second
// argument to .parse
//
// Expression
//  = ConditionalExpression AssignmentOperator Expression
//  / ConditionalExpression
// ==>
// Expression
//  = AssignmentExpression
//
// AssignmentExpression
//  = UnaryExpressionNotPlusMinus AssignmentOperator Expression
//  / ConditionalExpression
//---------------------------------------------------------------------------