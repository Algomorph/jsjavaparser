    test("Lucene Jflex StandartAnalizer", function(assert) {
      var src = multiline(function(){/*
        /*
         * Licensed to the Apache Software Foundation (ASF) under one or more
         * contributor license agreements.  See the NOTICE file distributed with
         * this work for additional information regarding copyright ownership.
         * The ASF licenses this file to You under the Apache License, Version 2.0
         * (the "License"); you may not use this file except in compliance with
         * the License.  You may obtain a copy of the License at
         *
         *     http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         *\/

        package org.apache.lucene.analysis.standard;

        import java.io.IOException;
        import java.io.Reader;

        import org.apache.lucene.analysis.Tokenizer;
        import org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31;
        import org.apache.lucene.analysis.standard.std34.StandardTokenizerImpl34;
        import org.apache.lucene.analysis.standard.std40.StandardTokenizerImpl40;
        import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
        import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
        import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
        import org.apache.lucene.analysis.tokenattributes.TypeAttribute;
        import org.apache.lucene.util.AttributeFactory;
        import org.apache.lucene.util.Version;

        /** A grammar-based tokenizer constructed with JFlex.
         * <p>
         * As of Lucene version 3.1, this class implements the Word Break rules from the
         * Unicode Text Segmentation algorithm, as specified in 
         * <a href="http://unicode.org/reports/tr29/">Unicode Standard Annex #29</a>.
         * <p/>
         * <p>Many applications have specific tokenizer needs.  If this tokenizer does
         * not suit your application, please consider copying this source code
         * directory to your project and maintaining your own grammar-based tokenizer.
         *
         * <a name="version"/>
         * <p>You must specify the required {@link Version}
         * compatibility when creating StandardTokenizer:
         * <ul>
         *   <li> As of 3.4, Hiragana and Han characters are no longer wrongly split
         *   from their combining characters. If you use a previous version number,
         *   you get the exact broken behavior for backwards compatibility.
         *   <li> As of 3.1, StandardTokenizer implements Unicode text segmentation.
         *   If you use a previous version number, you get the exact behavior of
         *   {@link ClassicTokenizer} for backwards compatibility.
         * </ul>
         *\/

        public final class StandardTokenizer extends Tokenizer {
          /** A private instance of the JFlex-constructed scanner *\/
          private StandardTokenizerInterface scanner;

          public static final int ALPHANUM          = 0;
          /** @deprecated (3.1) *\/
          @Deprecated
          public static final int APOSTROPHE        = 1;
          /** @deprecated (3.1) *\/
          @Deprecated
          public static final int ACRONYM           = 2;
          /** @deprecated (3.1) *\/
          @Deprecated
          public static final int COMPANY           = 3;
          public static final int EMAIL             = 4;
          /** @deprecated (3.1) *\/
          @Deprecated
          public static final int HOST              = 5;
          public static final int NUM               = 6;
          /** @deprecated (3.1) *\/
          @Deprecated
          public static final int CJ                = 7;

          /** @deprecated (3.1) *\/
          @Deprecated
          public static final int ACRONYM_DEP       = 8;

          public static final int SOUTHEAST_ASIAN = 9;
          public static final int IDEOGRAPHIC = 10;
          public static final int HIRAGANA = 11;
          public static final int KATAKANA = 12;
          public static final int HANGUL = 13;
          
          /** String token types that correspond to token type int constants *\/
          public static final String [] TOKEN_TYPES = new String [] {
            "<ALPHANUM>",
            "<APOSTROPHE>",
            "<ACRONYM>",
            "<COMPANY>",
            "<EMAIL>",
            "<HOST>",
            "<NUM>",
            "<CJ>",
            "<ACRONYM_DEP>",
            "<SOUTHEAST_ASIAN>",
            "<IDEOGRAPHIC>",
            "<HIRAGANA>",
            "<KATAKANA>",
            "<HANGUL>"
          };
          
          private int skippedPositions;

          private int maxTokenLength = StandardAnalyzer.DEFAULT_MAX_TOKEN_LENGTH;

          /** Set the max allowed token length.  Any token longer
           *  than this is skipped. *\/
          public void setMaxTokenLength(int length) {
            if (length < 1) {
              throw new IllegalArgumentException("maxTokenLength must be greater than zero");
            }
            this.maxTokenLength = length;
            if (scanner instanceof StandardTokenizerImpl) {
              scanner.setBufferSize(Math.min(length, 1024 * 1024)); // limit buffer size to 1M chars
            }
          }

          /** @see #setMaxTokenLength *\/
          public int getMaxTokenLength() {
            return maxTokenLength;
          }

          /**
           * Creates a new instance of the {@link org.apache.lucene.analysis.standard.StandardTokenizer}.  Attaches
           * the <code>input</code> to the newly created JFlex scanner.
           *
           * @param input The input reader
           *
           * See http://issues.apache.org/jira/browse/LUCENE-1068
           *\/
          public StandardTokenizer(Reader input) {
            this(Version.LATEST, input);
          }

          /**
           * @deprecated Use {@link #StandardTokenizer(Reader)}
           *\/
          @Deprecated
          public StandardTokenizer(Version matchVersion, Reader input) {
            super(input);
            init(matchVersion);
          }

          /**
           * Creates a new StandardTokenizer with a given {@link org.apache.lucene.util.AttributeFactory} 
           *\/
          public StandardTokenizer(AttributeFactory factory, Reader input) {
            this(Version.LATEST, factory, input);
          }

          /**
           * @deprecated Use {@link #StandardTokenizer(AttributeFactory, Reader)}
           *\/
          @Deprecated
          public StandardTokenizer(Version matchVersion, AttributeFactory factory, Reader input) {
            super(factory, input);
            init(matchVersion);
          }

          private final void init(Version matchVersion) {
            if (matchVersion.onOrAfter(Version.LUCENE_4_7)) {
              this.scanner = new StandardTokenizerImpl(input);
            } else if (matchVersion.onOrAfter(Version.LUCENE_4_0)) {
              this.scanner = new StandardTokenizerImpl40(input);
            } else if (matchVersion.onOrAfter(Version.LUCENE_3_4)) {
              this.scanner = new StandardTokenizerImpl34(input);
            } else if (matchVersion.onOrAfter(Version.LUCENE_3_1)) {
              this.scanner = new StandardTokenizerImpl31(input);
            } else {
              this.scanner = new ClassicTokenizerImpl(input);
            }
          }

          // this tokenizer generates three attributes:
          // term offset, positionIncrement and type
          private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);
          private final OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);
          private final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);
          private final TypeAttribute typeAtt = addAttribute(TypeAttribute.class);

          /*
           * (non-Javadoc)
           *
           * @see org.apache.lucene.analysis.TokenStream#next()
           *\/
          @Override
          public final boolean incrementToken() throws IOException {
            clearAttributes();
            skippedPositions = 0;

            while(true) {
              int tokenType = scanner.getNextToken();

              if (tokenType == StandardTokenizerInterface.YYEOF) {
                return false;
              }

              if (scanner.yylength() <= maxTokenLength) {
                posIncrAtt.setPositionIncrement(skippedPositions+1);
                scanner.getText(termAtt);
                final int start = scanner.yychar();
                offsetAtt.setOffset(correctOffset(start), correctOffset(start+termAtt.length()));
                // This 'if' should be removed in the next release. For now, it converts
                // invalid acronyms to HOST. When removed, only the 'else' part should
                // remain.
                if (tokenType == StandardTokenizer.ACRONYM_DEP) {
                  typeAtt.setType(StandardTokenizer.TOKEN_TYPES[StandardTokenizer.HOST]);
                  termAtt.setLength(termAtt.length() - 1); // remove extra '.'
                } else {
                  typeAtt.setType(StandardTokenizer.TOKEN_TYPES[tokenType]);
                }
                return true;
              } else
                // When we skip a too-long term, we still increment the
                // position increment
                skippedPositions++;
            }
          }
          
          @Override
          public final void end() throws IOException {
            super.end();
            // set final offset
            int finalOffset = correctOffset(scanner.yychar() + scanner.yylength());
            offsetAtt.setOffset(finalOffset, finalOffset);
            // adjust any skipped tokens
            posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement()+skippedPositions);
          }

          @Override
          public void close() throws IOException {
            super.close();
            scanner.yyreset(input);
          }

          @Override
          public void reset() throws IOException {
            super.reset();
            scanner.yyreset(input);
            skippedPositions = 0;
          }
        }


        /*
         * Licensed to the Apache Software Foundation (ASF) under one or more
         * contributor license agreements.  See the NOTICE file distributed with
         * this work for additional information regarding copyright ownership.
         * The ASF licenses this file to You under the Apache License, Version 2.0
         * (the "License"); you may not use this file except in compliance with
         * the License.  You may obtain a copy of the License at
         *
         *     http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         *\/


        /**
         * This class implements Word Break rules from the Unicode Text Segmentation 
         * algorithm, as specified in 
         * <a href="http://unicode.org/reports/tr29/">Unicode Standard Annex #29</a>. 
         * <p/>
         * Tokens produced are of the following types:
         * <ul>
         *   <li>&lt;ALPHANUM&gt;: A sequence of alphabetic and numeric characters</li>
         *   <li>&lt;NUM&gt;: A number</li>
         *   <li>&lt;SOUTHEAST_ASIAN&gt;: A sequence of characters from South and Southeast
         *       Asian languages, including Thai, Lao, Myanmar, and Khmer</li>
         *   <li>&lt;IDEOGRAPHIC&gt;: A single CJKV ideographic character</li>
         *   <li>&lt;HIRAGANA&gt;: A single hiragana character</li>
         *   <li>&lt;KATAKANA&gt;: A sequence of katakana characters</li>
         *   <li>&lt;HANGUL&gt;: A sequence of Hangul characters</li>
         * </ul>
         *\/

        public final class StandardTokenizerImpl implements StandardTokenizerInterface {

          /** This character denotes the end of file *\/
          public static final int YYEOF = -1;

          /** initial size of the lookahead buffer *\/
          private int ZZ_BUFFERSIZE = 255;

          /** lexical states *\/
          public static final int YYINITIAL = 0;

          /**
           * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
           * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
           *                  at the beginning of a line
           * l is of the form l = 2*k, k a non negative integer
           *\/
          private static final int ZZ_LEXSTATE[] = { 
             0, 0
          };

          /** 
           * Translates characters to character classes
           *\/
          private static final String ZZ_CMAP_PACKED = 
            "\42\0\1\15\4\0\1\14\4\0\1\7\1\0\1\10\1\0\12\4"+
            "\1\6\1\7\5\0\32\1\4\0\1\11\1\0\32\1\57\0\1\1"+
            "\2\0\1\3\7\0\1\1\1\0\1\6\2\0\1\1\5\0\27\1"+
            "\1\0\37\1\1\0\u01ca\1\4\0\14\1\5\0\1\6\10\0\5\1"+
            "\7\0\1\1\1\0\1\1\21\0\160\3\5\1\1\0\2\1\2\0"+
            "\4\1\1\7\7\0\1\1\1\6\3\1\1\0\1\1\1\0\24\1"+
            "\1\0\123\1\1\0\213\1\1\0\7\3\236\1\11\0\46\1\2\0"+
            "\1\1\7\0\47\1\1\0\1\7\7\0\55\3\1\0\1\3\1\0"+
            "\2\3\1\0\2\3\1\0\1\3\10\0\33\16\5\0\3\16\1\1"+
            "\1\6\13\0\5\3\7\0\2\7\2\0\13\3\1\0\1\3\3\0"+
            "\53\1\25\3\12\4\1\0\1\4\1\7\1\0\2\1\1\3\143\1"+
            "\1\0\1\1\10\3\1\0\6\3\2\1\2\3\1\0\4\3\2\1"+
            "\12\4\3\1\2\0\1\1\17\0\1\3\1\1\1\3\36\1\33\3"+
            "\2\0\131\1\13\3\1\1\16\0\12\4\41\1\11\3\2\1\2\0"+
            "\1\7\1\0\1\1\5\0\26\1\4\3\1\1\11\3\1\1\3\3"+
            "\1\1\5\3\22\0\31\1\3\3\104\0\1\1\1\0\13\1\67\0"+
            "\33\3\1\0\4\3\66\1\3\3\1\1\22\3\1\1\7\3\12\1"+
            "\2\3\2\0\12\4\1\0\7\1\1\0\7\1\1\0\3\3\1\0"+
            "\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0\1\1\3\0"+
            "\4\1\2\0\1\3\1\1\7\3\2\0\2\3\2\0\3\3\1\1"+
            "\10\0\1\3\4\0\2\1\1\0\3\1\2\3\2\0\12\4\2\1"+
            "\17\0\3\3\1\0\6\1\4\0\2\1\2\0\26\1\1\0\7\1"+
            "\1\0\2\1\1\0\2\1\1\0\2\1\2\0\1\3\1\0\5\3"+
            "\4\0\2\3\2\0\3\3\3\0\1\3\7\0\4\1\1\0\1\1"+
            "\7\0\12\4\2\3\3\1\1\3\13\0\3\3\1\0\11\1\1\0"+
            "\3\1\1\0\26\1\1\0\7\1\1\0\2\1\1\0\5\1\2\0"+
            "\1\3\1\1\10\3\1\0\3\3\1\0\3\3\2\0\1\1\17\0"+
            "\2\1\2\3\2\0\12\4\21\0\3\3\1\0\10\1\2\0\2\1"+
            "\2\0\26\1\1\0\7\1\1\0\2\1\1\0\5\1\2\0\1\3"+
            "\1\1\7\3\2\0\2\3\2\0\3\3\10\0\2\3\4\0\2\1"+
            "\1\0\3\1\2\3\2\0\12\4\1\0\1\1\20\0\1\3\1\1"+
            "\1\0\6\1\3\0\3\1\1\0\4\1\3\0\2\1\1\0\1\1"+
            "\1\0\2\1\3\0\2\1\3\0\3\1\3\0\14\1\4\0\5\3"+
            "\3\0\3\3\1\0\4\3\2\0\1\1\6\0\1\3\16\0\12\4"+
            "\21\0\3\3\1\0\10\1\1\0\3\1\1\0\27\1\1\0\12\1"+
            "\1\0\5\1\3\0\1\1\7\3\1\0\3\3\1\0\4\3\7\0"+
            "\2\3\1\0\2\1\6\0\2\1\2\3\2\0\12\4\22\0\2\3"+
            "\1\0\10\1\1\0\3\1\1\0\27\1\1\0\12\1\1\0\5\1"+
            "\2\0\1\3\1\1\7\3\1\0\3\3\1\0\4\3\7\0\2\3"+
            "\7\0\1\1\1\0\2\1\2\3\2\0\12\4\1\0\2\1\17\0"+
            "\2\3\1\0\10\1\1\0\3\1\1\0\51\1\2\0\1\1\7\3"+
            "\1\0\3\3\1\0\4\3\1\1\10\0\1\3\10\0\2\1\2\3"+
            "\2\0\12\4\12\0\6\1\2\0\2\3\1\0\22\1\3\0\30\1"+
            "\1\0\11\1\1\0\1\1\2\0\7\1\3\0\1\3\4\0\6\3"+
            "\1\0\1\3\1\0\10\3\22\0\2\3\15\0\60\20\1\21\2\20"+
            "\7\21\5\0\7\20\10\21\1\0\12\4\47\0\2\20\1\0\1\20"+
            "\2\0\2\20\1\0\1\20\2\0\1\20\6\0\4\20\1\0\7\20"+
            "\1\0\3\20\1\0\1\20\1\0\1\20\2\0\2\20\1\0\4\20"+
            "\1\21\2\20\6\21\1\0\2\21\1\20\2\0\5\20\1\0\1\20"+
            "\1\0\6\21\2\0\12\4\2\0\4\20\40\0\1\1\27\0\2\3"+
            "\6\0\12\4\13\0\1\3\1\0\1\3\1\0\1\3\4\0\2\3"+
            "\10\1\1\0\44\1\4\0\24\3\1\0\2\3\5\1\13\3\1\0"+
            "\44\3\11\0\1\3\71\0\53\20\24\21\1\20\12\4\6\0\6\20"+
            "\4\21\4\20\3\21\1\20\3\21\2\20\7\21\3\20\4\21\15\20"+
            "\14\21\1\20\1\21\12\4\4\21\2\20\46\1\1\0\1\1\5\0"+
            "\1\1\2\0\53\1\1\0\4\1\u0100\2\111\1\1\0\4\1\2\0"+
            "\7\1\1\0\1\1\1\0\4\1\2\0\51\1\1\0\4\1\2\0"+
            "\41\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0"+
            "\17\1\1\0\71\1\1\0\4\1\2\0\103\1\2\0\3\3\40\0"+
            "\20\1\20\0\125\1\14\0\u026c\1\2\0\21\1\1\0\32\1\5\0"+
            "\113\1\3\0\3\1\17\0\15\1\1\0\4\1\3\3\13\0\22\1"+
            "\3\3\13\0\22\1\2\3\14\0\15\1\1\0\3\1\1\0\2\3"+
            "\14\0\64\20\40\21\3\0\1\20\4\0\1\20\1\21\2\0\12\4"+
            "\41\0\4\3\1\0\12\4\6\0\130\1\10\0\51\1\1\3\1\1"+
            "\5\0\106\1\12\0\35\1\3\0\14\3\4\0\14\3\12\0\12\4"+
            "\36\20\2\0\5\20\13\0\54\20\4\0\21\21\7\20\2\21\6\0"+
            "\12\4\1\20\3\0\2\20\40\0\27\1\5\3\4\0\65\20\12\21"+
            "\1\0\35\21\2\0\1\3\12\4\6\0\12\4\6\0\16\20\122\0"+
            "\5\3\57\1\21\3\7\1\4\0\12\4\21\0\11\3\14\0\3\3"+
            "\36\1\15\3\2\1\12\4\54\1\16\3\14\0\44\1\24\3\10\0"+
            "\12\4\3\0\3\1\12\4\44\1\122\0\3\3\1\0\25\3\4\1"+
            "\1\3\4\1\3\3\2\1\11\0\300\1\47\3\25\0\4\3\u0116\1"+
            "\2\0\6\1\2\0\46\1\2\0\6\1\2\0\10\1\1\0\1\1"+
            "\1\0\1\1\1\0\1\1\1\0\37\1\2\0\65\1\1\0\7\1"+
            "\1\0\1\1\3\0\3\1\1\0\7\1\3\0\4\1\2\0\6\1"+
            "\4\0\15\1\5\0\3\1\1\0\7\1\17\0\4\3\10\0\2\10"+
            "\12\0\1\10\2\0\1\6\2\0\5\3\20\0\2\11\3\0\1\7"+
            "\17\0\1\11\13\0\5\3\1\0\12\3\1\0\1\1\15\0\1\1"+
            "\20\0\15\1\63\0\41\3\21\0\1\1\4\0\1\1\2\0\12\1"+
            "\1\0\1\1\3\0\5\1\6\0\1\1\1\0\1\1\1\0\1\1"+
            "\1\0\4\1\1\0\13\1\2\0\4\1\5\0\5\1\4\0\1\1"+
            "\21\0\51\1\u032d\0\64\1\u0716\0\57\1\1\0\57\1\1\0\205\1"+
            "\6\0\4\1\3\3\2\1\14\0\46\1\1\0\1\1\5\0\1\1"+
            "\2\0\70\1\7\0\1\1\17\0\1\3\27\1\11\0\7\1\1\0"+
            "\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0"+
            "\7\1\1\0\7\1\1\0\40\3\57\0\1\1\120\0\32\12\1\0"+
            "\131\12\14\0\326\12\57\0\1\1\1\0\1\12\31\0\11\12\6\3"+
            "\1\0\5\5\2\0\3\12\1\1\1\1\4\0\126\13\2\0\2\3"+
            "\2\5\3\13\133\5\1\0\4\5\5\0\51\1\3\0\136\2\21\0"+
            "\33\1\65\0\20\5\320\0\57\5\1\0\130\5\250\0\u19b6\12\112\0"+
            "\u51cd\12\63\0\u048d\1\103\0\56\1\2\0\u010d\1\3\0\20\1\12\4"+
            "\2\1\24\0\57\1\4\3\1\0\12\3\1\0\31\1\7\0\1\3"+
            "\120\1\2\3\45\0\11\1\2\0\147\1\2\0\4\1\1\0\4\1"+
            "\14\0\13\1\115\0\12\1\1\3\3\1\1\3\4\1\1\3\27\1"+
            "\5\3\30\0\64\1\14\0\2\3\62\1\21\3\13\0\12\4\6\0"+
            "\22\3\6\1\3\0\1\1\4\0\12\4\34\1\10\3\2\0\27\1"+
            "\15\3\14\0\35\2\3\0\4\3\57\1\16\3\16\0\1\1\12\4"+
            "\46\0\51\1\16\3\11\0\3\1\1\3\10\1\2\3\2\0\12\4"+
            "\6\0\33\20\1\21\4\0\60\20\1\21\1\20\3\21\2\20\2\21"+
            "\5\20\2\21\1\20\1\21\1\20\30\0\5\20\13\1\5\3\2\0"+
            "\3\1\2\3\12\0\6\1\2\0\6\1\2\0\6\1\11\0\7\1"+
            "\1\0\7\1\221\0\43\1\10\3\1\0\2\3\2\0\12\4\6\0"+
            "\u2ba4\2\14\0\27\2\4\0\61\2\u2104\0\u016e\12\2\0\152\12\46\0"+
            "\7\1\14\0\5\1\5\0\1\16\1\3\12\16\1\0\15\16\1\0"+
            "\5\16\1\0\1\16\1\0\2\16\1\0\2\16\1\0\12\16\142\1"+
            "\41\0\u016b\1\22\0\100\1\2\0\66\1\50\0\14\1\4\0\20\3"+
            "\1\7\2\0\1\6\1\7\13\0\7\3\14\0\2\11\30\0\3\11"+
            "\1\7\1\0\1\10\1\0\1\7\1\6\32\0\5\1\1\0\207\1"+
            "\2\0\1\3\7\0\1\10\4\0\1\7\1\0\1\10\1\0\12\4"+
            "\1\6\1\7\5\0\32\1\4\0\1\11\1\0\32\1\13\0\70\5"+
            "\2\3\37\2\3\0\6\2\2\0\6\2\2\0\6\2\2\0\3\2"+
            "\34\0\3\3\4\0\14\1\1\0\32\1\1\0\23\1\1\0\2\1"+
            "\1\0\17\1\2\0\16\1\42\0\173\1\105\0\65\1\210\0\1\3"+
            "\202\0\35\1\3\0\61\1\57\0\37\1\21\0\33\1\65\0\36\1"+
            "\2\0\44\1\4\0\10\1\1\0\5\1\52\0\236\1\2\0\12\4"+
            "\u0356\0\6\1\2\0\1\1\1\0\54\1\1\0\2\1\3\0\1\1"+
            "\2\0\27\1\252\0\26\1\12\0\32\1\106\0\70\1\6\0\2\1"+
            "\100\0\1\1\3\3\1\0\2\3\5\0\4\3\4\1\1\0\3\1"+
            "\1\0\33\1\4\0\3\3\4\0\1\3\40\0\35\1\203\0\66\1"+
            "\12\0\26\1\12\0\23\1\215\0\111\1\u03b7\0\3\3\65\1\17\3"+
            "\37\0\12\4\20\0\3\3\55\1\13\3\2\0\1\3\22\0\31\1"+
            "\7\0\12\4\6\0\3\3\44\1\16\3\1\0\12\4\100\0\3\3"+
            "\60\1\16\3\4\1\13\0\12\4\u04a6\0\53\1\15\3\10\0\12\4"+
            "\u0936\0\u036f\1\221\0\143\1\u0b9d\0\u042f\1\u33d1\0\u0239\1\u04c7\0\105\1"+
            "\13\0\1\1\56\3\20\0\4\3\15\1\u4060\0\1\5\1\13\u2163\0"+
            "\5\3\3\0\26\3\2\0\7\3\36\0\4\3\224\0\3\3\u01bb\0"+
            "\125\1\1\0\107\1\1\0\2\1\2\0\1\1\2\0\2\1\2\0"+
            "\4\1\1\0\14\1\1\0\1\1\1\0\7\1\1\0\101\1\1\0"+
            "\4\1\2\0\10\1\1\0\7\1\1\0\34\1\1\0\4\1\1\0"+
            "\5\1\1\0\1\1\3\0\7\1\1\0\u0154\1\2\0\31\1\1\0"+
            "\31\1\1\0\37\1\1\0\31\1\1\0\37\1\1\0\31\1\1\0"+
            "\37\1\1\0\31\1\1\0\37\1\1\0\31\1\1\0\10\1\2\0"+
            "\62\4\u1600\0\4\1\1\0\33\1\1\0\2\1\1\0\1\1\2\0"+
            "\1\1\1\0\12\1\1\0\4\1\1\0\1\1\1\0\1\1\6\0"+
            "\1\1\4\0\1\1\1\0\1\1\1\0\1\1\1\0\3\1\1\0"+
            "\2\1\1\0\1\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0"+
            "\1\1\1\0\1\1\1\0\2\1\1\0\1\1\2\0\4\1\1\0"+
            "\7\1\1\0\4\1\1\0\4\1\1\0\1\1\1\0\12\1\1\0"+
            "\21\1\5\0\3\1\1\0\5\1\1\0\21\1\u032a\0\32\17\1\13"+
            "\u0dff\0\ua6d7\12\51\0\u1035\12\13\0\336\12\u3fe2\0\u021e\12\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
            "\1\3\36\0\140\3\200\0\360\3\uffff\0\uffff\0\ufe12\0";

          /** 
           * Translates characters to character classes
           *\/
          private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

          /** 
           * Translates DFA states to action switch labels.
           *\/
          private static final int [] ZZ_ACTION = zzUnpackAction();

          private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
            "\1\7\1\2\1\1\1\10\1\2\1\0\1\2\1\0"+
            "\1\4\1\0\2\2\2\0\1\1\1\0";

          private static int [] zzUnpackAction() {
            int [] result = new int[24];
            int offset = 0;
            offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
            return result;
          }

          private static int zzUnpackAction(String packed, int offset, int [] result) {
            int i = 0;       /* index in packed string  *\/
            int j = offset;  /* index in unpacked array *\/
            int l = packed.length();
            while (i < l) {
              int count = packed.charAt(i++);
              int value = packed.charAt(i++);
              do result[j++] = value; while (--count > 0);
            }
            return j;
          }


          /** 
           * Translates a state to a row index in the transition table
           *\/
          private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

          private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\22\0\44\0\66\0\110\0\132\0\154\0\176"+
            "\0\220\0\242\0\264\0\306\0\330\0\352\0\374\0\u010e"+
            "\0\u0120\0\154\0\u0132\0\u0144\0\u0156\0\264\0\u0168\0\u017a";

          private static int [] zzUnpackRowMap() {
            int [] result = new int[24];
            int offset = 0;
            offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
            return result;
          }

          private static int zzUnpackRowMap(String packed, int offset, int [] result) {
            int i = 0;  /* index in packed string  *\/
            int j = offset;  /* index in unpacked array *\/
            int l = packed.length();
            while (i < l) {
              int high = packed.charAt(i++) << 16;
              result[j++] = high | packed.charAt(i++);
            }
            return j;
          }

          /** 
           * The transition table of the DFA
           *\/
          private static final int [] ZZ_TRANS = zzUnpackTrans();

          private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\1\3\1\4\1\2\1\5\1\6\3\2\1\7"+
            "\1\10\1\11\2\2\1\12\1\13\2\14\23\0\3\3"+
            "\1\15\1\0\1\16\1\0\1\16\1\17\2\0\1\16"+
            "\1\0\1\12\2\0\1\3\1\0\1\3\2\4\1\15"+
            "\1\0\1\16\1\0\1\16\1\17\2\0\1\16\1\0"+
            "\1\12\2\0\1\4\1\0\2\3\2\5\2\0\2\20"+
            "\1\21\2\0\1\20\1\0\1\12\2\0\1\5\3\0"+
            "\1\6\1\0\1\6\3\0\1\17\7\0\1\6\1\0"+
            "\2\3\1\22\1\5\1\23\3\0\1\22\4\0\1\12"+
            "\2\0\1\22\3\0\1\10\15\0\1\10\3\0\1\11"+
            "\15\0\1\11\1\0\2\3\1\12\1\15\1\0\1\16"+
            "\1\0\1\16\1\17\2\0\1\24\1\25\1\12\2\0"+
            "\1\12\3\0\1\26\13\0\1\27\1\0\1\26\3\0"+
            "\1\14\14\0\2\14\1\0\2\3\2\15\2\0\2\30"+
            "\1\17\2\0\1\30\1\0\1\12\2\0\1\15\1\0"+
            "\2\3\1\16\12\0\1\3\2\0\1\16\1\0\2\3"+
            "\1\17\1\15\1\23\3\0\1\17\4\0\1\12\2\0"+
            "\1\17\3\0\1\20\1\5\14\0\1\20\1\0\2\3"+
            "\1\21\1\5\1\23\3\0\1\21\4\0\1\12\2\0"+
            "\1\21\3\0\1\23\1\0\1\23\3\0\1\17\7\0"+
            "\1\23\1\0\2\3\1\24\1\15\4\0\1\17\4\0"+
            "\1\12\2\0\1\24\3\0\1\25\12\0\1\24\2\0"+
            "\1\25\3\0\1\27\13\0\1\27\1\0\1\27\3\0"+
            "\1\30\1\15\14\0\1\30";

          private static int [] zzUnpackTrans() {
            int [] result = new int[396];
            int offset = 0;
            offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
            return result;
          }

          private static int zzUnpackTrans(String packed, int offset, int [] result) {
            int i = 0;       /* index in packed string  *\/
            int j = offset;  /* index in unpacked array *\/
            int l = packed.length();
            while (i < l) {
              int count = packed.charAt(i++);
              int value = packed.charAt(i++);
              value--;
              do result[j++] = value; while (--count > 0);
            }
            return j;
          }


          /* error codes *\/
          private static final int ZZ_UNKNOWN_ERROR = 0;
          private static final int ZZ_NO_MATCH = 1;
          private static final int ZZ_PUSHBACK_2BIG = 2;

          /* error messages for the codes above *\/
          private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
          };

          /**
           * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
           *\/
          private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

          private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\11\13\1\1\0\1\1\1\0\1\1\1\0"+
            "\2\1\2\0\1\1\1\0";

          private static int [] zzUnpackAttribute() {
            int [] result = new int[24];
            int offset = 0;
            offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
            return result;
          }

          private static int zzUnpackAttribute(String packed, int offset, int [] result) {
            int i = 0;       /* index in packed string  *\/
            int j = offset;  /* index in unpacked array *\/
            int l = packed.length();
            while (i < l) {
              int count = packed.charAt(i++);
              int value = packed.charAt(i++);
              do result[j++] = value; while (--count > 0);
            }
            return j;
          }

          /** the input device *\/
          private java.io.Reader zzReader;

          /** the current state of the DFA *\/
          private int zzState;

          /** the current lexical state *\/
          private int zzLexicalState = YYINITIAL;

          /** this buffer contains the current text to be matched and is
              the source of the yytext() string *\/
          private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

          /** the textposition at the last accepting state *\/
          private int zzMarkedPos;

          /** the current text position in the buffer *\/
          private int zzCurrentPos;

          /** startRead marks the beginning of the yytext() string in the buffer *\/
          private int zzStartRead;

          /** endRead marks the last character in the buffer, that has been read
              from input *\/
          private int zzEndRead;

          /** number of newlines encountered up to the start of the matched text *\/
          private int yyline;

          /** the number of characters up to the start of the matched text *\/
          private int yychar;

          /**
           * the number of characters from the last newline up to the start of the 
           * matched text
           *\/
          private int yycolumn;

          /** 
           * zzAtBOL == true <=> the scanner is currently at the beginning of a line
           *\/
          private boolean zzAtBOL = true;

          /** zzAtEOF == true <=> the scanner is at the EOF *\/
          private boolean zzAtEOF;

          /** denotes if the user-EOF-code has already been executed *\/
          private boolean zzEOFDone;
          
          /** 
           * The number of occupied positions in zzBuffer beyond zzEndRead.
           * When a lead/high surrogate has been read from the input stream
           * into the final zzBuffer position, this will have a value of 1;
           * otherwise, it will have a value of 0.
           *\/
          private int zzFinalHighSurrogate = 0;

          /* user code: *\/
          /** Alphanumeric sequences *\/
          public static final int WORD_TYPE = StandardTokenizer.ALPHANUM;
          
          /** Numbers *\/
          public static final int NUMERIC_TYPE = StandardTokenizer.NUM;
          
          /**
           * Chars in class \p{Line_Break = Complex_Context} are from South East Asian
           * scripts (Thai, Lao, Myanmar, Khmer, etc.).  Sequences of these are kept 
           * together as as a single token rather than broken up, because the logic
           * required to break them at word boundaries is too complex for UAX#29.
           * <p>
           * See Unicode Line Breaking Algorithm: http://www.unicode.org/reports/tr14/#SA
           *\/
          public static final int SOUTH_EAST_ASIAN_TYPE = StandardTokenizer.SOUTHEAST_ASIAN;
          
          public static final int IDEOGRAPHIC_TYPE = StandardTokenizer.IDEOGRAPHIC;
          
          public static final int HIRAGANA_TYPE = StandardTokenizer.HIRAGANA;
          
          public static final int KATAKANA_TYPE = StandardTokenizer.KATAKANA;
          
          public static final int HANGUL_TYPE = StandardTokenizer.HANGUL;

          public final int yychar()
          {
            return yychar;
          }

          /**
           * Fills CharTermAttribute with the current token text.
           *\/
          public final void getText(CharTermAttribute t) {
            t.copyBuffer(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
          }
          
          /**
           * Sets the scanner buffer size in chars
           *\/
           public final void setBufferSize(int numChars) {
             ZZ_BUFFERSIZE = numChars;
             char[] newZzBuffer = new char[ZZ_BUFFERSIZE];
             System.arraycopy(zzBuffer, 0, newZzBuffer, 0, Math.min(zzBuffer.length, ZZ_BUFFERSIZE));
             zzBuffer = newZzBuffer;
           }


          /**
           * Creates a new scanner
           *
           * @param   in  the java.io.Reader to read input from.
           *\/
          public StandardTokenizerImpl(java.io.Reader in) {
            this.zzReader = in;
          }


          /** 
           * Unpacks the compressed character translation table.
           *
           * @param packed   the packed character translation table
           * @return         the unpacked character translation table
           *\/
          private static char [] zzUnpackCMap(String packed) {
            char [] map = new char[0x110000];
            int i = 0;  /* index in packed string  *\/
            int j = 0;  /* index in unpacked array *\/
            while (i < 2836) {
              int  count = packed.charAt(i++);
              char value = packed.charAt(i++);
              do map[j++] = value; while (--count > 0);
            }
            return map;
          }


          /**
           * Refills the input buffer.
           *
           * @return      <code>false</code>, iff there was new input.
           * 
           * @exception   java.io.IOException  if any I/O-Error occurs
           *\/
          private boolean zzRefill() throws java.io.IOException {

            /* first: make room (if you can) *\/
            if (zzStartRead > 0) {
              zzEndRead += zzFinalHighSurrogate;
              zzFinalHighSurrogate = 0;
              System.arraycopy(zzBuffer, zzStartRead,
                               zzBuffer, 0,
                               zzEndRead-zzStartRead);

              /* translate stored positions *\/
              zzEndRead-= zzStartRead;
              zzCurrentPos-= zzStartRead;
              zzMarkedPos-= zzStartRead;
              zzStartRead = 0;
            }


            /* fill the buffer with new input *\/
            int requested = zzBuffer.length - zzEndRead - zzFinalHighSurrogate;           
            int totalRead = 0;
            while (totalRead < requested) {
              int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
              if (numRead == -1) {
                break;
              }
              totalRead += numRead;
            }

            if (totalRead > 0) {
              zzEndRead += totalRead;
              if (totalRead == requested) { /* possibly more input available *\/
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                  --zzEndRead;
                  zzFinalHighSurrogate = 1;
                  if (totalRead == 1) { return true; }
                }
              }
              return false;
            }

            // totalRead = 0: End of stream
            return true;
          }

            
          /**
           * Closes the input stream.
           *\/
          public final void yyclose() throws java.io.IOException {
            zzAtEOF = true;            /* indicate end of file *\/
            zzEndRead = zzStartRead;  /* invalidate buffer    *\/

            if (zzReader != null)
              zzReader.close();
          }


          /**
           * Resets the scanner to read from a new input stream.
           * Does not close the old reader.
           *
           * All internal variables are reset, the old input stream 
           * <b>cannot</b> be reused (internal buffer is discarded and lost).
           * Lexical state is set to <tt>ZZ_INITIAL</tt>.
           *
           * Internal scan buffer is resized down to its initial length, if it has grown.
           *
           * @param reader   the new input stream 
           *\/
          public final void yyreset(java.io.Reader reader) {
            zzReader = reader;
            zzAtBOL  = true;
            zzAtEOF  = false;
            zzEOFDone = false;
            zzEndRead = zzStartRead = 0;
            zzCurrentPos = zzMarkedPos = 0;
            zzFinalHighSurrogate = 0;
            yyline = yychar = yycolumn = 0;
            zzLexicalState = YYINITIAL;
            if (zzBuffer.length > ZZ_BUFFERSIZE)
              zzBuffer = new char[ZZ_BUFFERSIZE];
          }


          /**
           * Returns the current lexical state.
           *\/
          public final int yystate() {
            return zzLexicalState;
          }


          /**
           * Enters a new lexical state
           *
           * @param newState the new lexical state
           *\/
          public final void yybegin(int newState) {
            zzLexicalState = newState;
          }


          /**
           * Returns the text matched by the current regular expression.
           *\/
          public final String yytext() {
            return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
          }


          /**
           * Returns the character at position <tt>pos</tt> from the 
           * matched text. 
           * 
           * It is equivalent to yytext().charAt(pos), but faster
           *
           * @param pos the position of the character to fetch. 
           *            A value from 0 to yylength()-1.
           *
           * @return the character at position pos
           *\/
          public final char yycharat(int pos) {
            return zzBuffer[zzStartRead+pos];
          }


          /**
           * Returns the length of the matched text region.
           *\/
          public final int yylength() {
            return zzMarkedPos-zzStartRead;
          }


          /**
           * Reports an error that occured while scanning.
           *
           * In a wellformed scanner (no or only correct usage of 
           * yypushback(int) and a match-all fallback rule) this method 
           * will only be called with things that "Can't Possibly Happen".
           * If this method is called, something is seriously wrong
           * (e.g. a JFlex bug producing a faulty scanner etc.).
           *
           * Usual syntax/scanner level error handling should be done
           * in error fallback rules.
           *
           * @param   errorCode  the code of the errormessage to display
           *\/
          private void zzScanError(int errorCode) {
            String message;
            try {
              message = ZZ_ERROR_MSG[errorCode];
            }
            catch (ArrayIndexOutOfBoundsException e) {
              message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
            }

            throw new Error(message);
          } 


          /**
           * Pushes the specified amount of characters back into the input stream.
           *
           * They will be read again by then next call of the scanning method
           *
           * @param number  the number of characters to be read again.
           *                This number must not be greater than yylength()!
           *\/
          public void yypushback(int number)  {
            if ( number > yylength() )
              zzScanError(ZZ_PUSHBACK_2BIG);

            zzMarkedPos -= number;
          }


          /**
           * Resumes scanning until the next regular expression is matched,
           * the end of input is encountered or an I/O-Error occurs.
           *
           * @return      the next token
           * @exception   java.io.IOException  if any I/O-Error occurs
           *\/
          public int getNextToken() throws java.io.IOException {
            int zzInput;
            int zzAction;

            // cached fields:
            int zzCurrentPosL;
            int zzMarkedPosL;
            int zzEndReadL = zzEndRead;
            char [] zzBufferL = zzBuffer;
            char [] zzCMapL = ZZ_CMAP;

            int [] zzTransL = ZZ_TRANS;
            int [] zzRowMapL = ZZ_ROWMAP;
            int [] zzAttrL = ZZ_ATTRIBUTE;

            while (true) {
              zzMarkedPosL = zzMarkedPos;

              yychar+= zzMarkedPosL-zzStartRead;

              zzAction = -1;

              zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
          
              zzState = ZZ_LEXSTATE[zzLexicalState];

              // set up zzAction for empty match case:
              int zzAttributes = zzAttrL[zzState];
              if ( (zzAttributes & 1) == 1 ) {
                zzAction = zzState;
              }


              zzForAction: {
                while (true) {
            
                  if (zzCurrentPosL < zzEndReadL) {
                    zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                    zzCurrentPosL += Character.charCount(zzInput);
                  }
                  else if (zzAtEOF) {
                    zzInput = YYEOF;
                    break zzForAction;
                  }
                  else {
                    // store back cached positions
                    zzCurrentPos  = zzCurrentPosL;
                    zzMarkedPos   = zzMarkedPosL;
                    boolean eof = zzRefill();
                    // get translated positions and possibly new buffer
                    zzCurrentPosL  = zzCurrentPos;
                    zzMarkedPosL   = zzMarkedPos;
                    zzBufferL      = zzBuffer;
                    zzEndReadL     = zzEndRead;
                    if (eof) {
                      zzInput = YYEOF;
                      break zzForAction;
                    }
                    else {
                      zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                      zzCurrentPosL += Character.charCount(zzInput);
                    }
                  }
                  int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
                  if (zzNext == -1) break zzForAction;
                  zzState = zzNext;

                  zzAttributes = zzAttrL[zzState];
                  if ( (zzAttributes & 1) == 1 ) {
                    zzAction = zzState;
                    zzMarkedPosL = zzCurrentPosL;
                    if ( (zzAttributes & 8) == 8 ) break zzForAction;
                  }

                }
              }

              // store back cached position
              zzMarkedPos = zzMarkedPosL;

              switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 1: 
                  { /* Break so we don't hit fall-through warning: *\/ break; /* Not numeric, word, ideographic, hiragana, or SE Asian -- ignore it. *\/
                  }
                case 9: break;
                case 2: 
                  { return WORD_TYPE;
                  }
                case 10: break;
                case 3: 
                  { return HANGUL_TYPE;
                  }
                case 11: break;
                case 4: 
                  { return NUMERIC_TYPE;
                  }
                case 12: break;
                case 5: 
                  { return KATAKANA_TYPE;
                  }
                case 13: break;
                case 6: 
                  { return IDEOGRAPHIC_TYPE;
                  }
                case 14: break;
                case 7: 
                  { return HIRAGANA_TYPE;
                  }
                case 15: break;
                case 8: 
                  { return SOUTH_EAST_ASIAN_TYPE;
                  }
                case 16: break;
                default: 
                  if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                    zzAtEOF = true;
                      {
                        return StandardTokenizerInterface.YYEOF;
                      }
                  } 
                  else {
                    zzScanError(ZZ_NO_MATCH);
                  }
              }
            }
          }


        }


        /*
         * Licensed to the Apache Software Foundation (ASF) under one or more
         * contributor license agreements.  See the NOTICE file distributed with
         * this work for additional information regarding copyright ownership.
         * The ASF licenses this file to You under the Apache License, Version 2.0
         * (the "License"); you may not use this file except in compliance with
         * the License.  You may obtain a copy of the License at
         *
         *     http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         *\/


        /**
         * Filters {@link StandardTokenizer} with {@link StandardFilter}, {@link
         * LowerCaseFilter} and {@link StopFilter}, using a list of
         * English stop words.
         *
         * <a name="version"/>
         * <p>You may specify the {@link Version}
         * compatibility when creating StandardAnalyzer:
         * <ul>
         *   <li> As of 3.4, Hiragana and Han characters are no longer wrongly split
         *        from their combining characters. If you use a previous version number,
         *        you get the exact broken behavior for backwards compatibility.
         *   <li> As of 3.1, StandardTokenizer implements Unicode text segmentation,
         *        and StopFilter correctly handles Unicode 4.0 supplementary characters
         *        in stopwords.  {@link ClassicTokenizer} and {@link ClassicAnalyzer}
         *        are the pre-3.1 implementations of StandardTokenizer and
         *        StandardAnalyzer.
         * </ul>
         *\/
        public final class StandardAnalyzer extends StopwordAnalyzerBase {
          
          /** Default maximum allowed token length *\/
          public static final int DEFAULT_MAX_TOKEN_LENGTH = 255;

          private int maxTokenLength = DEFAULT_MAX_TOKEN_LENGTH;

          /** An unmodifiable set containing some common English words that are usually not
          useful for searching. *\/
          public static final CharArraySet STOP_WORDS_SET = StopAnalyzer.ENGLISH_STOP_WORDS_SET; 

          /** Builds an analyzer with the given stop words.
           * @param stopWords stop words *\/
          public StandardAnalyzer(CharArraySet stopWords) {
            super(stopWords);
          }

          /**
           * @deprecated Use {@link #StandardAnalyzer(CharArraySet)}
           *\/
          @Deprecated
          public StandardAnalyzer(Version matchVersion, CharArraySet stopWords) {
            super(matchVersion, stopWords);
          }

          /** Builds an analyzer with the default stop words ({@link #STOP_WORDS_SET}).
           *\/
          public StandardAnalyzer() {
            this(STOP_WORDS_SET);
          }

          /**
           * @deprecated Use {@link #StandardAnalyzer()}
           *\/
          @Deprecated
          public StandardAnalyzer(Version matchVersion) {
            this(matchVersion, STOP_WORDS_SET);
          }

          /** Builds an analyzer with the stop words from the given reader.
           * @see WordlistLoader#getWordSet(Reader)
           * @param stopwords Reader to read stop words from *\/
          public StandardAnalyzer(Reader stopwords) throws IOException {
            this(loadStopwordSet(stopwords));
          }

          /**
           * @deprecated Use {@link #StandardAnalyzer()}
           *\/
          @Deprecated
          public StandardAnalyzer(Version matchVersion, Reader stopwords) throws IOException {
            this(matchVersion, loadStopwordSet(stopwords, matchVersion));
          }

          /**
           * Set maximum allowed token length.  If a token is seen
           * that exceeds this length then it is discarded.  This
           * setting only takes effect the next time tokenStream or
           * tokenStream is called.
           *\/
          public void setMaxTokenLength(int length) {
            maxTokenLength = length;
          }
            
          /**
           * @see #setMaxTokenLength
           *\/
          public int getMaxTokenLength() {
            return maxTokenLength;
          }

          @Override
          protected TokenStreamComponents createComponents(final String fieldName, final Reader reader) {
            final StandardTokenizer src = new StandardTokenizer(getVersion(), reader);
            src.setMaxTokenLength(maxTokenLength);
            TokenStream tok = new StandardFilter(getVersion(), src);
            tok = new LowerCaseFilter(getVersion(), tok);
            tok = new StopFilter(getVersion(), tok, stopwords);
            return new TokenStreamComponents(src, tok) {
              @Override
              protected void setReader(final Reader reader) throws IOException {
                src.setMaxTokenLength(StandardAnalyzer.this.maxTokenLength);
                super.setReader(reader);
              }
            };
          }
        }
      */}).replace(/\*\\\//g, '*/');
      assert.deepEqual(
        JavaParser.parse(src)
        ,
        {
            node: "CompilationUnit",
            package: {
                node: "PackageDeclaration",
                annotations: [],
                name: {
                    node: "QualifiedName",
                    qualifier: {
                        node: "QualifiedName",
                        qualifier: {
                            node: "QualifiedName",
                            qualifier: {
                                node: "QualifiedName",
                                qualifier: {
                                    node: "SimpleName",
                                    identifier: "org"
                                },
                                name: {
                                    node: "SimpleName",
                                    identifier: "apache"
                                }
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "lucene"
                            }
                        },
                        name: {
                            node: "SimpleName",
                            identifier: "analysis"
                        }
                    },
                    name: {
                        node: "SimpleName",
                        identifier: "standard"
                    }
                }
            },
            imports: [
                {
                    node: "ImportDeclaration",
                    static: false,
                    name: {
                        node: "QualifiedName",
                        qualifier: {
                            node: "QualifiedName",
                            qualifier: {
                                node: "SimpleName",
                                identifier: "java"
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "io"
                            }
                        },
                        name: {
                            node: "SimpleName",
                            identifier: "IOException"
                        }
                    },
                    onDemand: false
                },
                {
                    node: "ImportDeclaration",
                    static: false,
                    name: {
                        node: "QualifiedName",
                        qualifier: {
                            node: "QualifiedName",
                            qualifier: {
                                node: "SimpleName",
                                identifier: "java"
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "io"
                            }
                        },
                        name: {
                            node: "SimpleName",
                            identifier: "Reader"
                        }
                    },
                    onDemand: false
                },
                {
                    node: "ImportDeclaration",
                    static: false,
                    name: {
                        node: "QualifiedName",
                        qualifier: {
                            node: "QualifiedName",
                            qualifier: {
                                node: "QualifiedName",
                                qualifier: {
                                    node: "QualifiedName",
                                    qualifier: {
                                        node: "SimpleName",
                                        identifier: "org"
                                    },
                                    name: {
                                        node: "SimpleName",
                                        identifier: "apache"
                                    }
                                },
                                name: {
                                    node: "SimpleName",
                                    identifier: "lucene"
                                }
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "analysis"
                            }
                        },
                        name: {
                            node: "SimpleName",
                            identifier: "Tokenizer"
                        }
                    },
                    onDemand: false
                },
                {
                    node: "ImportDeclaration",
                    static: false,
                    name: {
                        node: "QualifiedName",
                        qualifier: {
                            node: "QualifiedName",
                            qualifier: {
                                node: "QualifiedName",
                                qualifier: {
                                    node: "QualifiedName",
                                    qualifier: {
                                        node: "QualifiedName",
                                        qualifier: {
                                            node: "QualifiedName",
                                            qualifier: {
                                                node: "SimpleName",
                                                identifier: "org"
                                            },
                                            name: {
                                                node: "SimpleName",
                                                identifier: "apache"
                                            }
                                        },
                                        name: {
                                            node: "SimpleName",
                                            identifier: "lucene"
                                        }
                                    },
                                    name: {
                                        node: "SimpleName",
                                        identifier: "analysis"
                                    }
                                },
                                name: {
                                    node: "SimpleName",
                                    identifier: "standard"
                                }
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "std31"
                            }
                        },
                        name: {
                            node: "SimpleName",
                            identifier: "StandardTokenizerImpl31"
                        }
                    },
                    onDemand: false
                },
                {
                    node: "ImportDeclaration",
                    static: false,
                    name: {
                        node: "QualifiedName",
                        qualifier: {
                            node: "QualifiedName",
                            qualifier: {
                                node: "QualifiedName",
                                qualifier: {
                                    node: "QualifiedName",
                                    qualifier: {
                                        node: "QualifiedName",
                                        qualifier: {
                                            node: "QualifiedName",
                                            qualifier: {
                                                node: "SimpleName",
                                                identifier: "org"
                                            },
                                            name: {
                                                node: "SimpleName",
                                                identifier: "apache"
                                            }
                                        },
                                        name: {
                                            node: "SimpleName",
                                            identifier: "lucene"
                                        }
                                    },
                                    name: {
                                        node: "SimpleName",
                                        identifier: "analysis"
                                    }
                                },
                                name: {
                                    node: "SimpleName",
                                    identifier: "standard"
                                }
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "std34"
                            }
                        },
                        name: {
                            node: "SimpleName",
                            identifier: "StandardTokenizerImpl34"
                        }
                    },
                    onDemand: false
                },
                {
                    node: "ImportDeclaration",
                    static: false,
                    name: {
                        node: "QualifiedName",
                        qualifier: {
                            node: "QualifiedName",
                            qualifier: {
                                node: "QualifiedName",
                                qualifier: {
                                    node: "QualifiedName",
                                    qualifier: {
                                        node: "QualifiedName",
                                        qualifier: {
                                            node: "QualifiedName",
                                            qualifier: {
                                                node: "SimpleName",
                                                identifier: "org"
                                            },
                                            name: {
                                                node: "SimpleName",
                                                identifier: "apache"
                                            }
                                        },
                                        name: {
                                            node: "SimpleName",
                                            identifier: "lucene"
                                        }
                                    },
                                    name: {
                                        node: "SimpleName",
                                        identifier: "analysis"
                                    }
                                },
                                name: {
                                    node: "SimpleName",
                                    identifier: "standard"
                                }
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "std40"
                            }
                        },
                        name: {
                            node: "SimpleName",
                            identifier: "StandardTokenizerImpl40"
                        }
                    },
                    onDemand: false
                },
                {
                    node: "ImportDeclaration",
                    static: false,
                    name: {
                        node: "QualifiedName",
                        qualifier: {
                            node: "QualifiedName",
                            qualifier: {
                                node: "QualifiedName",
                                qualifier: {
                                    node: "QualifiedName",
                                    qualifier: {
                                        node: "QualifiedName",
                                        qualifier: {
                                            node: "SimpleName",
                                            identifier: "org"
                                        },
                                        name: {
                                            node: "SimpleName",
                                            identifier: "apache"
                                        }
                                    },
                                    name: {
                                        node: "SimpleName",
                                        identifier: "lucene"
                                    }
                                },
                                name: {
                                    node: "SimpleName",
                                    identifier: "analysis"
                                }
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "tokenattributes"
                            }
                        },
                        name: {
                            node: "SimpleName",
                            identifier: "CharTermAttribute"
                        }
                    },
                    onDemand: false
                },
                {
                    node: "ImportDeclaration",
                    static: false,
                    name: {
                        node: "QualifiedName",
                        qualifier: {
                            node: "QualifiedName",
                            qualifier: {
                                node: "QualifiedName",
                                qualifier: {
                                    node: "QualifiedName",
                                    qualifier: {
                                        node: "QualifiedName",
                                        qualifier: {
                                            node: "SimpleName",
                                            identifier: "org"
                                        },
                                        name: {
                                            node: "SimpleName",
                                            identifier: "apache"
                                        }
                                    },
                                    name: {
                                        node: "SimpleName",
                                        identifier: "lucene"
                                    }
                                },
                                name: {
                                    node: "SimpleName",
                                    identifier: "analysis"
                                }
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "tokenattributes"
                            }
                        },
                        name: {
                            node: "SimpleName",
                            identifier: "OffsetAttribute"
                        }
                    },
                    onDemand: false
                },
                {
                    node: "ImportDeclaration",
                    static: false,
                    name: {
                        node: "QualifiedName",
                        qualifier: {
                            node: "QualifiedName",
                            qualifier: {
                                node: "QualifiedName",
                                qualifier: {
                                    node: "QualifiedName",
                                    qualifier: {
                                        node: "QualifiedName",
                                        qualifier: {
                                            node: "SimpleName",
                                            identifier: "org"
                                        },
                                        name: {
                                            node: "SimpleName",
                                            identifier: "apache"
                                        }
                                    },
                                    name: {
                                        node: "SimpleName",
                                        identifier: "lucene"
                                    }
                                },
                                name: {
                                    node: "SimpleName",
                                    identifier: "analysis"
                                }
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "tokenattributes"
                            }
                        },
                        name: {
                            node: "SimpleName",
                            identifier: "PositionIncrementAttribute"
                        }
                    },
                    onDemand: false
                },
                {
                    node: "ImportDeclaration",
                    static: false,
                    name: {
                        node: "QualifiedName",
                        qualifier: {
                            node: "QualifiedName",
                            qualifier: {
                                node: "QualifiedName",
                                qualifier: {
                                    node: "QualifiedName",
                                    qualifier: {
                                        node: "QualifiedName",
                                        qualifier: {
                                            node: "SimpleName",
                                            identifier: "org"
                                        },
                                        name: {
                                            node: "SimpleName",
                                            identifier: "apache"
                                        }
                                    },
                                    name: {
                                        node: "SimpleName",
                                        identifier: "lucene"
                                    }
                                },
                                name: {
                                    node: "SimpleName",
                                    identifier: "analysis"
                                }
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "tokenattributes"
                            }
                        },
                        name: {
                            node: "SimpleName",
                            identifier: "TypeAttribute"
                        }
                    },
                    onDemand: false
                },
                {
                    node: "ImportDeclaration",
                    static: false,
                    name: {
                        node: "QualifiedName",
                        qualifier: {
                            node: "QualifiedName",
                            qualifier: {
                                node: "QualifiedName",
                                qualifier: {
                                    node: "QualifiedName",
                                    qualifier: {
                                        node: "SimpleName",
                                        identifier: "org"
                                    },
                                    name: {
                                        node: "SimpleName",
                                        identifier: "apache"
                                    }
                                },
                                name: {
                                    node: "SimpleName",
                                    identifier: "lucene"
                                }
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "util"
                            }
                        },
                        name: {
                            node: "SimpleName",
                            identifier: "AttributeFactory"
                        }
                    },
                    onDemand: false
                },
                {
                    node: "ImportDeclaration",
                    static: false,
                    name: {
                        node: "QualifiedName",
                        qualifier: {
                            node: "QualifiedName",
                            qualifier: {
                                node: "QualifiedName",
                                qualifier: {
                                    node: "QualifiedName",
                                    qualifier: {
                                        node: "SimpleName",
                                        identifier: "org"
                                    },
                                    name: {
                                        node: "SimpleName",
                                        identifier: "apache"
                                    }
                                },
                                name: {
                                    node: "SimpleName",
                                    identifier: "lucene"
                                }
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "util"
                            }
                        },
                        name: {
                            node: "SimpleName",
                            identifier: "Version"
                        }
                    },
                    onDemand: false
                }
            ],
            types: [
                {
                    node: "TypeDeclaration",
                    modifiers: [
                        {
                            node: "Modifier",
                            keyword: "public"
                        },
                        {
                            node: "Modifier",
                            keyword: "final"
                        }
                    ],
                    interface: false,
                    name: {
                        node: "SimpleName",
                        identifier: "StandardTokenizer"
                    },
                    typeParameters: [],
                    superclassType: {
                        node: "SimpleType",
                        name: {
                            node: "SimpleName",
                            identifier: "Tokenizer"
                        }
                    },
                    superInterfaceTypes: [],
                    bodyDeclarations: [
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                }
                            ],
                            type: {
                                node: "SimpleType",
                                name: {
                                    node: "SimpleName",
                                    identifier: "StandardTokenizerInterface"
                                }
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "scanner"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "ALPHANUM"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "NumberLiteral",
                                        token: "0"
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "MarkerAnnotation",
                                    typeName: {
                                        node: "SimpleName",
                                        identifier: "Deprecated"
                                    }
                                },
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "APOSTROPHE"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "NumberLiteral",
                                        token: "1"
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "MarkerAnnotation",
                                    typeName: {
                                        node: "SimpleName",
                                        identifier: "Deprecated"
                                    }
                                },
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "ACRONYM"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "NumberLiteral",
                                        token: "2"
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "MarkerAnnotation",
                                    typeName: {
                                        node: "SimpleName",
                                        identifier: "Deprecated"
                                    }
                                },
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "COMPANY"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "NumberLiteral",
                                        token: "3"
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "EMAIL"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "NumberLiteral",
                                        token: "4"
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "MarkerAnnotation",
                                    typeName: {
                                        node: "SimpleName",
                                        identifier: "Deprecated"
                                    }
                                },
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "HOST"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "NumberLiteral",
                                        token: "5"
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "NUM"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "NumberLiteral",
                                        token: "6"
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "MarkerAnnotation",
                                    typeName: {
                                        node: "SimpleName",
                                        identifier: "Deprecated"
                                    }
                                },
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "CJ"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "NumberLiteral",
                                        token: "7"
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "MarkerAnnotation",
                                    typeName: {
                                        node: "SimpleName",
                                        identifier: "Deprecated"
                                    }
                                },
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "ACRONYM_DEP"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "NumberLiteral",
                                        token: "8"
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "SOUTHEAST_ASIAN"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "NumberLiteral",
                                        token: "9"
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "IDEOGRAPHIC"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "NumberLiteral",
                                        token: "10"
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "HIRAGANA"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "NumberLiteral",
                                        token: "11"
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "KATAKANA"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "NumberLiteral",
                                        token: "12"
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "HANGUL"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "NumberLiteral",
                                        token: "13"
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "ArrayType",
                                componentType: {
                                    node: "SimpleType",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "String"
                                    }
                                }
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "TOKEN_TYPES"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "ArrayCreation",
                                        type: {
                                            node: "ArrayType",
                                            componentType: {
                                                node: "SimpleType",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "String"
                                                }
                                            }
                                        },
                                        dimensions: [],
                                        initializer: {
                                            node: "ArrayInitializer",
                                            expressions: [
                                                {
                                                    node: "StringLiteral",
                                                    escapedValue: "\"<ALPHANUM>\""
                                                },
                                                {
                                                    node: "StringLiteral",
                                                    escapedValue: "\"<APOSTROPHE>\""
                                                },
                                                {
                                                    node: "StringLiteral",
                                                    escapedValue: "\"<ACRONYM>\""
                                                },
                                                {
                                                    node: "StringLiteral",
                                                    escapedValue: "\"<COMPANY>\""
                                                },
                                                {
                                                    node: "StringLiteral",
                                                    escapedValue: "\"<EMAIL>\""
                                                },
                                                {
                                                    node: "StringLiteral",
                                                    escapedValue: "\"<HOST>\""
                                                },
                                                {
                                                    node: "StringLiteral",
                                                    escapedValue: "\"<NUM>\""
                                                },
                                                {
                                                    node: "StringLiteral",
                                                    escapedValue: "\"<CJ>\""
                                                },
                                                {
                                                    node: "StringLiteral",
                                                    escapedValue: "\"<ACRONYM_DEP>\""
                                                },
                                                {
                                                    node: "StringLiteral",
                                                    escapedValue: "\"<SOUTHEAST_ASIAN>\""
                                                },
                                                {
                                                    node: "StringLiteral",
                                                    escapedValue: "\"<IDEOGRAPHIC>\""
                                                },
                                                {
                                                    node: "StringLiteral",
                                                    escapedValue: "\"<HIRAGANA>\""
                                                },
                                                {
                                                    node: "StringLiteral",
                                                    escapedValue: "\"<KATAKANA>\""
                                                },
                                                {
                                                    node: "StringLiteral",
                                                    escapedValue: "\"<HANGUL>\""
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "skippedPositions"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "maxTokenLength"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "QualifiedName",
                                        qualifier: {
                                            node: "SimpleName",
                                            identifier: "StandardAnalyzer"
                                        },
                                        name: {
                                            node: "SimpleName",
                                            identifier: "DEFAULT_MAX_TOKEN_LENGTH"
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "void"
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "setMaxTokenLength"
                            },
                            parameters: [
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "PrimitiveType",
                                        primitiveTypeCode: "int"
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "length"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "IfStatement",
                                        expression: {
                                            node: "InfixExpression",
                                            leftOperand: {
                                                node: "SimpleName",
                                                identifier: "length"
                                            },
                                            operator: "<",
                                            rightOperand: {
                                                node: "NumberLiteral",
                                                token: "1"
                                            },
                                        },
                                        thenStatement: {
                                            node: "Block",
                                            statements: [
                                                {
                                                    node: "ThrowStatement",
                                                    expression: {
                                                        node: "ClassInstanceCreation",
                                                        expression: null,
                                                        typeArguments: [],
                                                        type: {
                                                            node: "SimpleType",
                                                            name: {
                                                                node: "SimpleName",
                                                                identifier: "IllegalArgumentException"
                                                            }
                                                        },
                                                        arguments: [
                                                            {
                                                                node: "StringLiteral",
                                                                escapedValue: "\"maxTokenLength must be greater than zero\""
                                                            }
                                                        ],
                                                        anonymousClassDeclaration: null
                                                    }
                                                }
                                            ]
                                        },
                                        elseStatement: null
                                    },
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "Assignment",
                                            leftHandSide: {
                                                node: "FieldAccess",
                                                expression: {
                                                    node: "ThisExpression",
                                                    qualifier: null
                                                },
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "maxTokenLength"
                                                }
                                            },
                                            operator: "=",
                                            rightHandSide: {
                                                node: "SimpleName",
                                                identifier: "length"
                                            }
                                        }
                                    },
                                    {
                                        node: "IfStatement",
                                        expression: {
                                            node: "InstanceofExpression",
                                            leftOperand: {
                                                node: "SimpleName",
                                                identifier: "scanner"
                                            },
                                            rightOperand: {
                                                node: "SimpleType",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "StandardTokenizerImpl"
                                                }
                                            }
                                        },
                                        thenStatement: {
                                            node: "Block",
                                            statements: [
                                                {
                                                    node: "ExpressionStatement",
                                                    expression: {
                                                        node: "MethodInvocation",
                                                        expression: {
                                                            node: "SimpleName",
                                                            identifier: "scanner"
                                                        },
                                                        typeArguments: [],
                                                        name: {
                                                            node: "SimpleName",
                                                            identifier: "setBufferSize"
                                                        },
                                                        arguments: [
                                                            {
                                                                node: "MethodInvocation",
                                                                expression: {
                                                                    node: "SimpleName",
                                                                    identifier: "Math"
                                                                },
                                                                typeArguments: [],
                                                                name: {
                                                                    node: "SimpleName",
                                                                    identifier: "min"
                                                                },
                                                                arguments: [
                                                                    {
                                                                        node: "SimpleName",
                                                                        identifier: "length"
                                                                    },
                                                                    {
                                                                        node: "InfixExpression",
                                                                        leftOperand: {
                                                                            node: "NumberLiteral",
                                                                            token: "1024"
                                                                        },
                                                                        operator: "*",
                                                                        rightOperand: {
                                                                            node: "NumberLiteral",
                                                                            token: "1024"
                                                                        },
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                }
                                            ]
                                        },
                                        elseStatement: null
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "getMaxTokenLength"
                            },
                            parameters: [],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "ReturnStatement",
                                        expression: {
                                            node: "SimpleName",
                                            identifier: "maxTokenLength"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                }
                            ],
                            constructor: true,
                            typeParameters: [],
                            returnType2: null,
                            name: {
                                node: "SimpleName",
                                identifier: "StandardTokenizer"
                            },
                            parameters: [
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "SimpleType",
                                        name: {
                                            node: "SimpleName",
                                            identifier: "Reader"
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "input"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "ConstructorInvocation",
                                        typeArguments: [],
                                        arguments: [
                                            {
                                                node: "QualifiedName",
                                                qualifier: {
                                                    node: "SimpleName",
                                                    identifier: "Version"
                                                },
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "LATEST"
                                                }
                                            },
                                            {
                                                node: "SimpleName",
                                                identifier: "input"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "MarkerAnnotation",
                                    typeName: {
                                        node: "SimpleName",
                                        identifier: "Deprecated"
                                    }
                                },
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                }
                            ],
                            constructor: true,
                            typeParameters: [],
                            returnType2: null,
                            name: {
                                node: "SimpleName",
                                identifier: "StandardTokenizer"
                            },
                            parameters: [
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "SimpleType",
                                        name: {
                                            node: "SimpleName",
                                            identifier: "Version"
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "matchVersion"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                },
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "SimpleType",
                                        name: {
                                            node: "SimpleName",
                                            identifier: "Reader"
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "input"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "SuperConstructorInvocation",
                                        expression: null,
                                        typeArguments: [],
                                        arguments: [
                                            {
                                                node: "SimpleName",
                                                identifier: "input"
                                            }
                                        ]
                                    },
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "MethodInvocation",
                                            expression: null,
                                            typeArguments: [],
                                            name: {
                                                node: "SimpleName",
                                                identifier: "init"
                                            },
                                            arguments: [
                                                {
                                                    node: "SimpleName",
                                                    identifier: "matchVersion"
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                }
                            ],
                            constructor: true,
                            typeParameters: [],
                            returnType2: null,
                            name: {
                                node: "SimpleName",
                                identifier: "StandardTokenizer"
                            },
                            parameters: [
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "SimpleType",
                                        name: {
                                            node: "SimpleName",
                                            identifier: "AttributeFactory"
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "factory"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                },
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "SimpleType",
                                        name: {
                                            node: "SimpleName",
                                            identifier: "Reader"
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "input"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "ConstructorInvocation",
                                        typeArguments: [],
                                        arguments: [
                                            {
                                                node: "QualifiedName",
                                                qualifier: {
                                                    node: "SimpleName",
                                                    identifier: "Version"
                                                },
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "LATEST"
                                                }
                                            },
                                            {
                                                node: "SimpleName",
                                                identifier: "factory"
                                            },
                                            {
                                                node: "SimpleName",
                                                identifier: "input"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "MarkerAnnotation",
                                    typeName: {
                                        node: "SimpleName",
                                        identifier: "Deprecated"
                                    }
                                },
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                }
                            ],
                            constructor: true,
                            typeParameters: [],
                            returnType2: null,
                            name: {
                                node: "SimpleName",
                                identifier: "StandardTokenizer"
                            },
                            parameters: [
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "SimpleType",
                                        name: {
                                            node: "SimpleName",
                                            identifier: "Version"
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "matchVersion"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                },
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "SimpleType",
                                        name: {
                                            node: "SimpleName",
                                            identifier: "AttributeFactory"
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "factory"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                },
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "SimpleType",
                                        name: {
                                            node: "SimpleName",
                                            identifier: "Reader"
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "input"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "SuperConstructorInvocation",
                                        expression: null,
                                        typeArguments: [],
                                        arguments: [
                                            {
                                                node: "SimpleName",
                                                identifier: "factory"
                                            },
                                            {
                                                node: "SimpleName",
                                                identifier: "input"
                                            }
                                        ]
                                    },
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "MethodInvocation",
                                            expression: null,
                                            typeArguments: [],
                                            name: {
                                                node: "SimpleName",
                                                identifier: "init"
                                            },
                                            arguments: [
                                                {
                                                    node: "SimpleName",
                                                    identifier: "matchVersion"
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "void"
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "init"
                            },
                            parameters: [
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "SimpleType",
                                        name: {
                                            node: "SimpleName",
                                            identifier: "Version"
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "matchVersion"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "IfStatement",
                                        expression: {
                                            node: "MethodInvocation",
                                            expression: {
                                                node: "SimpleName",
                                                identifier: "matchVersion"
                                            },
                                            typeArguments: [],
                                            name: {
                                                node: "SimpleName",
                                                identifier: "onOrAfter"
                                            },
                                            arguments: [
                                                {
                                                    node: "QualifiedName",
                                                    qualifier: {
                                                        node: "SimpleName",
                                                        identifier: "Version"
                                                    },
                                                    name: {
                                                        node: "SimpleName",
                                                        identifier: "LUCENE_4_7"
                                                    }
                                                }
                                            ]
                                        },
                                        thenStatement: {
                                            node: "Block",
                                            statements: [
                                                {
                                                    node: "ExpressionStatement",
                                                    expression: {
                                                        node: "Assignment",
                                                        leftHandSide: {
                                                            node: "FieldAccess",
                                                            expression: {
                                                                node: "ThisExpression",
                                                                qualifier: null
                                                            },
                                                            name: {
                                                                node: "SimpleName",
                                                                identifier: "scanner"
                                                            }
                                                        },
                                                        operator: "=",
                                                        rightHandSide: {
                                                            node: "ClassInstanceCreation",
                                                            expression: null,
                                                            typeArguments: [],
                                                            type: {
                                                                node: "SimpleType",
                                                                name: {
                                                                    node: "SimpleName",
                                                                    identifier: "StandardTokenizerImpl"
                                                                }
                                                            },
                                                            arguments: [
                                                                {
                                                                    node: "SimpleName",
                                                                    identifier: "input"
                                                                }
                                                            ],
                                                            anonymousClassDeclaration: null
                                                        }
                                                    }
                                                }
                                            ]
                                        },
                                        elseStatement: {
                                            node: "IfStatement",
                                            expression: {
                                                node: "MethodInvocation",
                                                expression: {
                                                    node: "SimpleName",
                                                    identifier: "matchVersion"
                                                },
                                                typeArguments: [],
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "onOrAfter"
                                                },
                                                arguments: [
                                                    {
                                                        node: "QualifiedName",
                                                        qualifier: {
                                                            node: "SimpleName",
                                                            identifier: "Version"
                                                        },
                                                        name: {
                                                            node: "SimpleName",
                                                            identifier: "LUCENE_4_0"
                                                        }
                                                    }
                                                ]
                                            },
                                            thenStatement: {
                                                node: "Block",
                                                statements: [
                                                    {
                                                        node: "ExpressionStatement",
                                                        expression: {
                                                            node: "Assignment",
                                                            leftHandSide: {
                                                                node: "FieldAccess",
                                                                expression: {
                                                                    node: "ThisExpression",
                                                                    qualifier: null
                                                                },
                                                                name: {
                                                                    node: "SimpleName",
                                                                    identifier: "scanner"
                                                                }
                                                            },
                                                            operator: "=",
                                                            rightHandSide: {
                                                                node: "ClassInstanceCreation",
                                                                expression: null,
                                                                typeArguments: [],
                                                                type: {
                                                                    node: "SimpleType",
                                                                    name: {
                                                                        node: "SimpleName",
                                                                        identifier: "StandardTokenizerImpl40"
                                                                    }
                                                                },
                                                                arguments: [
                                                                    {
                                                                        node: "SimpleName",
                                                                        identifier: "input"
                                                                    }
                                                                ],
                                                                anonymousClassDeclaration: null
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            elseStatement: {
                                                node: "IfStatement",
                                                expression: {
                                                    node: "MethodInvocation",
                                                    expression: {
                                                        node: "SimpleName",
                                                        identifier: "matchVersion"
                                                    },
                                                    typeArguments: [],
                                                    name: {
                                                        node: "SimpleName",
                                                        identifier: "onOrAfter"
                                                    },
                                                    arguments: [
                                                        {
                                                            node: "QualifiedName",
                                                            qualifier: {
                                                                node: "SimpleName",
                                                                identifier: "Version"
                                                            },
                                                            name: {
                                                                node: "SimpleName",
                                                                identifier: "LUCENE_3_4"
                                                            }
                                                        }
                                                    ]
                                                },
                                                thenStatement: {
                                                    node: "Block",
                                                    statements: [
                                                        {
                                                            node: "ExpressionStatement",
                                                            expression: {
                                                                node: "Assignment",
                                                                leftHandSide: {
                                                                    node: "FieldAccess",
                                                                    expression: {
                                                                        node: "ThisExpression",
                                                                        qualifier: null
                                                                    },
                                                                    name: {
                                                                        node: "SimpleName",
                                                                        identifier: "scanner"
                                                                    }
                                                                },
                                                                operator: "=",
                                                                rightHandSide: {
                                                                    node: "ClassInstanceCreation",
                                                                    expression: null,
                                                                    typeArguments: [],
                                                                    type: {
                                                                        node: "SimpleType",
                                                                        name: {
                                                                            node: "SimpleName",
                                                                            identifier: "StandardTokenizerImpl34"
                                                                        }
                                                                    },
                                                                    arguments: [
                                                                        {
                                                                            node: "SimpleName",
                                                                            identifier: "input"
                                                                        }
                                                                    ],
                                                                    anonymousClassDeclaration: null
                                                                }
                                                            }
                                                        }
                                                    ]
                                                },
                                                elseStatement: {
                                                    node: "IfStatement",
                                                    expression: {
                                                        node: "MethodInvocation",
                                                        expression: {
                                                            node: "SimpleName",
                                                            identifier: "matchVersion"
                                                        },
                                                        typeArguments: [],
                                                        name: {
                                                            node: "SimpleName",
                                                            identifier: "onOrAfter"
                                                        },
                                                        arguments: [
                                                            {
                                                                node: "QualifiedName",
                                                                qualifier: {
                                                                    node: "SimpleName",
                                                                    identifier: "Version"
                                                                },
                                                                name: {
                                                                    node: "SimpleName",
                                                                    identifier: "LUCENE_3_1"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    thenStatement: {
                                                        node: "Block",
                                                        statements: [
                                                            {
                                                                node: "ExpressionStatement",
                                                                expression: {
                                                                    node: "Assignment",
                                                                    leftHandSide: {
                                                                        node: "FieldAccess",
                                                                        expression: {
                                                                            node: "ThisExpression",
                                                                            qualifier: null
                                                                        },
                                                                        name: {
                                                                            node: "SimpleName",
                                                                            identifier: "scanner"
                                                                        }
                                                                    },
                                                                    operator: "=",
                                                                    rightHandSide: {
                                                                        node: "ClassInstanceCreation",
                                                                        expression: null,
                                                                        typeArguments: [],
                                                                        type: {
                                                                            node: "SimpleType",
                                                                            name: {
                                                                                node: "SimpleName",
                                                                                identifier: "StandardTokenizerImpl31"
                                                                            }
                                                                        },
                                                                        arguments: [
                                                                            {
                                                                                node: "SimpleName",
                                                                                identifier: "input"
                                                                            }
                                                                        ],
                                                                        anonymousClassDeclaration: null
                                                                    }
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    elseStatement: {
                                                        node: "Block",
                                                        statements: [
                                                            {
                                                                node: "ExpressionStatement",
                                                                expression: {
                                                                    node: "Assignment",
                                                                    leftHandSide: {
                                                                        node: "FieldAccess",
                                                                        expression: {
                                                                            node: "ThisExpression",
                                                                            qualifier: null
                                                                        },
                                                                        name: {
                                                                            node: "SimpleName",
                                                                            identifier: "scanner"
                                                                        }
                                                                    },
                                                                    operator: "=",
                                                                    rightHandSide: {
                                                                        node: "ClassInstanceCreation",
                                                                        expression: null,
                                                                        typeArguments: [],
                                                                        type: {
                                                                            node: "SimpleType",
                                                                            name: {
                                                                                node: "SimpleName",
                                                                                identifier: "ClassicTokenizerImpl"
                                                                            }
                                                                        },
                                                                        arguments: [
                                                                            {
                                                                                node: "SimpleName",
                                                                                identifier: "input"
                                                                            }
                                                                        ],
                                                                        anonymousClassDeclaration: null
                                                                    }
                                                                }
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "SimpleType",
                                name: {
                                    node: "SimpleName",
                                    identifier: "CharTermAttribute"
                                }
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "termAtt"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "MethodInvocation",
                                        expression: null,
                                        typeArguments: [],
                                        name: {
                                            node: "SimpleName",
                                            identifier: "addAttribute"
                                        },
                                        arguments: [
                                            {
                                                node: "TypeLiteral",
                                                type: {
                                                    node: "SimpleType",
                                                    name: {
                                                        node: "SimpleName",
                                                        identifier: "CharTermAttribute"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "SimpleType",
                                name: {
                                    node: "SimpleName",
                                    identifier: "OffsetAttribute"
                                }
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "offsetAtt"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "MethodInvocation",
                                        expression: null,
                                        typeArguments: [],
                                        name: {
                                            node: "SimpleName",
                                            identifier: "addAttribute"
                                        },
                                        arguments: [
                                            {
                                                node: "TypeLiteral",
                                                type: {
                                                    node: "SimpleType",
                                                    name: {
                                                        node: "SimpleName",
                                                        identifier: "OffsetAttribute"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "SimpleType",
                                name: {
                                    node: "SimpleName",
                                    identifier: "PositionIncrementAttribute"
                                }
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "posIncrAtt"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "MethodInvocation",
                                        expression: null,
                                        typeArguments: [],
                                        name: {
                                            node: "SimpleName",
                                            identifier: "addAttribute"
                                        },
                                        arguments: [
                                            {
                                                node: "TypeLiteral",
                                                type: {
                                                    node: "SimpleType",
                                                    name: {
                                                        node: "SimpleName",
                                                        identifier: "PositionIncrementAttribute"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "SimpleType",
                                name: {
                                    node: "SimpleName",
                                    identifier: "TypeAttribute"
                                }
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "typeAtt"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "MethodInvocation",
                                        expression: null,
                                        typeArguments: [],
                                        name: {
                                            node: "SimpleName",
                                            identifier: "addAttribute"
                                        },
                                        arguments: [
                                            {
                                                node: "TypeLiteral",
                                                type: {
                                                    node: "SimpleType",
                                                    name: {
                                                        node: "SimpleName",
                                                        identifier: "TypeAttribute"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "MarkerAnnotation",
                                    typeName: {
                                        node: "SimpleName",
                                        identifier: "Override"
                                    }
                                },
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "boolean"
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "incrementToken"
                            },
                            parameters: [],
                            extraDimensions: 0,
                            thrownExceptions: [
                                {
                                    node: "SimpleName",
                                    identifier: "IOException"
                                }
                            ],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "MethodInvocation",
                                            expression: null,
                                            typeArguments: [],
                                            name: {
                                                node: "SimpleName",
                                                identifier: "clearAttributes"
                                            },
                                            arguments: []
                                        }
                                    },
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "Assignment",
                                            leftHandSide: {
                                                node: "SimpleName",
                                                identifier: "skippedPositions"
                                            },
                                            operator: "=",
                                            rightHandSide: {
                                                node: "NumberLiteral",
                                                token: "0"
                                            }
                                        }
                                    },
                                    {
                                        node: "WhileStatement",
                                        expression: {
                                            node: "BooleanLiteral",
                                            booleanValue: true
                                        },
                                        body: {
                                            node: "Block",
                                            statements: [
                                                {
                                                    node: "VariableDeclarationStatement",
                                                    modifiers: [],
                                                    type: {
                                                        node: "PrimitiveType",
                                                        primitiveTypeCode: "int"
                                                    },
                                                    fragments: [
                                                        {
                                                            node: "VariableDeclarationFragment",
                                                            name: {
                                                                node: "SimpleName",
                                                                identifier: "tokenType"
                                                            },
                                                            extraDimensions: 0,
                                                            initializer: {
                                                                node: "MethodInvocation",
                                                                expression: {
                                                                    node: "SimpleName",
                                                                    identifier: "scanner"
                                                                },
                                                                typeArguments: [],
                                                                name: {
                                                                    node: "SimpleName",
                                                                    identifier: "getNextToken"
                                                                },
                                                                arguments: []
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    node: "IfStatement",
                                                    expression: {
                                                        node: "InfixExpression",
                                                        leftOperand: {
                                                            node: "SimpleName",
                                                            identifier: "tokenType"
                                                        },
                                                        operator: "==",
                                                        rightOperand: {
                                                            node: "QualifiedName",
                                                            qualifier: {
                                                                node: "SimpleName",
                                                                identifier: "StandardTokenizerInterface"
                                                            },
                                                            name: {
                                                                node: "SimpleName",
                                                                identifier: "YYEOF"
                                                            }
                                                        },
                                                    },
                                                    thenStatement: {
                                                        node: "Block",
                                                        statements: [
                                                            {
                                                                node: "ReturnStatement",
                                                                expression: {
                                                                    node: "BooleanLiteral",
                                                                    booleanValue: false
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    elseStatement: null
                                                },
                                                {
                                                    node: "IfStatement",
                                                    expression: {
                                                        node: "InfixExpression",
                                                        leftOperand: {
                                                            node: "MethodInvocation",
                                                            expression: {
                                                                node: "SimpleName",
                                                                identifier: "scanner"
                                                            },
                                                            typeArguments: [],
                                                            name: {
                                                                node: "SimpleName",
                                                                identifier: "yylength"
                                                            },
                                                            arguments: []
                                                        },
                                                        operator: "<=",
                                                        rightOperand: {
                                                            node: "SimpleName",
                                                            identifier: "maxTokenLength"
                                                        },
                                                    },
                                                    thenStatement: {
                                                        node: "Block",
                                                        statements: [
                                                            {
                                                                node: "ExpressionStatement",
                                                                expression: {
                                                                    node: "MethodInvocation",
                                                                    expression: {
                                                                        node: "SimpleName",
                                                                        identifier: "posIncrAtt"
                                                                    },
                                                                    typeArguments: [],
                                                                    name: {
                                                                        node: "SimpleName",
                                                                        identifier: "setPositionIncrement"
                                                                    },
                                                                    arguments: [
                                                                        {
                                                                            node: "InfixExpression",
                                                                            leftOperand: {
                                                                                node: "SimpleName",
                                                                                identifier: "skippedPositions"
                                                                            },
                                                                            operator: "+",
                                                                            rightOperand: {
                                                                                node: "NumberLiteral",
                                                                                token: "1"
                                                                            },
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                node: "ExpressionStatement",
                                                                expression: {
                                                                    node: "MethodInvocation",
                                                                    expression: {
                                                                        node: "SimpleName",
                                                                        identifier: "scanner"
                                                                    },
                                                                    typeArguments: [],
                                                                    name: {
                                                                        node: "SimpleName",
                                                                        identifier: "getText"
                                                                    },
                                                                    arguments: [
                                                                        {
                                                                            node: "SimpleName",
                                                                            identifier: "termAtt"
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                node: "VariableDeclarationStatement",
                                                                modifiers: [
                                                                    {
                                                                        node: "Modifier",
                                                                        keyword: "final"
                                                                    }
                                                                ],
                                                                type: {
                                                                    node: "PrimitiveType",
                                                                    primitiveTypeCode: "int"
                                                                },
                                                                fragments: [
                                                                    {
                                                                        node: "VariableDeclarationFragment",
                                                                        name: {
                                                                            node: "SimpleName",
                                                                            identifier: "start"
                                                                        },
                                                                        extraDimensions: 0,
                                                                        initializer: {
                                                                            node: "MethodInvocation",
                                                                            expression: {
                                                                                node: "SimpleName",
                                                                                identifier: "scanner"
                                                                            },
                                                                            typeArguments: [],
                                                                            name: {
                                                                                node: "SimpleName",
                                                                                identifier: "yychar"
                                                                            },
                                                                            arguments: []
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            {
                                                                node: "ExpressionStatement",
                                                                expression: {
                                                                    node: "MethodInvocation",
                                                                    expression: {
                                                                        node: "SimpleName",
                                                                        identifier: "offsetAtt"
                                                                    },
                                                                    typeArguments: [],
                                                                    name: {
                                                                        node: "SimpleName",
                                                                        identifier: "setOffset"
                                                                    },
                                                                    arguments: [
                                                                        {
                                                                            node: "MethodInvocation",
                                                                            expression: null,
                                                                            typeArguments: [],
                                                                            name: {
                                                                                node: "SimpleName",
                                                                                identifier: "correctOffset"
                                                                            },
                                                                            arguments: [
                                                                                {
                                                                                    node: "SimpleName",
                                                                                    identifier: "start"
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            node: "MethodInvocation",
                                                                            expression: null,
                                                                            typeArguments: [],
                                                                            name: {
                                                                                node: "SimpleName",
                                                                                identifier: "correctOffset"
                                                                            },
                                                                            arguments: [
                                                                                {
                                                                                    node: "InfixExpression",
                                                                                    leftOperand: {
                                                                                        node: "SimpleName",
                                                                                        identifier: "start"
                                                                                    },
                                                                                    operator: "+",
                                                                                    rightOperand: {
                                                                                        node: "MethodInvocation",
                                                                                        expression: {
                                                                                            node: "SimpleName",
                                                                                            identifier: "termAtt"
                                                                                        },
                                                                                        typeArguments: [],
                                                                                        name: {
                                                                                            node: "SimpleName",
                                                                                            identifier: "length"
                                                                                        },
                                                                                        arguments: []
                                                                                    },
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                node: "IfStatement",
                                                                expression: {
                                                                    node: "InfixExpression",
                                                                    leftOperand: {
                                                                        node: "SimpleName",
                                                                        identifier: "tokenType"
                                                                    },
                                                                    operator: "==",
                                                                    rightOperand: {
                                                                        node: "QualifiedName",
                                                                        qualifier: {
                                                                            node: "SimpleName",
                                                                            identifier: "StandardTokenizer"
                                                                        },
                                                                        name: {
                                                                            node: "SimpleName",
                                                                            identifier: "ACRONYM_DEP"
                                                                        }
                                                                    },
                                                                },
                                                                thenStatement: {
                                                                    node: "Block",
                                                                    statements: [
                                                                        {
                                                                            node: "ExpressionStatement",
                                                                            expression: {
                                                                                node: "MethodInvocation",
                                                                                expression: {
                                                                                    node: "SimpleName",
                                                                                    identifier: "typeAtt"
                                                                                },
                                                                                typeArguments: [],
                                                                                name: {
                                                                                    node: "SimpleName",
                                                                                    identifier: "setType"
                                                                                },
                                                                                arguments: [
                                                                                    {
                                                                                        node: "ArrayAccess",
                                                                                        array: {
                                                                                            node: "QualifiedName",
                                                                                            qualifier: {
                                                                                                node: "SimpleName",
                                                                                                identifier: "StandardTokenizer"
                                                                                            },
                                                                                            name: {
                                                                                                node: "SimpleName",
                                                                                                identifier: "TOKEN_TYPES"
                                                                                            }
                                                                                        },
                                                                                        index: {
                                                                                            node: "QualifiedName",
                                                                                            qualifier: {
                                                                                                node: "SimpleName",
                                                                                                identifier: "StandardTokenizer"
                                                                                            },
                                                                                            name: {
                                                                                                node: "SimpleName",
                                                                                                identifier: "HOST"
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            }
                                                                        },
                                                                        {
                                                                            node: "ExpressionStatement",
                                                                            expression: {
                                                                                node: "MethodInvocation",
                                                                                expression: {
                                                                                    node: "SimpleName",
                                                                                    identifier: "termAtt"
                                                                                },
                                                                                typeArguments: [],
                                                                                name: {
                                                                                    node: "SimpleName",
                                                                                    identifier: "setLength"
                                                                                },
                                                                                arguments: [
                                                                                    {
                                                                                        node: "InfixExpression",
                                                                                        leftOperand: {
                                                                                            node: "MethodInvocation",
                                                                                            expression: {
                                                                                                node: "SimpleName",
                                                                                                identifier: "termAtt"
                                                                                            },
                                                                                            typeArguments: [],
                                                                                            name: {
                                                                                                node: "SimpleName",
                                                                                                identifier: "length"
                                                                                            },
                                                                                            arguments: []
                                                                                        },
                                                                                        operator: "-",
                                                                                        rightOperand: {
                                                                                            node: "NumberLiteral",
                                                                                            token: "1"
                                                                                        },
                                                                                    }
                                                                                ]
                                                                            }
                                                                        }
                                                                    ]
                                                                },
                                                                elseStatement: {
                                                                    node: "Block",
                                                                    statements: [
                                                                        {
                                                                            node: "ExpressionStatement",
                                                                            expression: {
                                                                                node: "MethodInvocation",
                                                                                expression: {
                                                                                    node: "SimpleName",
                                                                                    identifier: "typeAtt"
                                                                                },
                                                                                typeArguments: [],
                                                                                name: {
                                                                                    node: "SimpleName",
                                                                                    identifier: "setType"
                                                                                },
                                                                                arguments: [
                                                                                    {
                                                                                        node: "ArrayAccess",
                                                                                        array: {
                                                                                            node: "QualifiedName",
                                                                                            qualifier: {
                                                                                                node: "SimpleName",
                                                                                                identifier: "StandardTokenizer"
                                                                                            },
                                                                                            name: {
                                                                                                node: "SimpleName",
                                                                                                identifier: "TOKEN_TYPES"
                                                                                            }
                                                                                        },
                                                                                        index: {
                                                                                            node: "SimpleName",
                                                                                            identifier: "tokenType"
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            }
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                node: "ReturnStatement",
                                                                expression: {
                                                                    node: "BooleanLiteral",
                                                                    booleanValue: true
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    elseStatement: {
                                                        node: "ExpressionStatement",
                                                        expression: {
                                                            node: "PostfixExpression",
                                                            operand: {
                                                                node: "SimpleName",
                                                                identifier: "skippedPositions"
                                                            },
                                                            operator: "++"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "MarkerAnnotation",
                                    typeName: {
                                        node: "SimpleName",
                                        identifier: "Override"
                                    }
                                },
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "void"
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "end"
                            },
                            parameters: [],
                            extraDimensions: 0,
                            thrownExceptions: [
                                {
                                    node: "SimpleName",
                                    identifier: "IOException"
                                }
                            ],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "SuperMethodInvocation",
                                            qualifier: null,
                                            typeArguments: [],
                                            name: {
                                                node: "SimpleName",
                                                identifier: "end"
                                            },
                                            arguments: []
                                        }
                                    },
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "finalOffset"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "MethodInvocation",
                                                    expression: null,
                                                    typeArguments: [],
                                                    name: {
                                                        node: "SimpleName",
                                                        identifier: "correctOffset"
                                                    },
                                                    arguments: [
                                                        {
                                                            node: "InfixExpression",
                                                            leftOperand: {
                                                                node: "MethodInvocation",
                                                                expression: {
                                                                    node: "SimpleName",
                                                                    identifier: "scanner"
                                                                },
                                                                typeArguments: [],
                                                                name: {
                                                                    node: "SimpleName",
                                                                    identifier: "yychar"
                                                                },
                                                                arguments: []
                                                            },
                                                            operator: "+",
                                                            rightOperand: {
                                                                node: "MethodInvocation",
                                                                expression: {
                                                                    node: "SimpleName",
                                                                    identifier: "scanner"
                                                                },
                                                                typeArguments: [],
                                                                name: {
                                                                    node: "SimpleName",
                                                                    identifier: "yylength"
                                                                },
                                                                arguments: []
                                                            },
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "MethodInvocation",
                                            expression: {
                                                node: "SimpleName",
                                                identifier: "offsetAtt"
                                            },
                                            typeArguments: [],
                                            name: {
                                                node: "SimpleName",
                                                identifier: "setOffset"
                                            },
                                            arguments: [
                                                {
                                                    node: "SimpleName",
                                                    identifier: "finalOffset"
                                                },
                                                {
                                                    node: "SimpleName",
                                                    identifier: "finalOffset"
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "MethodInvocation",
                                            expression: {
                                                node: "SimpleName",
                                                identifier: "posIncrAtt"
                                            },
                                            typeArguments: [],
                                            name: {
                                                node: "SimpleName",
                                                identifier: "setPositionIncrement"
                                            },
                                            arguments: [
                                                {
                                                    node: "InfixExpression",
                                                    leftOperand: {
                                                        node: "MethodInvocation",
                                                        expression: {
                                                            node: "SimpleName",
                                                            identifier: "posIncrAtt"
                                                        },
                                                        typeArguments: [],
                                                        name: {
                                                            node: "SimpleName",
                                                            identifier: "getPositionIncrement"
                                                        },
                                                        arguments: []
                                                    },
                                                    operator: "+",
                                                    rightOperand: {
                                                        node: "SimpleName",
                                                        identifier: "skippedPositions"
                                                    },
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "MarkerAnnotation",
                                    typeName: {
                                        node: "SimpleName",
                                        identifier: "Override"
                                    }
                                },
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "void"
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "close"
                            },
                            parameters: [],
                            extraDimensions: 0,
                            thrownExceptions: [
                                {
                                    node: "SimpleName",
                                    identifier: "IOException"
                                }
                            ],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "SuperMethodInvocation",
                                            qualifier: null,
                                            typeArguments: [],
                                            name: {
                                                node: "SimpleName",
                                                identifier: "close"
                                            },
                                            arguments: []
                                        }
                                    },
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "MethodInvocation",
                                            expression: {
                                                node: "SimpleName",
                                                identifier: "scanner"
                                            },
                                            typeArguments: [],
                                            name: {
                                                node: "SimpleName",
                                                identifier: "yyreset"
                                            },
                                            arguments: [
                                                {
                                                    node: "SimpleName",
                                                    identifier: "input"
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "MarkerAnnotation",
                                    typeName: {
                                        node: "SimpleName",
                                        identifier: "Override"
                                    }
                                },
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "void"
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "reset"
                            },
                            parameters: [],
                            extraDimensions: 0,
                            thrownExceptions: [
                                {
                                    node: "SimpleName",
                                    identifier: "IOException"
                                }
                            ],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "SuperMethodInvocation",
                                            qualifier: null,
                                            typeArguments: [],
                                            name: {
                                                node: "SimpleName",
                                                identifier: "reset"
                                            },
                                            arguments: []
                                        }
                                    },
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "MethodInvocation",
                                            expression: {
                                                node: "SimpleName",
                                                identifier: "scanner"
                                            },
                                            typeArguments: [],
                                            name: {
                                                node: "SimpleName",
                                                identifier: "yyreset"
                                            },
                                            arguments: [
                                                {
                                                    node: "SimpleName",
                                                    identifier: "input"
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "Assignment",
                                            leftHandSide: {
                                                node: "SimpleName",
                                                identifier: "skippedPositions"
                                            },
                                            operator: "=",
                                            rightHandSide: {
                                                node: "NumberLiteral",
                                                token: "0"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                {
                    node: "TypeDeclaration",
                    modifiers: [
                        {
                            node: "Modifier",
                            keyword: "public"
                        },
                        {
                            node: "Modifier",
                            keyword: "final"
                        }
                    ],
                    interface: false,
                    name: {
                        node: "SimpleName",
                        identifier: "StandardTokenizerImpl"
                    },
                    typeParameters: [],
                    superclassType: null,
                    superInterfaceTypes: [
                        {
                            node: "SimpleType",
                            name: {
                                node: "SimpleName",
                                identifier: "StandardTokenizerInterface"
                            }
                        }
                    ],
                    bodyDeclarations: [
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "YYEOF"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "PrefixExpression",
                                        operator: "-",
                                        operand: {
                                            node: "NumberLiteral",
                                            token: "1"
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "ZZ_BUFFERSIZE"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "NumberLiteral",
                                        token: "255"
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "YYINITIAL"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "NumberLiteral",
                                        token: "0"
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "ZZ_LEXSTATE"
                                    },
                                    extraDimensions: 1,
                                    initializer: {
                                        node: "ArrayInitializer",
                                        expressions: [
                                            {
                                                node: "NumberLiteral",
                                                token: "0"
                                            },
                                            {
                                                node: "NumberLiteral",
                                                token: "0"
                                            }
                                        ]
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "SimpleType",
                                name: {
                                    node: "SimpleName",
                                    identifier: "String"
                                }
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "ZZ_CMAP_PACKED"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "InfixExpression",
                                        leftOperand: {
                                            node: "InfixExpression",
                                            leftOperand: {
                                                node: "InfixExpression",
                                                leftOperand: {
                                                    node: "InfixExpression",
                                                    leftOperand: {
                                                        node: "InfixExpression",
                                                        leftOperand: {
                                                            node: "InfixExpression",
                                                            leftOperand: {
                                                                node: "InfixExpression",
                                                                leftOperand: {
                                                                    node: "InfixExpression",
                                                                    leftOperand: {
                                                                        node: "InfixExpression",
                                                                        leftOperand: {
                                                                            node: "InfixExpression",
                                                                            leftOperand: {
                                                                                node: "InfixExpression",
                                                                                leftOperand: {
                                                                                    node: "InfixExpression",
                                                                                    leftOperand: {
                                                                                        node: "InfixExpression",
                                                                                        leftOperand: {
                                                                                            node: "InfixExpression",
                                                                                            leftOperand: {
                                                                                                node: "InfixExpression",
                                                                                                leftOperand: {
                                                                                                    node: "InfixExpression",
                                                                                                    leftOperand: {
                                                                                                        node: "InfixExpression",
                                                                                                        leftOperand: {
                                                                                                            node: "InfixExpression",
                                                                                                            leftOperand: {
                                                                                                                node: "InfixExpression",
                                                                                                                leftOperand: {
                                                                                                                    node: "InfixExpression",
                                                                                                                    leftOperand: {
                                                                                                                        node: "InfixExpression",
                                                                                                                        leftOperand: {
                                                                                                                            node: "InfixExpression",
                                                                                                                            leftOperand: {
                                                                                                                                node: "InfixExpression",
                                                                                                                                leftOperand: {
                                                                                                                                    node: "InfixExpression",
                                                                                                                                    leftOperand: {
                                                                                                                                        node: "InfixExpression",
                                                                                                                                        leftOperand: {
                                                                                                                                            node: "InfixExpression",
                                                                                                                                            leftOperand: {
                                                                                                                                                node: "InfixExpression",
                                                                                                                                                leftOperand: {
                                                                                                                                                    node: "InfixExpression",
                                                                                                                                                    leftOperand: {
                                                                                                                                                        node: "InfixExpression",
                                                                                                                                                        leftOperand: {
                                                                                                                                                            node: "InfixExpression",
                                                                                                                                                            leftOperand: {
                                                                                                                                                                node: "InfixExpression",
                                                                                                                                                                leftOperand: {
                                                                                                                                                                    node: "InfixExpression",
                                                                                                                                                                    leftOperand: {
                                                                                                                                                                        node: "InfixExpression",
                                                                                                                                                                        leftOperand: {
                                                                                                                                                                            node: "InfixExpression",
                                                                                                                                                                            leftOperand: {
                                                                                                                                                                                node: "InfixExpression",
                                                                                                                                                                                leftOperand: {
                                                                                                                                                                                    node: "InfixExpression",
                                                                                                                                                                                    leftOperand: {
                                                                                                                                                                                        node: "InfixExpression",
                                                                                                                                                                                        leftOperand: {
                                                                                                                                                                                            node: "InfixExpression",
                                                                                                                                                                                            leftOperand: {
                                                                                                                                                                                                node: "InfixExpression",
                                                                                                                                                                                                leftOperand: {
                                                                                                                                                                                                    node: "InfixExpression",
                                                                                                                                                                                                    leftOperand: {
                                                                                                                                                                                                        node: "InfixExpression",
                                                                                                                                                                                                        leftOperand: {
                                                                                                                                                                                                            node: "InfixExpression",
                                                                                                                                                                                                            leftOperand: {
                                                                                                                                                                                                                node: "InfixExpression",
                                                                                                                                                                                                                leftOperand: {
                                                                                                                                                                                                                    node: "InfixExpression",
                                                                                                                                                                                                                    leftOperand: {
                                                                                                                                                                                                                        node: "InfixExpression",
                                                                                                                                                                                                                        leftOperand: {
                                                                                                                                                                                                                            node: "InfixExpression",
                                                                                                                                                                                                                            leftOperand: {
                                                                                                                                                                                                                                node: "InfixExpression",
                                                                                                                                                                                                                                leftOperand: {
                                                                                                                                                                                                                                    node: "InfixExpression",
                                                                                                                                                                                                                                    leftOperand: {
                                                                                                                                                                                                                                        node: "InfixExpression",
                                                                                                                                                                                                                                        leftOperand: {
                                                                                                                                                                                                                                            node: "InfixExpression",
                                                                                                                                                                                                                                            leftOperand: {
                                                                                                                                                                                                                                                node: "InfixExpression",
                                                                                                                                                                                                                                                leftOperand: {
                                                                                                                                                                                                                                                    node: "InfixExpression",
                                                                                                                                                                                                                                                    leftOperand: {
                                                                                                                                                                                                                                                        node: "InfixExpression",
                                                                                                                                                                                                                                                        leftOperand: {
                                                                                                                                                                                                                                                            node: "InfixExpression",
                                                                                                                                                                                                                                                            leftOperand: {
                                                                                                                                                                                                                                                                node: "InfixExpression",
                                                                                                                                                                                                                                                                leftOperand: {
                                                                                                                                                                                                                                                                    node: "InfixExpression",
                                                                                                                                                                                                                                                                    leftOperand: {
                                                                                                                                                                                                                                                                        node: "InfixExpression",
                                                                                                                                                                                                                                                                        leftOperand: {
                                                                                                                                                                                                                                                                            node: "InfixExpression",
                                                                                                                                                                                                                                                                            leftOperand: {
                                                                                                                                                                                                                                                                                node: "InfixExpression",
                                                                                                                                                                                                                                                                                leftOperand: {
                                                                                                                                                                                                                                                                                    node: "InfixExpression",
                                                                                                                                                                                                                                                                                    leftOperand: {
                                                                                                                                                                                                                                                                                        node: "InfixExpression",
                                                                                                                                                                                                                                                                                        leftOperand: {
                                                                                                                                                                                                                                                                                            node: "InfixExpression",
                                                                                                                                                                                                                                                                                            leftOperand: {
                                                                                                                                                                                                                                                                                                node: "InfixExpression",
                                                                                                                                                                                                                                                                                                leftOperand: {
                                                                                                                                                                                                                                                                                                    node: "InfixExpression",
                                                                                                                                                                                                                                                                                                    leftOperand: {
                                                                                                                                                                                                                                                                                                        node: "InfixExpression",
                                                                                                                                                                                                                                                                                                        leftOperand: {
                                                                                                                                                                                                                                                                                                            node: "InfixExpression",
                                                                                                                                                                                                                                                                                                            leftOperand: {
                                                                                                                                                                                                                                                                                                                node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                leftOperand: {
                                                                                                                                                                                                                                                                                                                    node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                    leftOperand: {
                                                                                                                                                                                                                                                                                                                        node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                        leftOperand: {
                                                                                                                                                                                                                                                                                                                            node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                            leftOperand: {
                                                                                                                                                                                                                                                                                                                                node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                leftOperand: {
                                                                                                                                                                                                                                                                                                                                    node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                    leftOperand: {
                                                                                                                                                                                                                                                                                                                                        node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                        leftOperand: {
                                                                                                                                                                                                                                                                                                                                            node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                            leftOperand: {
                                                                                                                                                                                                                                                                                                                                                node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                leftOperand: {
                                                                                                                                                                                                                                                                                                                                                    node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                    leftOperand: {
                                                                                                                                                                                                                                                                                                                                                        node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                        leftOperand: {
                                                                                                                                                                                                                                                                                                                                                            node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                            leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                    node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                    leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                        node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                        leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                            node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                            leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                    node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                    leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                        node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                        leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                            node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                            leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                    node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                    leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                        node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                        leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                            node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                            leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                                leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                    node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                                    leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                        node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                                        leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                            node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                                            leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                                                leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                    node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                                                    leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                        node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                                                        leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                            node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                                                            leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                                                                leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                        node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                                                                        leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                                                                            leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            leftOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                leftOperand: {
node: "InfixExpression",
leftOperand: {
node: "InfixExpression",
leftOperand: {
node: "InfixExpression",
leftOperand: {
node: "InfixExpression",
leftOperand: {
node: "InfixExpression",
leftOperand: {
node: "InfixExpression",
leftOperand: {
node: "InfixExpression",
leftOperand: {
node: "InfixExpression",
leftOperand: {
node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    leftOperand: {
node: "InfixExpression",
leftOperand: {
node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            leftOperand: {
node: "InfixExpression",
leftOperand: {
node: "InfixExpression",
leftOperand: {
node: "InfixExpression",
leftOperand: {
node: "InfixExpression",
leftOperand: {
node: "InfixExpression",
leftOperand: {
node: "InfixExpression",
leftOperand: {
node: "InfixExpression",
leftOperand: {
node: "InfixExpression",
leftOperand: {
node: "InfixExpression",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                leftOperand: {
node: "InfixExpression",
leftOperand: {
node: "InfixExpression",
leftOperand: {
node: "InfixExpression",
leftOperand: {
node: "InfixExpression",
leftOperand: {
node: "InfixExpression",
leftOperand: {
node: "StringLiteral",
escapedValue: "\"\\42\\0\\1\\15\\4\\0\\1\\14\\4\\0\\1\\7\\1\\0\\1\\10\\1\\0\\12\\4\""
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    },
operator: "+",
rightOperand: {
node: "StringLiteral",
escapedValue: "\"\\1\\6\\1\\7\\5\\0\\32\\1\\4\\0\\1\\11\\1\\0\\32\\1\\57\\0\\1\\1\""
},
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                },
operator: "+",
rightOperand: {
node: "StringLiteral",
escapedValue: "\"\\2\\0\\1\\3\\7\\0\\1\\1\\1\\0\\1\\6\\2\\0\\1\\1\\5\\0\\27\\1\""
},
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            operator: "+",
rightOperand: {
node: "StringLiteral",
escapedValue: "\"\\1\\0\\37\\1\\1\\0\\u01ca\\1\\4\\0\\14\\1\\5\\0\\1\\6\\10\\0\\5\\1\""
},
},
operator: "+",
rightOperand: {
node: "StringLiteral",
escapedValue: "\"\\7\\0\\1\\1\\1\\0\\1\\1\\21\\0\\160\\3\\5\\1\\1\\0\\2\\1\\2\\0\""
},
},
operator: "+",
rightOperand: {
node: "StringLiteral",
escapedValue: "\"\\4\\1\\1\\7\\7\\0\\1\\1\\1\\6\\3\\1\\1\\0\\1\\1\\1\\0\\24\\1\""
},
},
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                operator: "+",
rightOperand: {
node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    escapedValue: "\"\\1\\0\\123\\1\\1\\0\\213\\1\\1\\0\\7\\3\\236\\1\\11\\0\\46\\1\\2\\0\""
},
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            },
operator: "+",
rightOperand: {
node: "StringLiteral",
escapedValue: "\"\\1\\1\\7\\0\\47\\1\\1\\0\\1\\7\\7\\0\\55\\3\\1\\0\\1\\3\\1\\0\""
},
},
operator: "+",
rightOperand: {
node: "StringLiteral",
escapedValue: "\"\\2\\3\\1\\0\\2\\3\\1\\0\\1\\3\\10\\0\\33\\16\\5\\0\\3\\16\\1\\1\""
},
},
operator: "+",
rightOperand: {
node: "StringLiteral",
escapedValue: "\"\\1\\6\\13\\0\\5\\3\\7\\0\\2\\7\\2\\0\\13\\3\\1\\0\\1\\3\\3\\0\""
},
},
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                rightOperand: {
node: "StringLiteral",
escapedValue: "\"\\53\\1\\25\\3\\12\\4\\1\\0\\1\\4\\1\\7\\1\\0\\2\\1\\1\\3\\143\\1\""
},
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            },
operator: "+",
rightOperand: {
node: "StringLiteral",
escapedValue: "\"\\1\\0\\1\\1\\10\\3\\1\\0\\6\\3\\2\\1\\2\\3\\1\\0\\4\\3\\2\\1\""
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            },
},
operator: "+",
rightOperand: {
node: "StringLiteral",
escapedValue: "\"\\12\\4\\3\\1\\2\\0\\1\\1\\17\\0\\1\\3\\1\\1\\1\\3\\36\\1\\33\\3\""
},
},
operator: "+",
rightOperand: {
node: "StringLiteral",
escapedValue: "\"\\2\\0\\131\\1\\13\\3\\1\\1\\16\\0\\12\\4\\41\\1\\11\\3\\2\\1\\2\\0\""
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    },
},
operator: "+",
rightOperand: {
node: "StringLiteral",
escapedValue: "\"\\1\\7\\1\\0\\1\\1\\5\\0\\26\\1\\4\\3\\1\\1\\11\\3\\1\\1\\3\\3\""
},
},
operator: "+",
rightOperand: {
node: "StringLiteral",
escapedValue: "\"\\1\\1\\5\\3\\22\\0\\31\\1\\3\\3\\104\\0\\1\\1\\1\\0\\13\\1\\67\\0\""
},
},
operator: "+",
rightOperand: {
node: "StringLiteral",
escapedValue: "\"\\33\\3\\1\\0\\4\\3\\66\\1\\3\\3\\1\\1\\22\\3\\1\\1\\7\\3\\12\\1\""
},
},
operator: "+",
rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        node: "StringLiteral",
escapedValue: "\"\\2\\3\\2\\0\\12\\4\\1\\0\\7\\1\\1\\0\\7\\1\\1\\0\\3\\3\\1\\0\""
},
},
operator: "+",
rightOperand: {
node: "StringLiteral",
escapedValue: "\"\\10\\1\\2\\0\\2\\1\\2\\0\\26\\1\\1\\0\\7\\1\\1\\0\\1\\1\\3\\0\""
},
},
operator: "+",
rightOperand: {
node: "StringLiteral",
escapedValue: "\"\\4\\1\\2\\0\\1\\3\\1\\1\\7\\3\\2\\0\\2\\3\\2\\0\\3\\3\\1\\1\""
},
},
operator: "+",
rightOperand: {
node: "StringLiteral",
escapedValue: "\"\\10\\0\\1\\3\\4\\0\\2\\1\\1\\0\\3\\1\\2\\3\\2\\0\\12\\4\\2\\1\""
},
},
operator: "+",
rightOperand: {
node: "StringLiteral",
escapedValue: "\"\\17\\0\\3\\3\\1\\0\\6\\1\\4\\0\\2\\1\\2\\0\\26\\1\\1\\0\\7\\1\""
},
},
operator: "+",
rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    node: "StringLiteral",
escapedValue: "\"\\1\\0\\2\\1\\1\\0\\2\\1\\1\\0\\2\\1\\2\\0\\1\\3\\1\\0\\5\\3\""
},
},
operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            rightOperand: {
node: "StringLiteral",
escapedValue: "\"\\4\\0\\2\\3\\2\\0\\3\\3\\3\\0\\1\\3\\7\\0\\4\\1\\1\\0\\1\\1\""
},
},
operator: "+",
rightOperand: {
node: "StringLiteral",
escapedValue: "\"\\7\\0\\12\\4\\2\\3\\3\\1\\1\\3\\13\\0\\3\\3\\1\\0\\11\\1\\1\\0\""
},
},
operator: "+",
rightOperand: {
node: "StringLiteral",
escapedValue: "\"\\3\\1\\1\\0\\26\\1\\1\\0\\7\\1\\1\\0\\2\\1\\1\\0\\5\\1\\2\\0\""
},
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    node: "StringLiteral",
escapedValue: "\"\\1\\3\\1\\1\\10\\3\\1\\0\\3\\3\\1\\0\\3\\3\\2\\0\\1\\1\\17\\0\""
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                escapedValue: "\"\\2\\1\\2\\3\\2\\0\\12\\4\\21\\0\\3\\3\\1\\0\\10\\1\\2\\0\\2\\1\""
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            escapedValue: "\"\\2\\0\\26\\1\\1\\0\\7\\1\\1\\0\\2\\1\\1\\0\\5\\1\\2\\0\\1\\3\""
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        escapedValue: "\"\\1\\1\\7\\3\\2\\0\\2\\3\\2\\0\\3\\3\\10\\0\\2\\3\\4\\0\\2\\1\""
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    escapedValue: "\"\\1\\0\\3\\1\\2\\3\\2\\0\\12\\4\\1\\0\\1\\1\\20\\0\\1\\3\\1\\1\""
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                escapedValue: "\"\\1\\0\\6\\1\\3\\0\\3\\1\\1\\0\\4\\1\\3\\0\\2\\1\\1\\0\\1\\1\""
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            escapedValue: "\"\\1\\0\\2\\1\\3\\0\\2\\1\\3\\0\\3\\1\\3\\0\\14\\1\\4\\0\\5\\3\""
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        escapedValue: "\"\\3\\0\\3\\3\\1\\0\\4\\3\\2\\0\\1\\1\\6\\0\\1\\3\\16\\0\\12\\4\""
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    escapedValue: "\"\\21\\0\\3\\3\\1\\0\\10\\1\\1\\0\\3\\1\\1\\0\\27\\1\\1\\0\\12\\1\""
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                escapedValue: "\"\\1\\0\\5\\1\\3\\0\\1\\1\\7\\3\\1\\0\\3\\3\\1\\0\\4\\3\\7\\0\""
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            escapedValue: "\"\\2\\3\\1\\0\\2\\1\\6\\0\\2\\1\\2\\3\\2\\0\\12\\4\\22\\0\\2\\3\""
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        escapedValue: "\"\\1\\0\\10\\1\\1\\0\\3\\1\\1\\0\\27\\1\\1\\0\\12\\1\\1\\0\\5\\1\""
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                                                                                                                                                operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    escapedValue: "\"\\2\\0\\1\\3\\1\\1\\7\\3\\1\\0\\3\\3\\1\\0\\4\\3\\7\\0\\2\\3\""
                                                                                                                                                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                                                                                                                                            operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                                                                            rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                escapedValue: "\"\\7\\0\\1\\1\\1\\0\\2\\1\\2\\3\\2\\0\\12\\4\\1\\0\\2\\1\\17\\0\""
                                                                                                                                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                                                                                                                                                        operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                                                                        rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                                                                            escapedValue: "\"\\2\\3\\1\\0\\10\\1\\1\\0\\3\\1\\1\\0\\51\\1\\2\\0\\1\\1\\7\\3\""
                                                                                                                                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                                                                                                                    operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                        node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                                                                        escapedValue: "\"\\1\\0\\3\\3\\1\\0\\4\\3\\1\\1\\10\\0\\1\\3\\10\\0\\2\\1\\2\\3\""
                                                                                                                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                                                                                                                                operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                                                                rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                                                                    escapedValue: "\"\\2\\0\\12\\4\\12\\0\\6\\1\\2\\0\\2\\3\\1\\0\\22\\1\\3\\0\\30\\1\""
                                                                                                                                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                                                                                                                            operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                                                            rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                                node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                                                                escapedValue: "\"\\1\\0\\11\\1\\1\\0\\1\\1\\2\\0\\7\\1\\3\\0\\1\\3\\4\\0\\6\\3\""
                                                                                                                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                                                                                                                                        operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                                                        rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                            node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                                                            escapedValue: "\"\\1\\0\\1\\3\\1\\0\\10\\3\\22\\0\\2\\3\\15\\0\\60\\20\\1\\21\\2\\20\""
                                                                                                                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                                                                                                    operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                                                    rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                        node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                                                        escapedValue: "\"\\7\\21\\5\\0\\7\\20\\10\\21\\1\\0\\12\\4\\47\\0\\2\\20\\1\\0\\1\\20\""
                                                                                                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                                                                                                                operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                                                rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                    node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                                                    escapedValue: "\"\\2\\0\\2\\20\\1\\0\\1\\20\\2\\0\\1\\20\\6\\0\\4\\20\\1\\0\\7\\20\""
                                                                                                                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                                                                                                            operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                                            rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                                node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                                                escapedValue: "\"\\1\\0\\3\\20\\1\\0\\1\\20\\1\\0\\1\\20\\2\\0\\2\\20\\1\\0\\4\\20\""
                                                                                                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                                                                                                                        operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                                        rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                            node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                                            escapedValue: "\"\\1\\21\\2\\20\\6\\21\\1\\0\\2\\21\\1\\20\\2\\0\\5\\20\\1\\0\\1\\20\""
                                                                                                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                                                                                    operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                                    rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                        node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                                        escapedValue: "\"\\1\\0\\6\\21\\2\\0\\12\\4\\2\\0\\4\\20\\40\\0\\1\\1\\27\\0\\2\\3\""
                                                                                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                                                                                                operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                                rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                    node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                                    escapedValue: "\"\\6\\0\\12\\4\\13\\0\\1\\3\\1\\0\\1\\3\\1\\0\\1\\3\\4\\0\\2\\3\""
                                                                                                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                                                                                            operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                            rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                                node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                                escapedValue: "\"\\10\\1\\1\\0\\44\\1\\4\\0\\24\\3\\1\\0\\2\\3\\5\\1\\13\\3\\1\\0\""
                                                                                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                                                                                                        operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                        rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                            node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                            escapedValue: "\"\\44\\3\\11\\0\\1\\3\\71\\0\\53\\20\\24\\21\\1\\20\\12\\4\\6\\0\\6\\20\""
                                                                                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                                                                    operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                    rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                        node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                        escapedValue: "\"\\4\\21\\4\\20\\3\\21\\1\\20\\3\\21\\2\\20\\7\\21\\3\\20\\4\\21\\15\\20\""
                                                                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                                                                                operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                                rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                    node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                    escapedValue: "\"\\14\\21\\1\\20\\1\\21\\12\\4\\4\\21\\2\\20\\46\\1\\1\\0\\1\\1\\5\\0\""
                                                                                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                                                                            operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                            rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                                node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                                escapedValue: "\"\\1\\1\\2\\0\\53\\1\\1\\0\\4\\1\\u0100\\2\\111\\1\\1\\0\\4\\1\\2\\0\""
                                                                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                                                                                        operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                        rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                            node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                            escapedValue: "\"\\7\\1\\1\\0\\1\\1\\1\\0\\4\\1\\2\\0\\51\\1\\1\\0\\4\\1\\2\\0\""
                                                                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                                                    operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                    rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                        node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                        escapedValue: "\"\\41\\1\\1\\0\\4\\1\\2\\0\\7\\1\\1\\0\\1\\1\\1\\0\\4\\1\\2\\0\""
                                                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                                                                operator: "+",
                                                                                                                                                                                                                                                                                                                                                                                rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                    node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                    escapedValue: "\"\\17\\1\\1\\0\\71\\1\\1\\0\\4\\1\\2\\0\\103\\1\\2\\0\\3\\3\\40\\0\""
                                                                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                                                            operator: "+",
                                                                                                                                                                                                                                                                                                                                                                            rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                                node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                                escapedValue: "\"\\20\\1\\20\\0\\125\\1\\14\\0\\u026c\\1\\2\\0\\21\\1\\1\\0\\32\\1\\5\\0\""
                                                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                                                                        operator: "+",
                                                                                                                                                                                                                                                                                                                                                                        rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                            node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                            escapedValue: "\"\\113\\1\\3\\0\\3\\1\\17\\0\\15\\1\\1\\0\\4\\1\\3\\3\\13\\0\\22\\1\""
                                                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                                    operator: "+",
                                                                                                                                                                                                                                                                                                                                                                    rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                        node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                        escapedValue: "\"\\3\\3\\13\\0\\22\\1\\2\\3\\14\\0\\15\\1\\1\\0\\3\\1\\1\\0\\2\\3\""
                                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                                                operator: "+",
                                                                                                                                                                                                                                                                                                                                                                rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                    node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                    escapedValue: "\"\\14\\0\\64\\20\\40\\21\\3\\0\\1\\20\\4\\0\\1\\20\\1\\21\\2\\0\\12\\4\""
                                                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                                            operator: "+",
                                                                                                                                                                                                                                                                                                                                                            rightOperand: {
                                                                                                                                                                                                                                                                                                                                                                node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                                escapedValue: "\"\\41\\0\\4\\3\\1\\0\\12\\4\\6\\0\\130\\1\\10\\0\\51\\1\\1\\3\\1\\1\""
                                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                                                        operator: "+",
                                                                                                                                                                                                                                                                                                                                                        rightOperand: {
                                                                                                                                                                                                                                                                                                                                                            node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                            escapedValue: "\"\\5\\0\\106\\1\\12\\0\\35\\1\\3\\0\\14\\3\\4\\0\\14\\3\\12\\0\\12\\4\""
                                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                    operator: "+",
                                                                                                                                                                                                                                                                                                                                                    rightOperand: {
                                                                                                                                                                                                                                                                                                                                                        node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                        escapedValue: "\"\\36\\20\\2\\0\\5\\20\\13\\0\\54\\20\\4\\0\\21\\21\\7\\20\\2\\21\\6\\0\""
                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                                operator: "+",
                                                                                                                                                                                                                                                                                                                                                rightOperand: {
                                                                                                                                                                                                                                                                                                                                                    node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                    escapedValue: "\"\\12\\4\\1\\20\\3\\0\\2\\20\\40\\0\\27\\1\\5\\3\\4\\0\\65\\20\\12\\21\""
                                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                            operator: "+",
                                                                                                                                                                                                                                                                                                                                            rightOperand: {
                                                                                                                                                                                                                                                                                                                                                node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                                escapedValue: "\"\\1\\0\\35\\21\\2\\0\\1\\3\\12\\4\\6\\0\\12\\4\\6\\0\\16\\20\\122\\0\""
                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                                        operator: "+",
                                                                                                                                                                                                                                                                                                                                        rightOperand: {
                                                                                                                                                                                                                                                                                                                                            node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                            escapedValue: "\"\\5\\3\\57\\1\\21\\3\\7\\1\\4\\0\\12\\4\\21\\0\\11\\3\\14\\0\\3\\3\""
                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                    operator: "+",
                                                                                                                                                                                                                                                                                                                                    rightOperand: {
                                                                                                                                                                                                                                                                                                                                        node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                        escapedValue: "\"\\36\\1\\15\\3\\2\\1\\12\\4\\54\\1\\16\\3\\14\\0\\44\\1\\24\\3\\10\\0\""
                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                operator: "+",
                                                                                                                                                                                                                                                                                                                                rightOperand: {
                                                                                                                                                                                                                                                                                                                                    node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                    escapedValue: "\"\\12\\4\\3\\0\\3\\1\\12\\4\\44\\1\\122\\0\\3\\3\\1\\0\\25\\3\\4\\1\""
                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                            operator: "+",
                                                                                                                                                                                                                                                                                                                            rightOperand: {
                                                                                                                                                                                                                                                                                                                                node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                                escapedValue: "\"\\1\\3\\4\\1\\3\\3\\2\\1\\11\\0\\300\\1\\47\\3\\25\\0\\4\\3\\u0116\\1\""
                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                        operator: "+",
                                                                                                                                                                                                                                                                                                                        rightOperand: {
                                                                                                                                                                                                                                                                                                                            node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                            escapedValue: "\"\\2\\0\\6\\1\\2\\0\\46\\1\\2\\0\\6\\1\\2\\0\\10\\1\\1\\0\\1\\1\""
                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                    operator: "+",
                                                                                                                                                                                                                                                                                                                    rightOperand: {
                                                                                                                                                                                                                                                                                                                        node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                        escapedValue: "\"\\1\\0\\1\\1\\1\\0\\1\\1\\1\\0\\37\\1\\2\\0\\65\\1\\1\\0\\7\\1\""
                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                operator: "+",
                                                                                                                                                                                                                                                                                                                rightOperand: {
                                                                                                                                                                                                                                                                                                                    node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                    escapedValue: "\"\\1\\0\\1\\1\\3\\0\\3\\1\\1\\0\\7\\1\\3\\0\\4\\1\\2\\0\\6\\1\""
                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                            operator: "+",
                                                                                                                                                                                                                                                                                                            rightOperand: {
                                                                                                                                                                                                                                                                                                                node: "StringLiteral",
                                                                                                                                                                                                                                                                                                                escapedValue: "\"\\4\\0\\15\\1\\5\\0\\3\\1\\1\\0\\7\\1\\17\\0\\4\\3\\10\\0\\2\\10\""
                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                        operator: "+",
                                                                                                                                                                                                                                                                                                        rightOperand: {
                                                                                                                                                                                                                                                                                                            node: "StringLiteral",
                                                                                                                                                                                                                                                                                                            escapedValue: "\"\\12\\0\\1\\10\\2\\0\\1\\6\\2\\0\\5\\3\\20\\0\\2\\11\\3\\0\\1\\7\""
                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                    operator: "+",
                                                                                                                                                                                                                                                                                                    rightOperand: {
                                                                                                                                                                                                                                                                                                        node: "StringLiteral",
                                                                                                                                                                                                                                                                                                        escapedValue: "\"\\17\\0\\1\\11\\13\\0\\5\\3\\1\\0\\12\\3\\1\\0\\1\\1\\15\\0\\1\\1\""
                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                operator: "+",
                                                                                                                                                                                                                                                                                                rightOperand: {
                                                                                                                                                                                                                                                                                                    node: "StringLiteral",
                                                                                                                                                                                                                                                                                                    escapedValue: "\"\\20\\0\\15\\1\\63\\0\\41\\3\\21\\0\\1\\1\\4\\0\\1\\1\\2\\0\\12\\1\""
                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                            operator: "+",
                                                                                                                                                                                                                                                                                            rightOperand: {
                                                                                                                                                                                                                                                                                                node: "StringLiteral",
                                                                                                                                                                                                                                                                                                escapedValue: "\"\\1\\0\\1\\1\\3\\0\\5\\1\\6\\0\\1\\1\\1\\0\\1\\1\\1\\0\\1\\1\""
                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                        operator: "+",
                                                                                                                                                                                                                                                                                        rightOperand: {
                                                                                                                                                                                                                                                                                            node: "StringLiteral",
                                                                                                                                                                                                                                                                                            escapedValue: "\"\\1\\0\\4\\1\\1\\0\\13\\1\\2\\0\\4\\1\\5\\0\\5\\1\\4\\0\\1\\1\""
                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                    operator: "+",
                                                                                                                                                                                                                                                                                    rightOperand: {
                                                                                                                                                                                                                                                                                        node: "StringLiteral",
                                                                                                                                                                                                                                                                                        escapedValue: "\"\\21\\0\\51\\1\\u032d\\0\\64\\1\\u0716\\0\\57\\1\\1\\0\\57\\1\\1\\0\\205\\1\""
                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                operator: "+",
                                                                                                                                                                                                                                                                                rightOperand: {
                                                                                                                                                                                                                                                                                    node: "StringLiteral",
                                                                                                                                                                                                                                                                                    escapedValue: "\"\\6\\0\\4\\1\\3\\3\\2\\1\\14\\0\\46\\1\\1\\0\\1\\1\\5\\0\\1\\1\""
                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                            operator: "+",
                                                                                                                                                                                                                                                                            rightOperand: {
                                                                                                                                                                                                                                                                                node: "StringLiteral",
                                                                                                                                                                                                                                                                                escapedValue: "\"\\2\\0\\70\\1\\7\\0\\1\\1\\17\\0\\1\\3\\27\\1\\11\\0\\7\\1\\1\\0\""
                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                        operator: "+",
                                                                                                                                                                                                                                                                        rightOperand: {
                                                                                                                                                                                                                                                                            node: "StringLiteral",
                                                                                                                                                                                                                                                                            escapedValue: "\"\\7\\1\\1\\0\\7\\1\\1\\0\\7\\1\\1\\0\\7\\1\\1\\0\\7\\1\\1\\0\""
                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                    operator: "+",
                                                                                                                                                                                                                                                                    rightOperand: {
                                                                                                                                                                                                                                                                        node: "StringLiteral",
                                                                                                                                                                                                                                                                        escapedValue: "\"\\7\\1\\1\\0\\7\\1\\1\\0\\40\\3\\57\\0\\1\\1\\120\\0\\32\\12\\1\\0\""
                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                operator: "+",
                                                                                                                                                                                                                                                                rightOperand: {
                                                                                                                                                                                                                                                                    node: "StringLiteral",
                                                                                                                                                                                                                                                                    escapedValue: "\"\\131\\12\\14\\0\\326\\12\\57\\0\\1\\1\\1\\0\\1\\12\\31\\0\\11\\12\\6\\3\""
                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                            operator: "+",
                                                                                                                                                                                                                                                            rightOperand: {
                                                                                                                                                                                                                                                                node: "StringLiteral",
                                                                                                                                                                                                                                                                escapedValue: "\"\\1\\0\\5\\5\\2\\0\\3\\12\\1\\1\\1\\1\\4\\0\\126\\13\\2\\0\\2\\3\""
                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                        operator: "+",
                                                                                                                                                                                                                                                        rightOperand: {
                                                                                                                                                                                                                                                            node: "StringLiteral",
                                                                                                                                                                                                                                                            escapedValue: "\"\\2\\5\\3\\13\\133\\5\\1\\0\\4\\5\\5\\0\\51\\1\\3\\0\\136\\2\\21\\0\""
                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                    operator: "+",
                                                                                                                                                                                                                                                    rightOperand: {
                                                                                                                                                                                                                                                        node: "StringLiteral",
                                                                                                                                                                                                                                                        escapedValue: "\"\\33\\1\\65\\0\\20\\5\\320\\0\\57\\5\\1\\0\\130\\5\\250\\0\\u19b6\\12\\112\\0\""
                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                operator: "+",
                                                                                                                                                                                                                                                rightOperand: {
                                                                                                                                                                                                                                                    node: "StringLiteral",
                                                                                                                                                                                                                                                    escapedValue: "\"\\u51cd\\12\\63\\0\\u048d\\1\\103\\0\\56\\1\\2\\0\\u010d\\1\\3\\0\\20\\1\\12\\4\""
                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                            operator: "+",
                                                                                                                                                                                                                                            rightOperand: {
                                                                                                                                                                                                                                                node: "StringLiteral",
                                                                                                                                                                                                                                                escapedValue: "\"\\2\\1\\24\\0\\57\\1\\4\\3\\1\\0\\12\\3\\1\\0\\31\\1\\7\\0\\1\\3\""
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                        operator: "+",
                                                                                                                                                                                                                                        rightOperand: {
                                                                                                                                                                                                                                            node: "StringLiteral",
                                                                                                                                                                                                                                            escapedValue: "\"\\120\\1\\2\\3\\45\\0\\11\\1\\2\\0\\147\\1\\2\\0\\4\\1\\1\\0\\4\\1\""
                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                    operator: "+",
                                                                                                                                                                                                                                    rightOperand: {
                                                                                                                                                                                                                                        node: "StringLiteral",
                                                                                                                                                                                                                                        escapedValue: "\"\\14\\0\\13\\1\\115\\0\\12\\1\\1\\3\\3\\1\\1\\3\\4\\1\\1\\3\\27\\1\""
                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                operator: "+",
                                                                                                                                                                                                                                rightOperand: {
                                                                                                                                                                                                                                    node: "StringLiteral",
                                                                                                                                                                                                                                    escapedValue: "\"\\5\\3\\30\\0\\64\\1\\14\\0\\2\\3\\62\\1\\21\\3\\13\\0\\12\\4\\6\\0\""
                                                                                                                                                                                                                                },
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                            operator: "+",
                                                                                                                                                                                                                            rightOperand: {
                                                                                                                                                                                                                                node: "StringLiteral",
                                                                                                                                                                                                                                escapedValue: "\"\\22\\3\\6\\1\\3\\0\\1\\1\\4\\0\\12\\4\\34\\1\\10\\3\\2\\0\\27\\1\""
                                                                                                                                                                                                                            },
                                                                                                                                                                                                                        },
                                                                                                                                                                                                                        operator: "+",
                                                                                                                                                                                                                        rightOperand: {
                                                                                                                                                                                                                            node: "StringLiteral",
                                                                                                                                                                                                                            escapedValue: "\"\\15\\3\\14\\0\\35\\2\\3\\0\\4\\3\\57\\1\\16\\3\\16\\0\\1\\1\\12\\4\""
                                                                                                                                                                                                                        },
                                                                                                                                                                                                                    },
                                                                                                                                                                                                                    operator: "+",
                                                                                                                                                                                                                    rightOperand: {
                                                                                                                                                                                                                        node: "StringLiteral",
                                                                                                                                                                                                                        escapedValue: "\"\\46\\0\\51\\1\\16\\3\\11\\0\\3\\1\\1\\3\\10\\1\\2\\3\\2\\0\\12\\4\""
                                                                                                                                                                                                                    },
                                                                                                                                                                                                                },
                                                                                                                                                                                                                operator: "+",
                                                                                                                                                                                                                rightOperand: {
                                                                                                                                                                                                                    node: "StringLiteral",
                                                                                                                                                                                                                    escapedValue: "\"\\6\\0\\33\\20\\1\\21\\4\\0\\60\\20\\1\\21\\1\\20\\3\\21\\2\\20\\2\\21\""
                                                                                                                                                                                                                },
                                                                                                                                                                                                            },
                                                                                                                                                                                                            operator: "+",
                                                                                                                                                                                                            rightOperand: {
                                                                                                                                                                                                                node: "StringLiteral",
                                                                                                                                                                                                                escapedValue: "\"\\5\\20\\2\\21\\1\\20\\1\\21\\1\\20\\30\\0\\5\\20\\13\\1\\5\\3\\2\\0\""
                                                                                                                                                                                                            },
                                                                                                                                                                                                        },
                                                                                                                                                                                                        operator: "+",
                                                                                                                                                                                                        rightOperand: {
                                                                                                                                                                                                            node: "StringLiteral",
                                                                                                                                                                                                            escapedValue: "\"\\3\\1\\2\\3\\12\\0\\6\\1\\2\\0\\6\\1\\2\\0\\6\\1\\11\\0\\7\\1\""
                                                                                                                                                                                                        },
                                                                                                                                                                                                    },
                                                                                                                                                                                                    operator: "+",
                                                                                                                                                                                                    rightOperand: {
                                                                                                                                                                                                        node: "StringLiteral",
                                                                                                                                                                                                        escapedValue: "\"\\1\\0\\7\\1\\221\\0\\43\\1\\10\\3\\1\\0\\2\\3\\2\\0\\12\\4\\6\\0\""
                                                                                                                                                                                                    },
                                                                                                                                                                                                },
                                                                                                                                                                                                operator: "+",
                                                                                                                                                                                                rightOperand: {
                                                                                                                                                                                                    node: "StringLiteral",
                                                                                                                                                                                                    escapedValue: "\"\\u2ba4\\2\\14\\0\\27\\2\\4\\0\\61\\2\\u2104\\0\\u016e\\12\\2\\0\\152\\12\\46\\0\""
                                                                                                                                                                                                },
                                                                                                                                                                                            },
                                                                                                                                                                                            operator: "+",
                                                                                                                                                                                            rightOperand: {
                                                                                                                                                                                                node: "StringLiteral",
                                                                                                                                                                                                escapedValue: "\"\\7\\1\\14\\0\\5\\1\\5\\0\\1\\16\\1\\3\\12\\16\\1\\0\\15\\16\\1\\0\""
                                                                                                                                                                                            },
                                                                                                                                                                                        },
                                                                                                                                                                                        operator: "+",
                                                                                                                                                                                        rightOperand: {
                                                                                                                                                                                            node: "StringLiteral",
                                                                                                                                                                                            escapedValue: "\"\\5\\16\\1\\0\\1\\16\\1\\0\\2\\16\\1\\0\\2\\16\\1\\0\\12\\16\\142\\1\""
                                                                                                                                                                                        },
                                                                                                                                                                                    },
                                                                                                                                                                                    operator: "+",
                                                                                                                                                                                    rightOperand: {
                                                                                                                                                                                        node: "StringLiteral",
                                                                                                                                                                                        escapedValue: "\"\\41\\0\\u016b\\1\\22\\0\\100\\1\\2\\0\\66\\1\\50\\0\\14\\1\\4\\0\\20\\3\""
                                                                                                                                                                                    },
                                                                                                                                                                                },
                                                                                                                                                                                operator: "+",
                                                                                                                                                                                rightOperand: {
                                                                                                                                                                                    node: "StringLiteral",
                                                                                                                                                                                    escapedValue: "\"\\1\\7\\2\\0\\1\\6\\1\\7\\13\\0\\7\\3\\14\\0\\2\\11\\30\\0\\3\\11\""
                                                                                                                                                                                },
                                                                                                                                                                            },
                                                                                                                                                                            operator: "+",
                                                                                                                                                                            rightOperand: {
                                                                                                                                                                                node: "StringLiteral",
                                                                                                                                                                                escapedValue: "\"\\1\\7\\1\\0\\1\\10\\1\\0\\1\\7\\1\\6\\32\\0\\5\\1\\1\\0\\207\\1\""
                                                                                                                                                                            },
                                                                                                                                                                        },
                                                                                                                                                                        operator: "+",
                                                                                                                                                                        rightOperand: {
                                                                                                                                                                            node: "StringLiteral",
                                                                                                                                                                            escapedValue: "\"\\2\\0\\1\\3\\7\\0\\1\\10\\4\\0\\1\\7\\1\\0\\1\\10\\1\\0\\12\\4\""
                                                                                                                                                                        },
                                                                                                                                                                    },
                                                                                                                                                                    operator: "+",
                                                                                                                                                                    rightOperand: {
                                                                                                                                                                        node: "StringLiteral",
                                                                                                                                                                        escapedValue: "\"\\1\\6\\1\\7\\5\\0\\32\\1\\4\\0\\1\\11\\1\\0\\32\\1\\13\\0\\70\\5\""
                                                                                                                                                                    },
                                                                                                                                                                },
                                                                                                                                                                operator: "+",
                                                                                                                                                                rightOperand: {
                                                                                                                                                                    node: "StringLiteral",
                                                                                                                                                                    escapedValue: "\"\\2\\3\\37\\2\\3\\0\\6\\2\\2\\0\\6\\2\\2\\0\\6\\2\\2\\0\\3\\2\""
                                                                                                                                                                },
                                                                                                                                                            },
                                                                                                                                                            operator: "+",
                                                                                                                                                            rightOperand: {
                                                                                                                                                                node: "StringLiteral",
                                                                                                                                                                escapedValue: "\"\\34\\0\\3\\3\\4\\0\\14\\1\\1\\0\\32\\1\\1\\0\\23\\1\\1\\0\\2\\1\""
                                                                                                                                                            },
                                                                                                                                                        },
                                                                                                                                                        operator: "+",
                                                                                                                                                        rightOperand: {
                                                                                                                                                            node: "StringLiteral",
                                                                                                                                                            escapedValue: "\"\\1\\0\\17\\1\\2\\0\\16\\1\\42\\0\\173\\1\\105\\0\\65\\1\\210\\0\\1\\3\""
                                                                                                                                                        },
                                                                                                                                                    },
                                                                                                                                                    operator: "+",
                                                                                                                                                    rightOperand: {
                                                                                                                                                        node: "StringLiteral",
                                                                                                                                                        escapedValue: "\"\\202\\0\\35\\1\\3\\0\\61\\1\\57\\0\\37\\1\\21\\0\\33\\1\\65\\0\\36\\1\""
                                                                                                                                                    },
                                                                                                                                                },
                                                                                                                                                operator: "+",
                                                                                                                                                rightOperand: {
                                                                                                                                                    node: "StringLiteral",
                                                                                                                                                    escapedValue: "\"\\2\\0\\44\\1\\4\\0\\10\\1\\1\\0\\5\\1\\52\\0\\236\\1\\2\\0\\12\\4\""
                                                                                                                                                },
                                                                                                                                            },
                                                                                                                                            operator: "+",
                                                                                                                                            rightOperand: {
                                                                                                                                                node: "StringLiteral",
                                                                                                                                                escapedValue: "\"\\u0356\\0\\6\\1\\2\\0\\1\\1\\1\\0\\54\\1\\1\\0\\2\\1\\3\\0\\1\\1\""
                                                                                                                                            },
                                                                                                                                        },
                                                                                                                                        operator: "+",
                                                                                                                                        rightOperand: {
                                                                                                                                            node: "StringLiteral",
                                                                                                                                            escapedValue: "\"\\2\\0\\27\\1\\252\\0\\26\\1\\12\\0\\32\\1\\106\\0\\70\\1\\6\\0\\2\\1\""
                                                                                                                                        },
                                                                                                                                    },
                                                                                                                                    operator: "+",
                                                                                                                                    rightOperand: {
                                                                                                                                        node: "StringLiteral",
                                                                                                                                        escapedValue: "\"\\100\\0\\1\\1\\3\\3\\1\\0\\2\\3\\5\\0\\4\\3\\4\\1\\1\\0\\3\\1\""
                                                                                                                                    },
                                                                                                                                },
                                                                                                                                operator: "+",
                                                                                                                                rightOperand: {
                                                                                                                                    node: "StringLiteral",
                                                                                                                                    escapedValue: "\"\\1\\0\\33\\1\\4\\0\\3\\3\\4\\0\\1\\3\\40\\0\\35\\1\\203\\0\\66\\1\""
                                                                                                                                },
                                                                                                                            },
                                                                                                                            operator: "+",
                                                                                                                            rightOperand: {
                                                                                                                                node: "StringLiteral",
                                                                                                                                escapedValue: "\"\\12\\0\\26\\1\\12\\0\\23\\1\\215\\0\\111\\1\\u03b7\\0\\3\\3\\65\\1\\17\\3\""
                                                                                                                            },
                                                                                                                        },
                                                                                                                        operator: "+",
                                                                                                                        rightOperand: {
                                                                                                                            node: "StringLiteral",
                                                                                                                            escapedValue: "\"\\37\\0\\12\\4\\20\\0\\3\\3\\55\\1\\13\\3\\2\\0\\1\\3\\22\\0\\31\\1\""
                                                                                                                        },
                                                                                                                    },
                                                                                                                    operator: "+",
                                                                                                                    rightOperand: {
                                                                                                                        node: "StringLiteral",
                                                                                                                        escapedValue: "\"\\7\\0\\12\\4\\6\\0\\3\\3\\44\\1\\16\\3\\1\\0\\12\\4\\100\\0\\3\\3\""
                                                                                                                    },
                                                                                                                },
                                                                                                                operator: "+",
                                                                                                                rightOperand: {
                                                                                                                    node: "StringLiteral",
                                                                                                                    escapedValue: "\"\\60\\1\\16\\3\\4\\1\\13\\0\\12\\4\\u04a6\\0\\53\\1\\15\\3\\10\\0\\12\\4\""
                                                                                                                },
                                                                                                            },
                                                                                                            operator: "+",
                                                                                                            rightOperand: {
                                                                                                                node: "StringLiteral",
                                                                                                                escapedValue: "\"\\u0936\\0\\u036f\\1\\221\\0\\143\\1\\u0b9d\\0\\u042f\\1\\u33d1\\0\\u0239\\1\\u04c7\\0\\105\\1\""
                                                                                                            },
                                                                                                        },
                                                                                                        operator: "+",
                                                                                                        rightOperand: {
                                                                                                            node: "StringLiteral",
                                                                                                            escapedValue: "\"\\13\\0\\1\\1\\56\\3\\20\\0\\4\\3\\15\\1\\u4060\\0\\1\\5\\1\\13\\u2163\\0\""
                                                                                                        },
                                                                                                    },
                                                                                                    operator: "+",
                                                                                                    rightOperand: {
                                                                                                        node: "StringLiteral",
                                                                                                        escapedValue: "\"\\5\\3\\3\\0\\26\\3\\2\\0\\7\\3\\36\\0\\4\\3\\224\\0\\3\\3\\u01bb\\0\""
                                                                                                    },
                                                                                                },
                                                                                                operator: "+",
                                                                                                rightOperand: {
                                                                                                    node: "StringLiteral",
                                                                                                    escapedValue: "\"\\125\\1\\1\\0\\107\\1\\1\\0\\2\\1\\2\\0\\1\\1\\2\\0\\2\\1\\2\\0\""
                                                                                                },
                                                                                            },
                                                                                            operator: "+",
                                                                                            rightOperand: {
                                                                                                node: "StringLiteral",
                                                                                                escapedValue: "\"\\4\\1\\1\\0\\14\\1\\1\\0\\1\\1\\1\\0\\7\\1\\1\\0\\101\\1\\1\\0\""
                                                                                            },
                                                                                        },
                                                                                        operator: "+",
                                                                                        rightOperand: {
                                                                                            node: "StringLiteral",
                                                                                            escapedValue: "\"\\4\\1\\2\\0\\10\\1\\1\\0\\7\\1\\1\\0\\34\\1\\1\\0\\4\\1\\1\\0\""
                                                                                        },
                                                                                    },
                                                                                    operator: "+",
                                                                                    rightOperand: {
                                                                                        node: "StringLiteral",
                                                                                        escapedValue: "\"\\5\\1\\1\\0\\1\\1\\3\\0\\7\\1\\1\\0\\u0154\\1\\2\\0\\31\\1\\1\\0\""
                                                                                    },
                                                                                },
                                                                                operator: "+",
                                                                                rightOperand: {
                                                                                    node: "StringLiteral",
                                                                                    escapedValue: "\"\\31\\1\\1\\0\\37\\1\\1\\0\\31\\1\\1\\0\\37\\1\\1\\0\\31\\1\\1\\0\""
                                                                                },
                                                                            },
                                                                            operator: "+",
                                                                            rightOperand: {
                                                                                node: "StringLiteral",
                                                                                escapedValue: "\"\\37\\1\\1\\0\\31\\1\\1\\0\\37\\1\\1\\0\\31\\1\\1\\0\\10\\1\\2\\0\""
                                                                            },
                                                                        },
                                                                        operator: "+",
                                                                        rightOperand: {
                                                                            node: "StringLiteral",
                                                                            escapedValue: "\"\\62\\4\\u1600\\0\\4\\1\\1\\0\\33\\1\\1\\0\\2\\1\\1\\0\\1\\1\\2\\0\""
                                                                        },
                                                                    },
                                                                    operator: "+",
                                                                    rightOperand: {
                                                                        node: "StringLiteral",
                                                                        escapedValue: "\"\\1\\1\\1\\0\\12\\1\\1\\0\\4\\1\\1\\0\\1\\1\\1\\0\\1\\1\\6\\0\""
                                                                    },
                                                                },
                                                                operator: "+",
                                                                rightOperand: {
                                                                    node: "StringLiteral",
                                                                    escapedValue: "\"\\1\\1\\4\\0\\1\\1\\1\\0\\1\\1\\1\\0\\1\\1\\1\\0\\3\\1\\1\\0\""
                                                                },
                                                            },
                                                            operator: "+",
                                                            rightOperand: {
                                                                node: "StringLiteral",
                                                                escapedValue: "\"\\2\\1\\1\\0\\1\\1\\2\\0\\1\\1\\1\\0\\1\\1\\1\\0\\1\\1\\1\\0\""
                                                            },
                                                        },
                                                        operator: "+",
                                                        rightOperand: {
                                                            node: "StringLiteral",
                                                            escapedValue: "\"\\1\\1\\1\\0\\1\\1\\1\\0\\2\\1\\1\\0\\1\\1\\2\\0\\4\\1\\1\\0\""
                                                        },
                                                    },
                                                    operator: "+",
                                                    rightOperand: {
                                                        node: "StringLiteral",
                                                        escapedValue: "\"\\7\\1\\1\\0\\4\\1\\1\\0\\4\\1\\1\\0\\1\\1\\1\\0\\12\\1\\1\\0\""
                                                    },
                                                },
                                                operator: "+",
                                                rightOperand: {
                                                    node: "StringLiteral",
                                                    escapedValue: "\"\\21\\1\\5\\0\\3\\1\\1\\0\\5\\1\\1\\0\\21\\1\\u032a\\0\\32\\17\\1\\13\""
                                                },
                                            },
                                            operator: "+",
                                            rightOperand: {
                                                node: "StringLiteral",
                                                escapedValue: "\"\\u0dff\\0\\ua6d7\\12\\51\\0\\u1035\\12\\13\\0\\336\\12\\u3fe2\\0\\u021e\\12\\uffff\\0\\uffff\\0\\uffff\\0\\uffff\\0\\uffff\\0\\uffff\\0\\uffff\\0\\uffff\\0\\uffff\\0\\uffff\\0\\uffff\\0\\u05ee\\0\""
                                            },
                                        },
                                        operator: "+",
                                        rightOperand: {
                                            node: "StringLiteral",
                                            escapedValue: "\"\\1\\3\\36\\0\\140\\3\\200\\0\\360\\3\\uffff\\0\\uffff\\0\\ufe12\\0\""
                                        },
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "ArrayType",
                                componentType: {
                                    node: "PrimitiveType",
                                    primitiveTypeCode: "char"
                                }
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "ZZ_CMAP"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "MethodInvocation",
                                        expression: null,
                                        typeArguments: [],
                                        name: {
                                            node: "SimpleName",
                                            identifier: "zzUnpackCMap"
                                        },
                                        arguments: [
                                            {
                                                node: "SimpleName",
                                                identifier: "ZZ_CMAP_PACKED"
                                            }
                                        ]
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "ArrayType",
                                componentType: {
                                    node: "PrimitiveType",
                                    primitiveTypeCode: "int"
                                }
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "ZZ_ACTION"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "MethodInvocation",
                                        expression: null,
                                        typeArguments: [],
                                        name: {
                                            node: "SimpleName",
                                            identifier: "zzUnpackAction"
                                        },
                                        arguments: []
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "SimpleType",
                                name: {
                                    node: "SimpleName",
                                    identifier: "String"
                                }
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "ZZ_ACTION_PACKED_0"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "InfixExpression",
                                        leftOperand: {
                                            node: "InfixExpression",
                                            leftOperand: {
                                                node: "StringLiteral",
                                                escapedValue: "\"\\1\\0\\1\\1\\1\\2\\1\\3\\1\\4\\1\\5\\1\\1\\1\\6\""
                                            },
                                            operator: "+",
                                            rightOperand: {
                                                node: "StringLiteral",
                                                escapedValue: "\"\\1\\7\\1\\2\\1\\1\\1\\10\\1\\2\\1\\0\\1\\2\\1\\0\""
                                            },
                                        },
                                        operator: "+",
                                        rightOperand: {
                                            node: "StringLiteral",
                                            escapedValue: "\"\\1\\4\\1\\0\\2\\2\\2\\0\\1\\1\\1\\0\""
                                        },
                                    }
                                }
                            ]
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "ArrayType",
                                componentType: {
                                    node: "PrimitiveType",
                                    primitiveTypeCode: "int"
                                }
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "zzUnpackAction"
                            },
                            parameters: [],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "ArrayType",
                                            componentType: {
                                                node: "PrimitiveType",
                                                primitiveTypeCode: "int"
                                            }
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "result"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "ArrayCreation",
                                                    type: {
                                                        node: "ArrayType",
                                                        componentType: {
                                                            node: "PrimitiveType",
                                                            primitiveTypeCode: "int"
                                                        }
                                                    },
                                                    dimensions: [
                                                        {
                                                            node: "NumberLiteral",
                                                            token: "24"
                                                        }
                                                    ],
                                                    initializer: null
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "offset"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "NumberLiteral",
                                                    token: "0"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "Assignment",
                                            leftHandSide: {
                                                node: "SimpleName",
                                                identifier: "offset"
                                            },
                                            operator: "=",
                                            rightHandSide: {
                                                node: "MethodInvocation",
                                                expression: null,
                                                typeArguments: [],
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "zzUnpackAction"
                                                },
                                                arguments: [
                                                    {
                                                        node: "SimpleName",
                                                        identifier: "ZZ_ACTION_PACKED_0"
                                                    },
                                                    {
                                                        node: "SimpleName",
                                                        identifier: "offset"
                                                    },
                                                    {
                                                        node: "SimpleName",
                                                        identifier: "result"
                                                    }
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        node: "ReturnStatement",
                                        expression: {
                                            node: "SimpleName",
                                            identifier: "result"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "zzUnpackAction"
                            },
                            parameters: [
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "SimpleType",
                                        name: {
                                            node: "SimpleName",
                                            identifier: "String"
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "packed"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                },
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "PrimitiveType",
                                        primitiveTypeCode: "int"
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "offset"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                },
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "ArrayType",
                                        componentType: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "result"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "i"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "NumberLiteral",
                                                    token: "0"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "j"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "SimpleName",
                                                    identifier: "offset"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "l"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "MethodInvocation",
                                                    expression: {
                                                        node: "SimpleName",
                                                        identifier: "packed"
                                                    },
                                                    typeArguments: [],
                                                    name: {
                                                        node: "SimpleName",
                                                        identifier: "length"
                                                    },
                                                    arguments: []
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "WhileStatement",
                                        expression: {
                                            node: "InfixExpression",
                                            leftOperand: {
                                                node: "SimpleName",
                                                identifier: "i"
                                            },
                                            operator: "<",
                                            rightOperand: {
                                                node: "SimpleName",
                                                identifier: "l"
                                            },
                                        },
                                        body: {
                                            node: "Block",
                                            statements: [
                                                {
                                                    node: "VariableDeclarationStatement",
                                                    modifiers: [],
                                                    type: {
                                                        node: "PrimitiveType",
                                                        primitiveTypeCode: "int"
                                                    },
                                                    fragments: [
                                                        {
                                                            node: "VariableDeclarationFragment",
                                                            name: {
                                                                node: "SimpleName",
                                                                identifier: "count"
                                                            },
                                                            extraDimensions: 0,
                                                            initializer: {
                                                                node: "MethodInvocation",
                                                                expression: {
                                                                    node: "SimpleName",
                                                                    identifier: "packed"
                                                                },
                                                                typeArguments: [],
                                                                name: {
                                                                    node: "SimpleName",
                                                                    identifier: "charAt"
                                                                },
                                                                arguments: [
                                                                    {
                                                                        node: "PostfixExpression",
                                                                        operand: {
                                                                            node: "SimpleName",
                                                                            identifier: "i"
                                                                        },
                                                                        operator: "++"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    node: "VariableDeclarationStatement",
                                                    modifiers: [],
                                                    type: {
                                                        node: "PrimitiveType",
                                                        primitiveTypeCode: "int"
                                                    },
                                                    fragments: [
                                                        {
                                                            node: "VariableDeclarationFragment",
                                                            name: {
                                                                node: "SimpleName",
                                                                identifier: "value"
                                                            },
                                                            extraDimensions: 0,
                                                            initializer: {
                                                                node: "MethodInvocation",
                                                                expression: {
                                                                    node: "SimpleName",
                                                                    identifier: "packed"
                                                                },
                                                                typeArguments: [],
                                                                name: {
                                                                    node: "SimpleName",
                                                                    identifier: "charAt"
                                                                },
                                                                arguments: [
                                                                    {
                                                                        node: "PostfixExpression",
                                                                        operand: {
                                                                            node: "SimpleName",
                                                                            identifier: "i"
                                                                        },
                                                                        operator: "++"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    node: "DoStatement",
                                                    body: {
                                                        node: "ExpressionStatement",
                                                        expression: {
                                                            node: "Assignment",
                                                            leftHandSide: {
                                                                node: "ArrayAccess",
                                                                array: {
                                                                    node: "SimpleName",
                                                                    identifier: "result"
                                                                },
                                                                index: {
                                                                    node: "PostfixExpression",
                                                                    operand: {
                                                                        node: "SimpleName",
                                                                        identifier: "j"
                                                                    },
                                                                    operator: "++"
                                                                }
                                                            },
                                                            operator: "=",
                                                            rightHandSide: {
                                                                node: "SimpleName",
                                                                identifier: "value"
                                                            }
                                                        }
                                                    },
                                                    expression: {
                                                        node: "InfixExpression",
                                                        leftOperand: {
                                                            node: "PrefixExpression",
                                                            operator: "--",
                                                            operand: {
                                                                node: "SimpleName",
                                                                identifier: "count"
                                                            }
                                                        },
                                                        operator: ">",
                                                        rightOperand: {
                                                            node: "NumberLiteral",
                                                            token: "0"
                                                        },
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        node: "ReturnStatement",
                                        expression: {
                                            node: "SimpleName",
                                            identifier: "j"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "ArrayType",
                                componentType: {
                                    node: "PrimitiveType",
                                    primitiveTypeCode: "int"
                                }
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "ZZ_ROWMAP"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "MethodInvocation",
                                        expression: null,
                                        typeArguments: [],
                                        name: {
                                            node: "SimpleName",
                                            identifier: "zzUnpackRowMap"
                                        },
                                        arguments: []
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "SimpleType",
                                name: {
                                    node: "SimpleName",
                                    identifier: "String"
                                }
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "ZZ_ROWMAP_PACKED_0"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "InfixExpression",
                                        leftOperand: {
                                            node: "InfixExpression",
                                            leftOperand: {
                                                node: "StringLiteral",
                                                escapedValue: "\"\\0\\0\\0\\22\\0\\44\\0\\66\\0\\110\\0\\132\\0\\154\\0\\176\""
                                            },
                                            operator: "+",
                                            rightOperand: {
                                                node: "StringLiteral",
                                                escapedValue: "\"\\0\\220\\0\\242\\0\\264\\0\\306\\0\\330\\0\\352\\0\\374\\0\\u010e\""
                                            },
                                        },
                                        operator: "+",
                                        rightOperand: {
                                            node: "StringLiteral",
                                            escapedValue: "\"\\0\\u0120\\0\\154\\0\\u0132\\0\\u0144\\0\\u0156\\0\\264\\0\\u0168\\0\\u017a\""
                                        },
                                    }
                                }
                            ]
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "ArrayType",
                                componentType: {
                                    node: "PrimitiveType",
                                    primitiveTypeCode: "int"
                                }
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "zzUnpackRowMap"
                            },
                            parameters: [],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "ArrayType",
                                            componentType: {
                                                node: "PrimitiveType",
                                                primitiveTypeCode: "int"
                                            }
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "result"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "ArrayCreation",
                                                    type: {
                                                        node: "ArrayType",
                                                        componentType: {
                                                            node: "PrimitiveType",
                                                            primitiveTypeCode: "int"
                                                        }
                                                    },
                                                    dimensions: [
                                                        {
                                                            node: "NumberLiteral",
                                                            token: "24"
                                                        }
                                                    ],
                                                    initializer: null
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "offset"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "NumberLiteral",
                                                    token: "0"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "Assignment",
                                            leftHandSide: {
                                                node: "SimpleName",
                                                identifier: "offset"
                                            },
                                            operator: "=",
                                            rightHandSide: {
                                                node: "MethodInvocation",
                                                expression: null,
                                                typeArguments: [],
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "zzUnpackRowMap"
                                                },
                                                arguments: [
                                                    {
                                                        node: "SimpleName",
                                                        identifier: "ZZ_ROWMAP_PACKED_0"
                                                    },
                                                    {
                                                        node: "SimpleName",
                                                        identifier: "offset"
                                                    },
                                                    {
                                                        node: "SimpleName",
                                                        identifier: "result"
                                                    }
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        node: "ReturnStatement",
                                        expression: {
                                            node: "SimpleName",
                                            identifier: "result"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "zzUnpackRowMap"
                            },
                            parameters: [
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "SimpleType",
                                        name: {
                                            node: "SimpleName",
                                            identifier: "String"
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "packed"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                },
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "PrimitiveType",
                                        primitiveTypeCode: "int"
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "offset"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                },
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "ArrayType",
                                        componentType: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "result"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "i"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "NumberLiteral",
                                                    token: "0"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "j"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "SimpleName",
                                                    identifier: "offset"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "l"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "MethodInvocation",
                                                    expression: {
                                                        node: "SimpleName",
                                                        identifier: "packed"
                                                    },
                                                    typeArguments: [],
                                                    name: {
                                                        node: "SimpleName",
                                                        identifier: "length"
                                                    },
                                                    arguments: []
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "WhileStatement",
                                        expression: {
                                            node: "InfixExpression",
                                            leftOperand: {
                                                node: "SimpleName",
                                                identifier: "i"
                                            },
                                            operator: "<",
                                            rightOperand: {
                                                node: "SimpleName",
                                                identifier: "l"
                                            },
                                        },
                                        body: {
                                            node: "Block",
                                            statements: [
                                                {
                                                    node: "VariableDeclarationStatement",
                                                    modifiers: [],
                                                    type: {
                                                        node: "PrimitiveType",
                                                        primitiveTypeCode: "int"
                                                    },
                                                    fragments: [
                                                        {
                                                            node: "VariableDeclarationFragment",
                                                            name: {
                                                                node: "SimpleName",
                                                                identifier: "high"
                                                            },
                                                            extraDimensions: 0,
                                                            initializer: {
                                                                node: "InfixExpression",
                                                                leftOperand: {
                                                                    node: "MethodInvocation",
                                                                    expression: {
                                                                        node: "SimpleName",
                                                                        identifier: "packed"
                                                                    },
                                                                    typeArguments: [],
                                                                    name: {
                                                                        node: "SimpleName",
                                                                        identifier: "charAt"
                                                                    },
                                                                    arguments: [
                                                                        {
                                                                            node: "PostfixExpression",
                                                                            operand: {
                                                                                node: "SimpleName",
                                                                                identifier: "i"
                                                                            },
                                                                            operator: "++"
                                                                        }
                                                                    ]
                                                                },
                                                                operator: "<<",
                                                                rightOperand: {
                                                                    node: "NumberLiteral",
                                                                    token: "16"
                                                                },
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    node: "ExpressionStatement",
                                                    expression: {
                                                        node: "Assignment",
                                                        leftHandSide: {
                                                            node: "ArrayAccess",
                                                            array: {
                                                                node: "SimpleName",
                                                                identifier: "result"
                                                            },
                                                            index: {
                                                                node: "PostfixExpression",
                                                                operand: {
                                                                    node: "SimpleName",
                                                                    identifier: "j"
                                                                },
                                                                operator: "++"
                                                            }
                                                        },
                                                        operator: "=",
                                                        rightHandSide: {
                                                            node: "InfixExpression",
                                                            leftOperand: {
                                                                node: "SimpleName",
                                                                identifier: "high"
                                                            },
                                                            operator: "|",
                                                            rightOperand: {
                                                                node: "MethodInvocation",
                                                                expression: {
                                                                    node: "SimpleName",
                                                                    identifier: "packed"
                                                                },
                                                                typeArguments: [],
                                                                name: {
                                                                    node: "SimpleName",
                                                                    identifier: "charAt"
                                                                },
                                                                arguments: [
                                                                    {
                                                                        node: "PostfixExpression",
                                                                        operand: {
                                                                            node: "SimpleName",
                                                                            identifier: "i"
                                                                        },
                                                                        operator: "++"
                                                                    }
                                                                ]
                                                            },
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        node: "ReturnStatement",
                                        expression: {
                                            node: "SimpleName",
                                            identifier: "j"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "ArrayType",
                                componentType: {
                                    node: "PrimitiveType",
                                    primitiveTypeCode: "int"
                                }
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "ZZ_TRANS"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "MethodInvocation",
                                        expression: null,
                                        typeArguments: [],
                                        name: {
                                            node: "SimpleName",
                                            identifier: "zzUnpackTrans"
                                        },
                                        arguments: []
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "SimpleType",
                                name: {
                                    node: "SimpleName",
                                    identifier: "String"
                                }
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "ZZ_TRANS_PACKED_0"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "InfixExpression",
                                        leftOperand: {
                                            node: "InfixExpression",
                                            leftOperand: {
                                                node: "InfixExpression",
                                                leftOperand: {
                                                    node: "InfixExpression",
                                                    leftOperand: {
                                                        node: "InfixExpression",
                                                        leftOperand: {
                                                            node: "InfixExpression",
                                                            leftOperand: {
                                                                node: "InfixExpression",
                                                                leftOperand: {
                                                                    node: "InfixExpression",
                                                                    leftOperand: {
                                                                        node: "InfixExpression",
                                                                        leftOperand: {
                                                                            node: "InfixExpression",
                                                                            leftOperand: {
                                                                                node: "InfixExpression",
                                                                                leftOperand: {
                                                                                    node: "InfixExpression",
                                                                                    leftOperand: {
                                                                                        node: "InfixExpression",
                                                                                        leftOperand: {
                                                                                            node: "InfixExpression",
                                                                                            leftOperand: {
                                                                                                node: "InfixExpression",
                                                                                                leftOperand: {
                                                                                                    node: "InfixExpression",
                                                                                                    leftOperand: {
                                                                                                        node: "InfixExpression",
                                                                                                        leftOperand: {
                                                                                                            node: "InfixExpression",
                                                                                                            leftOperand: {
                                                                                                                node: "InfixExpression",
                                                                                                                leftOperand: {
                                                                                                                    node: "InfixExpression",
                                                                                                                    leftOperand: {
                                                                                                                        node: "InfixExpression",
                                                                                                                        leftOperand: {
                                                                                                                            node: "InfixExpression",
                                                                                                                            leftOperand: {
                                                                                                                                node: "InfixExpression",
                                                                                                                                leftOperand: {
                                                                                                                                    node: "StringLiteral",
                                                                                                                                    escapedValue: "\"\\1\\2\\1\\3\\1\\4\\1\\2\\1\\5\\1\\6\\3\\2\\1\\7\""
                                                                                                                                },
                                                                                                                                operator: "+",
                                                                                                                                rightOperand: {
                                                                                                                                    node: "StringLiteral",
                                                                                                                                    escapedValue: "\"\\1\\10\\1\\11\\2\\2\\1\\12\\1\\13\\2\\14\\23\\0\\3\\3\""
                                                                                                                                },
                                                                                                                            },
                                                                                                                            operator: "+",
                                                                                                                            rightOperand: {
                                                                                                                                node: "StringLiteral",
                                                                                                                                escapedValue: "\"\\1\\15\\1\\0\\1\\16\\1\\0\\1\\16\\1\\17\\2\\0\\1\\16\""
                                                                                                                            },
                                                                                                                        },
                                                                                                                        operator: "+",
                                                                                                                        rightOperand: {
                                                                                                                            node: "StringLiteral",
                                                                                                                            escapedValue: "\"\\1\\0\\1\\12\\2\\0\\1\\3\\1\\0\\1\\3\\2\\4\\1\\15\""
                                                                                                                        },
                                                                                                                    },
                                                                                                                    operator: "+",
                                                                                                                    rightOperand: {
                                                                                                                        node: "StringLiteral",
                                                                                                                        escapedValue: "\"\\1\\0\\1\\16\\1\\0\\1\\16\\1\\17\\2\\0\\1\\16\\1\\0\""
                                                                                                                    },
                                                                                                                },
                                                                                                                operator: "+",
                                                                                                                rightOperand: {
                                                                                                                    node: "StringLiteral",
                                                                                                                    escapedValue: "\"\\1\\12\\2\\0\\1\\4\\1\\0\\2\\3\\2\\5\\2\\0\\2\\20\""
                                                                                                                },
                                                                                                            },
                                                                                                            operator: "+",
                                                                                                            rightOperand: {
                                                                                                                node: "StringLiteral",
                                                                                                                escapedValue: "\"\\1\\21\\2\\0\\1\\20\\1\\0\\1\\12\\2\\0\\1\\5\\3\\0\""
                                                                                                            },
                                                                                                        },
                                                                                                        operator: "+",
                                                                                                        rightOperand: {
                                                                                                            node: "StringLiteral",
                                                                                                            escapedValue: "\"\\1\\6\\1\\0\\1\\6\\3\\0\\1\\17\\7\\0\\1\\6\\1\\0\""
                                                                                                        },
                                                                                                    },
                                                                                                    operator: "+",
                                                                                                    rightOperand: {
                                                                                                        node: "StringLiteral",
                                                                                                        escapedValue: "\"\\2\\3\\1\\22\\1\\5\\1\\23\\3\\0\\1\\22\\4\\0\\1\\12\""
                                                                                                    },
                                                                                                },
                                                                                                operator: "+",
                                                                                                rightOperand: {
                                                                                                    node: "StringLiteral",
                                                                                                    escapedValue: "\"\\2\\0\\1\\22\\3\\0\\1\\10\\15\\0\\1\\10\\3\\0\\1\\11\""
                                                                                                },
                                                                                            },
                                                                                            operator: "+",
                                                                                            rightOperand: {
                                                                                                node: "StringLiteral",
                                                                                                escapedValue: "\"\\15\\0\\1\\11\\1\\0\\2\\3\\1\\12\\1\\15\\1\\0\\1\\16\""
                                                                                            },
                                                                                        },
                                                                                        operator: "+",
                                                                                        rightOperand: {
                                                                                            node: "StringLiteral",
                                                                                            escapedValue: "\"\\1\\0\\1\\16\\1\\17\\2\\0\\1\\24\\1\\25\\1\\12\\2\\0\""
                                                                                        },
                                                                                    },
                                                                                    operator: "+",
                                                                                    rightOperand: {
                                                                                        node: "StringLiteral",
                                                                                        escapedValue: "\"\\1\\12\\3\\0\\1\\26\\13\\0\\1\\27\\1\\0\\1\\26\\3\\0\""
                                                                                    },
                                                                                },
                                                                                operator: "+",
                                                                                rightOperand: {
                                                                                    node: "StringLiteral",
                                                                                    escapedValue: "\"\\1\\14\\14\\0\\2\\14\\1\\0\\2\\3\\2\\15\\2\\0\\2\\30\""
                                                                                },
                                                                            },
                                                                            operator: "+",
                                                                            rightOperand: {
                                                                                node: "StringLiteral",
                                                                                escapedValue: "\"\\1\\17\\2\\0\\1\\30\\1\\0\\1\\12\\2\\0\\1\\15\\1\\0\""
                                                                            },
                                                                        },
                                                                        operator: "+",
                                                                        rightOperand: {
                                                                            node: "StringLiteral",
                                                                            escapedValue: "\"\\2\\3\\1\\16\\12\\0\\1\\3\\2\\0\\1\\16\\1\\0\\2\\3\""
                                                                        },
                                                                    },
                                                                    operator: "+",
                                                                    rightOperand: {
                                                                        node: "StringLiteral",
                                                                        escapedValue: "\"\\1\\17\\1\\15\\1\\23\\3\\0\\1\\17\\4\\0\\1\\12\\2\\0\""
                                                                    },
                                                                },
                                                                operator: "+",
                                                                rightOperand: {
                                                                    node: "StringLiteral",
                                                                    escapedValue: "\"\\1\\17\\3\\0\\1\\20\\1\\5\\14\\0\\1\\20\\1\\0\\2\\3\""
                                                                },
                                                            },
                                                            operator: "+",
                                                            rightOperand: {
                                                                node: "StringLiteral",
                                                                escapedValue: "\"\\1\\21\\1\\5\\1\\23\\3\\0\\1\\21\\4\\0\\1\\12\\2\\0\""
                                                            },
                                                        },
                                                        operator: "+",
                                                        rightOperand: {
                                                            node: "StringLiteral",
                                                            escapedValue: "\"\\1\\21\\3\\0\\1\\23\\1\\0\\1\\23\\3\\0\\1\\17\\7\\0\""
                                                        },
                                                    },
                                                    operator: "+",
                                                    rightOperand: {
                                                        node: "StringLiteral",
                                                        escapedValue: "\"\\1\\23\\1\\0\\2\\3\\1\\24\\1\\15\\4\\0\\1\\17\\4\\0\""
                                                    },
                                                },
                                                operator: "+",
                                                rightOperand: {
                                                    node: "StringLiteral",
                                                    escapedValue: "\"\\1\\12\\2\\0\\1\\24\\3\\0\\1\\25\\12\\0\\1\\24\\2\\0\""
                                                },
                                            },
                                            operator: "+",
                                            rightOperand: {
                                                node: "StringLiteral",
                                                escapedValue: "\"\\1\\25\\3\\0\\1\\27\\13\\0\\1\\27\\1\\0\\1\\27\\3\\0\""
                                            },
                                        },
                                        operator: "+",
                                        rightOperand: {
                                            node: "StringLiteral",
                                            escapedValue: "\"\\1\\30\\1\\15\\14\\0\\1\\30\""
                                        },
                                    }
                                }
                            ]
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "ArrayType",
                                componentType: {
                                    node: "PrimitiveType",
                                    primitiveTypeCode: "int"
                                }
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "zzUnpackTrans"
                            },
                            parameters: [],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "ArrayType",
                                            componentType: {
                                                node: "PrimitiveType",
                                                primitiveTypeCode: "int"
                                            }
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "result"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "ArrayCreation",
                                                    type: {
                                                        node: "ArrayType",
                                                        componentType: {
                                                            node: "PrimitiveType",
                                                            primitiveTypeCode: "int"
                                                        }
                                                    },
                                                    dimensions: [
                                                        {
                                                            node: "NumberLiteral",
                                                            token: "396"
                                                        }
                                                    ],
                                                    initializer: null
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "offset"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "NumberLiteral",
                                                    token: "0"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "Assignment",
                                            leftHandSide: {
                                                node: "SimpleName",
                                                identifier: "offset"
                                            },
                                            operator: "=",
                                            rightHandSide: {
                                                node: "MethodInvocation",
                                                expression: null,
                                                typeArguments: [],
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "zzUnpackTrans"
                                                },
                                                arguments: [
                                                    {
                                                        node: "SimpleName",
                                                        identifier: "ZZ_TRANS_PACKED_0"
                                                    },
                                                    {
                                                        node: "SimpleName",
                                                        identifier: "offset"
                                                    },
                                                    {
                                                        node: "SimpleName",
                                                        identifier: "result"
                                                    }
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        node: "ReturnStatement",
                                        expression: {
                                            node: "SimpleName",
                                            identifier: "result"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "zzUnpackTrans"
                            },
                            parameters: [
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "SimpleType",
                                        name: {
                                            node: "SimpleName",
                                            identifier: "String"
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "packed"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                },
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "PrimitiveType",
                                        primitiveTypeCode: "int"
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "offset"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                },
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "ArrayType",
                                        componentType: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "result"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "i"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "NumberLiteral",
                                                    token: "0"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "j"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "SimpleName",
                                                    identifier: "offset"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "l"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "MethodInvocation",
                                                    expression: {
                                                        node: "SimpleName",
                                                        identifier: "packed"
                                                    },
                                                    typeArguments: [],
                                                    name: {
                                                        node: "SimpleName",
                                                        identifier: "length"
                                                    },
                                                    arguments: []
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "WhileStatement",
                                        expression: {
                                            node: "InfixExpression",
                                            leftOperand: {
                                                node: "SimpleName",
                                                identifier: "i"
                                            },
                                            operator: "<",
                                            rightOperand: {
                                                node: "SimpleName",
                                                identifier: "l"
                                            },
                                        },
                                        body: {
                                            node: "Block",
                                            statements: [
                                                {
                                                    node: "VariableDeclarationStatement",
                                                    modifiers: [],
                                                    type: {
                                                        node: "PrimitiveType",
                                                        primitiveTypeCode: "int"
                                                    },
                                                    fragments: [
                                                        {
                                                            node: "VariableDeclarationFragment",
                                                            name: {
                                                                node: "SimpleName",
                                                                identifier: "count"
                                                            },
                                                            extraDimensions: 0,
                                                            initializer: {
                                                                node: "MethodInvocation",
                                                                expression: {
                                                                    node: "SimpleName",
                                                                    identifier: "packed"
                                                                },
                                                                typeArguments: [],
                                                                name: {
                                                                    node: "SimpleName",
                                                                    identifier: "charAt"
                                                                },
                                                                arguments: [
                                                                    {
                                                                        node: "PostfixExpression",
                                                                        operand: {
                                                                            node: "SimpleName",
                                                                            identifier: "i"
                                                                        },
                                                                        operator: "++"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    node: "VariableDeclarationStatement",
                                                    modifiers: [],
                                                    type: {
                                                        node: "PrimitiveType",
                                                        primitiveTypeCode: "int"
                                                    },
                                                    fragments: [
                                                        {
                                                            node: "VariableDeclarationFragment",
                                                            name: {
                                                                node: "SimpleName",
                                                                identifier: "value"
                                                            },
                                                            extraDimensions: 0,
                                                            initializer: {
                                                                node: "MethodInvocation",
                                                                expression: {
                                                                    node: "SimpleName",
                                                                    identifier: "packed"
                                                                },
                                                                typeArguments: [],
                                                                name: {
                                                                    node: "SimpleName",
                                                                    identifier: "charAt"
                                                                },
                                                                arguments: [
                                                                    {
                                                                        node: "PostfixExpression",
                                                                        operand: {
                                                                            node: "SimpleName",
                                                                            identifier: "i"
                                                                        },
                                                                        operator: "++"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    node: "ExpressionStatement",
                                                    expression: {
                                                        node: "PostfixExpression",
                                                        operand: {
                                                            node: "SimpleName",
                                                            identifier: "value"
                                                        },
                                                        operator: "--"
                                                    }
                                                },
                                                {
                                                    node: "DoStatement",
                                                    body: {
                                                        node: "ExpressionStatement",
                                                        expression: {
                                                            node: "Assignment",
                                                            leftHandSide: {
                                                                node: "ArrayAccess",
                                                                array: {
                                                                    node: "SimpleName",
                                                                    identifier: "result"
                                                                },
                                                                index: {
                                                                    node: "PostfixExpression",
                                                                    operand: {
                                                                        node: "SimpleName",
                                                                        identifier: "j"
                                                                    },
                                                                    operator: "++"
                                                                }
                                                            },
                                                            operator: "=",
                                                            rightHandSide: {
                                                                node: "SimpleName",
                                                                identifier: "value"
                                                            }
                                                        }
                                                    },
                                                    expression: {
                                                        node: "InfixExpression",
                                                        leftOperand: {
                                                            node: "PrefixExpression",
                                                            operator: "--",
                                                            operand: {
                                                                node: "SimpleName",
                                                                identifier: "count"
                                                            }
                                                        },
                                                        operator: ">",
                                                        rightOperand: {
                                                            node: "NumberLiteral",
                                                            token: "0"
                                                        },
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        node: "ReturnStatement",
                                        expression: {
                                            node: "SimpleName",
                                            identifier: "j"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "ZZ_UNKNOWN_ERROR"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "NumberLiteral",
                                        token: "0"
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "ZZ_NO_MATCH"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "NumberLiteral",
                                        token: "1"
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "ZZ_PUSHBACK_2BIG"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "NumberLiteral",
                                        token: "2"
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "SimpleType",
                                name: {
                                    node: "SimpleName",
                                    identifier: "String"
                                }
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "ZZ_ERROR_MSG"
                                    },
                                    extraDimensions: 1,
                                    initializer: {
                                        node: "ArrayInitializer",
                                        expressions: [
                                            {
                                                node: "StringLiteral",
                                                escapedValue: "\"Unkown internal scanner error\""
                                            },
                                            {
                                                node: "StringLiteral",
                                                escapedValue: "\"Error: could not match input\""
                                            },
                                            {
                                                node: "StringLiteral",
                                                escapedValue: "\"Error: pushback value was too large\""
                                            }
                                        ]
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "ArrayType",
                                componentType: {
                                    node: "PrimitiveType",
                                    primitiveTypeCode: "int"
                                }
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "ZZ_ATTRIBUTE"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "MethodInvocation",
                                        expression: null,
                                        typeArguments: [],
                                        name: {
                                            node: "SimpleName",
                                            identifier: "zzUnpackAttribute"
                                        },
                                        arguments: []
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "SimpleType",
                                name: {
                                    node: "SimpleName",
                                    identifier: "String"
                                }
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "ZZ_ATTRIBUTE_PACKED_0"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "InfixExpression",
                                        leftOperand: {
                                            node: "StringLiteral",
                                            escapedValue: "\"\\1\\0\\1\\11\\13\\1\\1\\0\\1\\1\\1\\0\\1\\1\\1\\0\""
                                        },
                                        operator: "+",
                                        rightOperand: {
                                            node: "StringLiteral",
                                            escapedValue: "\"\\2\\1\\2\\0\\1\\1\\1\\0\""
                                        },
                                    }
                                }
                            ]
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "ArrayType",
                                componentType: {
                                    node: "PrimitiveType",
                                    primitiveTypeCode: "int"
                                }
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "zzUnpackAttribute"
                            },
                            parameters: [],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "ArrayType",
                                            componentType: {
                                                node: "PrimitiveType",
                                                primitiveTypeCode: "int"
                                            }
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "result"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "ArrayCreation",
                                                    type: {
                                                        node: "ArrayType",
                                                        componentType: {
                                                            node: "PrimitiveType",
                                                            primitiveTypeCode: "int"
                                                        }
                                                    },
                                                    dimensions: [
                                                        {
                                                            node: "NumberLiteral",
                                                            token: "24"
                                                        }
                                                    ],
                                                    initializer: null
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "offset"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "NumberLiteral",
                                                    token: "0"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "Assignment",
                                            leftHandSide: {
                                                node: "SimpleName",
                                                identifier: "offset"
                                            },
                                            operator: "=",
                                            rightHandSide: {
                                                node: "MethodInvocation",
                                                expression: null,
                                                typeArguments: [],
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "zzUnpackAttribute"
                                                },
                                                arguments: [
                                                    {
                                                        node: "SimpleName",
                                                        identifier: "ZZ_ATTRIBUTE_PACKED_0"
                                                    },
                                                    {
                                                        node: "SimpleName",
                                                        identifier: "offset"
                                                    },
                                                    {
                                                        node: "SimpleName",
                                                        identifier: "result"
                                                    }
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        node: "ReturnStatement",
                                        expression: {
                                            node: "SimpleName",
                                            identifier: "result"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "zzUnpackAttribute"
                            },
                            parameters: [
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "SimpleType",
                                        name: {
                                            node: "SimpleName",
                                            identifier: "String"
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "packed"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                },
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "PrimitiveType",
                                        primitiveTypeCode: "int"
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "offset"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                },
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "ArrayType",
                                        componentType: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "result"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "i"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "NumberLiteral",
                                                    token: "0"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "j"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "SimpleName",
                                                    identifier: "offset"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "l"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "MethodInvocation",
                                                    expression: {
                                                        node: "SimpleName",
                                                        identifier: "packed"
                                                    },
                                                    typeArguments: [],
                                                    name: {
                                                        node: "SimpleName",
                                                        identifier: "length"
                                                    },
                                                    arguments: []
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "WhileStatement",
                                        expression: {
                                            node: "InfixExpression",
                                            leftOperand: {
                                                node: "SimpleName",
                                                identifier: "i"
                                            },
                                            operator: "<",
                                            rightOperand: {
                                                node: "SimpleName",
                                                identifier: "l"
                                            },
                                        },
                                        body: {
                                            node: "Block",
                                            statements: [
                                                {
                                                    node: "VariableDeclarationStatement",
                                                    modifiers: [],
                                                    type: {
                                                        node: "PrimitiveType",
                                                        primitiveTypeCode: "int"
                                                    },
                                                    fragments: [
                                                        {
                                                            node: "VariableDeclarationFragment",
                                                            name: {
                                                                node: "SimpleName",
                                                                identifier: "count"
                                                            },
                                                            extraDimensions: 0,
                                                            initializer: {
                                                                node: "MethodInvocation",
                                                                expression: {
                                                                    node: "SimpleName",
                                                                    identifier: "packed"
                                                                },
                                                                typeArguments: [],
                                                                name: {
                                                                    node: "SimpleName",
                                                                    identifier: "charAt"
                                                                },
                                                                arguments: [
                                                                    {
                                                                        node: "PostfixExpression",
                                                                        operand: {
                                                                            node: "SimpleName",
                                                                            identifier: "i"
                                                                        },
                                                                        operator: "++"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    node: "VariableDeclarationStatement",
                                                    modifiers: [],
                                                    type: {
                                                        node: "PrimitiveType",
                                                        primitiveTypeCode: "int"
                                                    },
                                                    fragments: [
                                                        {
                                                            node: "VariableDeclarationFragment",
                                                            name: {
                                                                node: "SimpleName",
                                                                identifier: "value"
                                                            },
                                                            extraDimensions: 0,
                                                            initializer: {
                                                                node: "MethodInvocation",
                                                                expression: {
                                                                    node: "SimpleName",
                                                                    identifier: "packed"
                                                                },
                                                                typeArguments: [],
                                                                name: {
                                                                    node: "SimpleName",
                                                                    identifier: "charAt"
                                                                },
                                                                arguments: [
                                                                    {
                                                                        node: "PostfixExpression",
                                                                        operand: {
                                                                            node: "SimpleName",
                                                                            identifier: "i"
                                                                        },
                                                                        operator: "++"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    node: "DoStatement",
                                                    body: {
                                                        node: "ExpressionStatement",
                                                        expression: {
                                                            node: "Assignment",
                                                            leftHandSide: {
                                                                node: "ArrayAccess",
                                                                array: {
                                                                    node: "SimpleName",
                                                                    identifier: "result"
                                                                },
                                                                index: {
                                                                    node: "PostfixExpression",
                                                                    operand: {
                                                                        node: "SimpleName",
                                                                        identifier: "j"
                                                                    },
                                                                    operator: "++"
                                                                }
                                                            },
                                                            operator: "=",
                                                            rightHandSide: {
                                                                node: "SimpleName",
                                                                identifier: "value"
                                                            }
                                                        }
                                                    },
                                                    expression: {
                                                        node: "InfixExpression",
                                                        leftOperand: {
                                                            node: "PrefixExpression",
                                                            operator: "--",
                                                            operand: {
                                                                node: "SimpleName",
                                                                identifier: "count"
                                                            }
                                                        },
                                                        operator: ">",
                                                        rightOperand: {
                                                            node: "NumberLiteral",
                                                            token: "0"
                                                        },
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        node: "ReturnStatement",
                                        expression: {
                                            node: "SimpleName",
                                            identifier: "j"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                }
                            ],
                            type: {
                                node: "SimpleType",
                                name: {
                                    node: "QualifiedName",
                                    qualifier: {
                                        node: "QualifiedName",
                                        qualifier: {
                                            node: "SimpleName",
                                            identifier: "java"
                                        },
                                        name: {
                                            node: "SimpleName",
                                            identifier: "io"
                                        }
                                    },
                                    name: {
                                        node: "SimpleName",
                                        identifier: "Reader"
                                    }
                                }
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "zzReader"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "zzState"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "zzLexicalState"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "SimpleName",
                                        identifier: "YYINITIAL"
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "char"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "zzBuffer"
                                    },
                                    extraDimensions: 1,
                                    initializer: {
                                        node: "ArrayCreation",
                                        type: {
                                            node: "ArrayType",
                                            componentType: {
                                                node: "PrimitiveType",
                                                primitiveTypeCode: "char"
                                            }
                                        },
                                        dimensions: [
                                            {
                                                node: "SimpleName",
                                                identifier: "ZZ_BUFFERSIZE"
                                            }
                                        ],
                                        initializer: null
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "zzMarkedPos"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "zzCurrentPos"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "zzStartRead"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "zzEndRead"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "yyline"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "yychar"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "yycolumn"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "boolean"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "zzAtBOL"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "BooleanLiteral",
                                        booleanValue: true
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "boolean"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "zzAtEOF"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "boolean"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "zzEOFDone"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "zzFinalHighSurrogate"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "NumberLiteral",
                                        token: "0"
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "WORD_TYPE"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "QualifiedName",
                                        qualifier: {
                                            node: "SimpleName",
                                            identifier: "StandardTokenizer"
                                        },
                                        name: {
                                            node: "SimpleName",
                                            identifier: "ALPHANUM"
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "NUMERIC_TYPE"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "QualifiedName",
                                        qualifier: {
                                            node: "SimpleName",
                                            identifier: "StandardTokenizer"
                                        },
                                        name: {
                                            node: "SimpleName",
                                            identifier: "NUM"
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "SOUTH_EAST_ASIAN_TYPE"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "QualifiedName",
                                        qualifier: {
                                            node: "SimpleName",
                                            identifier: "StandardTokenizer"
                                        },
                                        name: {
                                            node: "SimpleName",
                                            identifier: "SOUTHEAST_ASIAN"
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "IDEOGRAPHIC_TYPE"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "QualifiedName",
                                        qualifier: {
                                            node: "SimpleName",
                                            identifier: "StandardTokenizer"
                                        },
                                        name: {
                                            node: "SimpleName",
                                            identifier: "IDEOGRAPHIC"
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "HIRAGANA_TYPE"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "QualifiedName",
                                        qualifier: {
                                            node: "SimpleName",
                                            identifier: "StandardTokenizer"
                                        },
                                        name: {
                                            node: "SimpleName",
                                            identifier: "HIRAGANA"
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "KATAKANA_TYPE"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "QualifiedName",
                                        qualifier: {
                                            node: "SimpleName",
                                            identifier: "StandardTokenizer"
                                        },
                                        name: {
                                            node: "SimpleName",
                                            identifier: "KATAKANA"
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "HANGUL_TYPE"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "QualifiedName",
                                        qualifier: {
                                            node: "SimpleName",
                                            identifier: "StandardTokenizer"
                                        },
                                        name: {
                                            node: "SimpleName",
                                            identifier: "HANGUL"
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "yychar"
                            },
                            parameters: [],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "ReturnStatement",
                                        expression: {
                                            node: "SimpleName",
                                            identifier: "yychar"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "void"
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "getText"
                            },
                            parameters: [
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "SimpleType",
                                        name: {
                                            node: "SimpleName",
                                            identifier: "CharTermAttribute"
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "t"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "MethodInvocation",
                                            expression: {
                                                node: "SimpleName",
                                                identifier: "t"
                                            },
                                            typeArguments: [],
                                            name: {
                                                node: "SimpleName",
                                                identifier: "copyBuffer"
                                            },
                                            arguments: [
                                                {
                                                    node: "SimpleName",
                                                    identifier: "zzBuffer"
                                                },
                                                {
                                                    node: "SimpleName",
                                                    identifier: "zzStartRead"
                                                },
                                                {
                                                    node: "InfixExpression",
                                                    leftOperand: {
                                                        node: "SimpleName",
                                                        identifier: "zzMarkedPos"
                                                    },
                                                    operator: "-",
                                                    rightOperand: {
                                                        node: "SimpleName",
                                                        identifier: "zzStartRead"
                                                    },
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "void"
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "setBufferSize"
                            },
                            parameters: [
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "PrimitiveType",
                                        primitiveTypeCode: "int"
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "numChars"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "Assignment",
                                            leftHandSide: {
                                                node: "SimpleName",
                                                identifier: "ZZ_BUFFERSIZE"
                                            },
                                            operator: "=",
                                            rightHandSide: {
                                                node: "SimpleName",
                                                identifier: "numChars"
                                            }
                                        }
                                    },
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "ArrayType",
                                            componentType: {
                                                node: "PrimitiveType",
                                                primitiveTypeCode: "char"
                                            }
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "newZzBuffer"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "ArrayCreation",
                                                    type: {
                                                        node: "ArrayType",
                                                        componentType: {
                                                            node: "PrimitiveType",
                                                            primitiveTypeCode: "char"
                                                        }
                                                    },
                                                    dimensions: [
                                                        {
                                                            node: "SimpleName",
                                                            identifier: "ZZ_BUFFERSIZE"
                                                        }
                                                    ],
                                                    initializer: null
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "MethodInvocation",
                                            expression: {
                                                node: "SimpleName",
                                                identifier: "System"
                                            },
                                            typeArguments: [],
                                            name: {
                                                node: "SimpleName",
                                                identifier: "arraycopy"
                                            },
                                            arguments: [
                                                {
                                                    node: "SimpleName",
                                                    identifier: "zzBuffer"
                                                },
                                                {
                                                    node: "NumberLiteral",
                                                    token: "0"
                                                },
                                                {
                                                    node: "SimpleName",
                                                    identifier: "newZzBuffer"
                                                },
                                                {
                                                    node: "NumberLiteral",
                                                    token: "0"
                                                },
                                                {
                                                    node: "MethodInvocation",
                                                    expression: {
                                                        node: "SimpleName",
                                                        identifier: "Math"
                                                    },
                                                    typeArguments: [],
                                                    name: {
                                                        node: "SimpleName",
                                                        identifier: "min"
                                                    },
                                                    arguments: [
                                                        {
                                                            node: "QualifiedName",
                                                            qualifier: {
                                                                node: "SimpleName",
                                                                identifier: "zzBuffer"
                                                            },
                                                            name: {
                                                                node: "SimpleName",
                                                                identifier: "length"
                                                            }
                                                        },
                                                        {
                                                            node: "SimpleName",
                                                            identifier: "ZZ_BUFFERSIZE"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "Assignment",
                                            leftHandSide: {
                                                node: "SimpleName",
                                                identifier: "zzBuffer"
                                            },
                                            operator: "=",
                                            rightHandSide: {
                                                node: "SimpleName",
                                                identifier: "newZzBuffer"
                                            }
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                }
                            ],
                            constructor: true,
                            typeParameters: [],
                            returnType2: null,
                            name: {
                                node: "SimpleName",
                                identifier: "StandardTokenizerImpl"
                            },
                            parameters: [
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "SimpleType",
                                        name: {
                                            node: "QualifiedName",
                                            qualifier: {
                                                node: "QualifiedName",
                                                qualifier: {
                                                    node: "SimpleName",
                                                    identifier: "java"
                                                },
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "io"
                                                }
                                            },
                                            name: {
                                                node: "SimpleName",
                                                identifier: "Reader"
                                            }
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "in"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "Assignment",
                                            leftHandSide: {
                                                node: "FieldAccess",
                                                expression: {
                                                    node: "ThisExpression",
                                                    qualifier: null
                                                },
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "zzReader"
                                                }
                                            },
                                            operator: "=",
                                            rightHandSide: {
                                                node: "SimpleName",
                                                identifier: "in"
                                            }
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "ArrayType",
                                componentType: {
                                    node: "PrimitiveType",
                                    primitiveTypeCode: "char"
                                }
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "zzUnpackCMap"
                            },
                            parameters: [
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "SimpleType",
                                        name: {
                                            node: "SimpleName",
                                            identifier: "String"
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "packed"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "ArrayType",
                                            componentType: {
                                                node: "PrimitiveType",
                                                primitiveTypeCode: "char"
                                            }
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "map"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "ArrayCreation",
                                                    type: {
                                                        node: "ArrayType",
                                                        componentType: {
                                                            node: "PrimitiveType",
                                                            primitiveTypeCode: "char"
                                                        }
                                                    },
                                                    dimensions: [
                                                        {
                                                            node: "NumberLiteral",
                                                            token: "0x110000"
                                                        }
                                                    ],
                                                    initializer: null
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "i"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "NumberLiteral",
                                                    token: "0"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "j"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "NumberLiteral",
                                                    token: "0"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "WhileStatement",
                                        expression: {
                                            node: "InfixExpression",
                                            leftOperand: {
                                                node: "SimpleName",
                                                identifier: "i"
                                            },
                                            operator: "<",
                                            rightOperand: {
                                                node: "NumberLiteral",
                                                token: "2836"
                                            },
                                        },
                                        body: {
                                            node: "Block",
                                            statements: [
                                                {
                                                    node: "VariableDeclarationStatement",
                                                    modifiers: [],
                                                    type: {
                                                        node: "PrimitiveType",
                                                        primitiveTypeCode: "int"
                                                    },
                                                    fragments: [
                                                        {
                                                            node: "VariableDeclarationFragment",
                                                            name: {
                                                                node: "SimpleName",
                                                                identifier: "count"
                                                            },
                                                            extraDimensions: 0,
                                                            initializer: {
                                                                node: "MethodInvocation",
                                                                expression: {
                                                                    node: "SimpleName",
                                                                    identifier: "packed"
                                                                },
                                                                typeArguments: [],
                                                                name: {
                                                                    node: "SimpleName",
                                                                    identifier: "charAt"
                                                                },
                                                                arguments: [
                                                                    {
                                                                        node: "PostfixExpression",
                                                                        operand: {
                                                                            node: "SimpleName",
                                                                            identifier: "i"
                                                                        },
                                                                        operator: "++"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    node: "VariableDeclarationStatement",
                                                    modifiers: [],
                                                    type: {
                                                        node: "PrimitiveType",
                                                        primitiveTypeCode: "char"
                                                    },
                                                    fragments: [
                                                        {
                                                            node: "VariableDeclarationFragment",
                                                            name: {
                                                                node: "SimpleName",
                                                                identifier: "value"
                                                            },
                                                            extraDimensions: 0,
                                                            initializer: {
                                                                node: "MethodInvocation",
                                                                expression: {
                                                                    node: "SimpleName",
                                                                    identifier: "packed"
                                                                },
                                                                typeArguments: [],
                                                                name: {
                                                                    node: "SimpleName",
                                                                    identifier: "charAt"
                                                                },
                                                                arguments: [
                                                                    {
                                                                        node: "PostfixExpression",
                                                                        operand: {
                                                                            node: "SimpleName",
                                                                            identifier: "i"
                                                                        },
                                                                        operator: "++"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    node: "DoStatement",
                                                    body: {
                                                        node: "ExpressionStatement",
                                                        expression: {
                                                            node: "Assignment",
                                                            leftHandSide: {
                                                                node: "ArrayAccess",
                                                                array: {
                                                                    node: "SimpleName",
                                                                    identifier: "map"
                                                                },
                                                                index: {
                                                                    node: "PostfixExpression",
                                                                    operand: {
                                                                        node: "SimpleName",
                                                                        identifier: "j"
                                                                    },
                                                                    operator: "++"
                                                                }
                                                            },
                                                            operator: "=",
                                                            rightHandSide: {
                                                                node: "SimpleName",
                                                                identifier: "value"
                                                            }
                                                        }
                                                    },
                                                    expression: {
                                                        node: "InfixExpression",
                                                        leftOperand: {
                                                            node: "PrefixExpression",
                                                            operator: "--",
                                                            operand: {
                                                                node: "SimpleName",
                                                                identifier: "count"
                                                            }
                                                        },
                                                        operator: ">",
                                                        rightOperand: {
                                                            node: "NumberLiteral",
                                                            token: "0"
                                                        },
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        node: "ReturnStatement",
                                        expression: {
                                            node: "SimpleName",
                                            identifier: "map"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "boolean"
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "zzRefill"
                            },
                            parameters: [],
                            extraDimensions: 0,
                            thrownExceptions: [
                                {
                                    node: "QualifiedName",
                                    qualifier: {
                                        node: "QualifiedName",
                                        qualifier: {
                                            node: "SimpleName",
                                            identifier: "java"
                                        },
                                        name: {
                                            node: "SimpleName",
                                            identifier: "io"
                                        }
                                    },
                                    name: {
                                        node: "SimpleName",
                                        identifier: "IOException"
                                    }
                                }
                            ],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "IfStatement",
                                        expression: {
                                            node: "InfixExpression",
                                            leftOperand: {
                                                node: "SimpleName",
                                                identifier: "zzStartRead"
                                            },
                                            operator: ">",
                                            rightOperand: {
                                                node: "NumberLiteral",
                                                token: "0"
                                            },
                                        },
                                        thenStatement: {
                                            node: "Block",
                                            statements: [
                                                {
                                                    node: "ExpressionStatement",
                                                    expression: {
                                                        node: "Assignment",
                                                        leftHandSide: {
                                                            node: "SimpleName",
                                                            identifier: "zzEndRead"
                                                        },
                                                        operator: "+=",
                                                        rightHandSide: {
                                                            node: "SimpleName",
                                                            identifier: "zzFinalHighSurrogate"
                                                        }
                                                    }
                                                },
                                                {
                                                    node: "ExpressionStatement",
                                                    expression: {
                                                        node: "Assignment",
                                                        leftHandSide: {
                                                            node: "SimpleName",
                                                            identifier: "zzFinalHighSurrogate"
                                                        },
                                                        operator: "=",
                                                        rightHandSide: {
                                                            node: "NumberLiteral",
                                                            token: "0"
                                                        }
                                                    }
                                                },
                                                {
                                                    node: "ExpressionStatement",
                                                    expression: {
                                                        node: "MethodInvocation",
                                                        expression: {
                                                            node: "SimpleName",
                                                            identifier: "System"
                                                        },
                                                        typeArguments: [],
                                                        name: {
                                                            node: "SimpleName",
                                                            identifier: "arraycopy"
                                                        },
                                                        arguments: [
                                                            {
                                                                node: "SimpleName",
                                                                identifier: "zzBuffer"
                                                            },
                                                            {
                                                                node: "SimpleName",
                                                                identifier: "zzStartRead"
                                                            },
                                                            {
                                                                node: "SimpleName",
                                                                identifier: "zzBuffer"
                                                            },
                                                            {
                                                                node: "NumberLiteral",
                                                                token: "0"
                                                            },
                                                            {
                                                                node: "InfixExpression",
                                                                leftOperand: {
                                                                    node: "SimpleName",
                                                                    identifier: "zzEndRead"
                                                                },
                                                                operator: "-",
                                                                rightOperand: {
                                                                    node: "SimpleName",
                                                                    identifier: "zzStartRead"
                                                                },
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    node: "ExpressionStatement",
                                                    expression: {
                                                        node: "Assignment",
                                                        leftHandSide: {
                                                            node: "SimpleName",
                                                            identifier: "zzEndRead"
                                                        },
                                                        operator: "-=",
                                                        rightHandSide: {
                                                            node: "SimpleName",
                                                            identifier: "zzStartRead"
                                                        }
                                                    }
                                                },
                                                {
                                                    node: "ExpressionStatement",
                                                    expression: {
                                                        node: "Assignment",
                                                        leftHandSide: {
                                                            node: "SimpleName",
                                                            identifier: "zzCurrentPos"
                                                        },
                                                        operator: "-=",
                                                        rightHandSide: {
                                                            node: "SimpleName",
                                                            identifier: "zzStartRead"
                                                        }
                                                    }
                                                },
                                                {
                                                    node: "ExpressionStatement",
                                                    expression: {
                                                        node: "Assignment",
                                                        leftHandSide: {
                                                            node: "SimpleName",
                                                            identifier: "zzMarkedPos"
                                                        },
                                                        operator: "-=",
                                                        rightHandSide: {
                                                            node: "SimpleName",
                                                            identifier: "zzStartRead"
                                                        }
                                                    }
                                                },
                                                {
                                                    node: "ExpressionStatement",
                                                    expression: {
                                                        node: "Assignment",
                                                        leftHandSide: {
                                                            node: "SimpleName",
                                                            identifier: "zzStartRead"
                                                        },
                                                        operator: "=",
                                                        rightHandSide: {
                                                            node: "NumberLiteral",
                                                            token: "0"
                                                        }
                                                    }
                                                }
                                            ]
                                        },
                                        elseStatement: null
                                    },
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "requested"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "InfixExpression",
                                                    leftOperand: {
                                                        node: "InfixExpression",
                                                        leftOperand: {
                                                            node: "QualifiedName",
                                                            qualifier: {
                                                                node: "SimpleName",
                                                                identifier: "zzBuffer"
                                                            },
                                                            name: {
                                                                node: "SimpleName",
                                                                identifier: "length"
                                                            }
                                                        },
                                                        operator: "-",
                                                        rightOperand: {
                                                            node: "SimpleName",
                                                            identifier: "zzEndRead"
                                                        },
                                                    },
                                                    operator: "-",
                                                    rightOperand: {
                                                        node: "SimpleName",
                                                        identifier: "zzFinalHighSurrogate"
                                                    },
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "totalRead"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "NumberLiteral",
                                                    token: "0"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "WhileStatement",
                                        expression: {
                                            node: "InfixExpression",
                                            leftOperand: {
                                                node: "SimpleName",
                                                identifier: "totalRead"
                                            },
                                            operator: "<",
                                            rightOperand: {
                                                node: "SimpleName",
                                                identifier: "requested"
                                            },
                                        },
                                        body: {
                                            node: "Block",
                                            statements: [
                                                {
                                                    node: "VariableDeclarationStatement",
                                                    modifiers: [],
                                                    type: {
                                                        node: "PrimitiveType",
                                                        primitiveTypeCode: "int"
                                                    },
                                                    fragments: [
                                                        {
                                                            node: "VariableDeclarationFragment",
                                                            name: {
                                                                node: "SimpleName",
                                                                identifier: "numRead"
                                                            },
                                                            extraDimensions: 0,
                                                            initializer: {
                                                                node: "MethodInvocation",
                                                                expression: {
                                                                    node: "SimpleName",
                                                                    identifier: "zzReader"
                                                                },
                                                                typeArguments: [],
                                                                name: {
                                                                    node: "SimpleName",
                                                                    identifier: "read"
                                                                },
                                                                arguments: [
                                                                    {
                                                                        node: "SimpleName",
                                                                        identifier: "zzBuffer"
                                                                    },
                                                                    {
                                                                        node: "InfixExpression",
                                                                        leftOperand: {
                                                                            node: "SimpleName",
                                                                            identifier: "zzEndRead"
                                                                        },
                                                                        operator: "+",
                                                                        rightOperand: {
                                                                            node: "SimpleName",
                                                                            identifier: "totalRead"
                                                                        },
                                                                    },
                                                                    {
                                                                        node: "InfixExpression",
                                                                        leftOperand: {
                                                                            node: "SimpleName",
                                                                            identifier: "requested"
                                                                        },
                                                                        operator: "-",
                                                                        rightOperand: {
                                                                            node: "SimpleName",
                                                                            identifier: "totalRead"
                                                                        },
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    node: "IfStatement",
                                                    expression: {
                                                        node: "InfixExpression",
                                                        leftOperand: {
                                                            node: "SimpleName",
                                                            identifier: "numRead"
                                                        },
                                                        operator: "==",
                                                        rightOperand: {
                                                            node: "PrefixExpression",
                                                            operator: "-",
                                                            operand: {
                                                                node: "NumberLiteral",
                                                                token: "1"
                                                            }
                                                        },
                                                    },
                                                    thenStatement: {
                                                        node: "Block",
                                                        statements: [
                                                            {
                                                                node: "BreakStatement",
                                                                label: null
                                                            }
                                                        ]
                                                    },
                                                    elseStatement: null
                                                },
                                                {
                                                    node: "ExpressionStatement",
                                                    expression: {
                                                        node: "Assignment",
                                                        leftHandSide: {
                                                            node: "SimpleName",
                                                            identifier: "totalRead"
                                                        },
                                                        operator: "+=",
                                                        rightHandSide: {
                                                            node: "SimpleName",
                                                            identifier: "numRead"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        node: "IfStatement",
                                        expression: {
                                            node: "InfixExpression",
                                            leftOperand: {
                                                node: "SimpleName",
                                                identifier: "totalRead"
                                            },
                                            operator: ">",
                                            rightOperand: {
                                                node: "NumberLiteral",
                                                token: "0"
                                            },
                                        },
                                        thenStatement: {
                                            node: "Block",
                                            statements: [
                                                {
                                                    node: "ExpressionStatement",
                                                    expression: {
                                                        node: "Assignment",
                                                        leftHandSide: {
                                                            node: "SimpleName",
                                                            identifier: "zzEndRead"
                                                        },
                                                        operator: "+=",
                                                        rightHandSide: {
                                                            node: "SimpleName",
                                                            identifier: "totalRead"
                                                        }
                                                    }
                                                },
                                                {
                                                    node: "IfStatement",
                                                    expression: {
                                                        node: "InfixExpression",
                                                        leftOperand: {
                                                            node: "SimpleName",
                                                            identifier: "totalRead"
                                                        },
                                                        operator: "==",
                                                        rightOperand: {
                                                            node: "SimpleName",
                                                            identifier: "requested"
                                                        },
                                                    },
                                                    thenStatement: {
                                                        node: "Block",
                                                        statements: [
                                                            {
                                                                node: "IfStatement",
                                                                expression: {
                                                                    node: "MethodInvocation",
                                                                    expression: {
                                                                        node: "SimpleName",
                                                                        identifier: "Character"
                                                                    },
                                                                    typeArguments: [],
                                                                    name: {
                                                                        node: "SimpleName",
                                                                        identifier: "isHighSurrogate"
                                                                    },
                                                                    arguments: [
                                                                        {
                                                                            node: "ArrayAccess",
                                                                            array: {
                                                                                node: "SimpleName",
                                                                                identifier: "zzBuffer"
                                                                            },
                                                                            index: {
                                                                                node: "InfixExpression",
                                                                                leftOperand: {
                                                                                    node: "SimpleName",
                                                                                    identifier: "zzEndRead"
                                                                                },
                                                                                operator: "-",
                                                                                rightOperand: {
                                                                                    node: "NumberLiteral",
                                                                                    token: "1"
                                                                                },
                                                                            }
                                                                        }
                                                                    ]
                                                                },
                                                                thenStatement: {
                                                                    node: "Block",
                                                                    statements: [
                                                                        {
                                                                            node: "ExpressionStatement",
                                                                            expression: {
                                                                                node: "PrefixExpression",
                                                                                operator: "--",
                                                                                operand: {
                                                                                    node: "SimpleName",
                                                                                    identifier: "zzEndRead"
                                                                                }
                                                                            }
                                                                        },
                                                                        {
                                                                            node: "ExpressionStatement",
                                                                            expression: {
                                                                                node: "Assignment",
                                                                                leftHandSide: {
                                                                                    node: "SimpleName",
                                                                                    identifier: "zzFinalHighSurrogate"
                                                                                },
                                                                                operator: "=",
                                                                                rightHandSide: {
                                                                                    node: "NumberLiteral",
                                                                                    token: "1"
                                                                                }
                                                                            }
                                                                        },
                                                                        {
                                                                            node: "IfStatement",
                                                                            expression: {
                                                                                node: "InfixExpression",
                                                                                leftOperand: {
                                                                                    node: "SimpleName",
                                                                                    identifier: "totalRead"
                                                                                },
                                                                                operator: "==",
                                                                                rightOperand: {
                                                                                    node: "NumberLiteral",
                                                                                    token: "1"
                                                                                },
                                                                            },
                                                                            thenStatement: {
                                                                                node: "Block",
                                                                                statements: [
                                                                                    {
                                                                                        node: "ReturnStatement",
                                                                                        expression: {
                                                                                            node: "BooleanLiteral",
                                                                                            booleanValue: true
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            },
                                                                            elseStatement: null
                                                                        }
                                                                    ]
                                                                },
                                                                elseStatement: null
                                                            }
                                                        ]
                                                    },
                                                    elseStatement: null
                                                },
                                                {
                                                    node: "ReturnStatement",
                                                    expression: {
                                                        node: "BooleanLiteral",
                                                        booleanValue: false
                                                    }
                                                }
                                            ]
                                        },
                                        elseStatement: null
                                    },
                                    {
                                        node: "ReturnStatement",
                                        expression: {
                                            node: "BooleanLiteral",
                                            booleanValue: true
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "void"
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "yyclose"
                            },
                            parameters: [],
                            extraDimensions: 0,
                            thrownExceptions: [
                                {
                                    node: "QualifiedName",
                                    qualifier: {
                                        node: "QualifiedName",
                                        qualifier: {
                                            node: "SimpleName",
                                            identifier: "java"
                                        },
                                        name: {
                                            node: "SimpleName",
                                            identifier: "io"
                                        }
                                    },
                                    name: {
                                        node: "SimpleName",
                                        identifier: "IOException"
                                    }
                                }
                            ],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "Assignment",
                                            leftHandSide: {
                                                node: "SimpleName",
                                                identifier: "zzAtEOF"
                                            },
                                            operator: "=",
                                            rightHandSide: {
                                                node: "BooleanLiteral",
                                                booleanValue: true
                                            }
                                        }
                                    },
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "Assignment",
                                            leftHandSide: {
                                                node: "SimpleName",
                                                identifier: "zzEndRead"
                                            },
                                            operator: "=",
                                            rightHandSide: {
                                                node: "SimpleName",
                                                identifier: "zzStartRead"
                                            }
                                        }
                                    },
                                    {
                                        node: "IfStatement",
                                        expression: {
                                            node: "InfixExpression",
                                            leftOperand: {
                                                node: "SimpleName",
                                                identifier: "zzReader"
                                            },
                                            operator: "!=",
                                            rightOperand: {
                                                node: "NullLiteral"
                                            },
                                        },
                                        thenStatement: {
                                            node: "ExpressionStatement",
                                            expression: {
                                                node: "MethodInvocation",
                                                expression: {
                                                    node: "SimpleName",
                                                    identifier: "zzReader"
                                                },
                                                typeArguments: [],
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "close"
                                                },
                                                arguments: []
                                            }
                                        },
                                        elseStatement: null
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "void"
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "yyreset"
                            },
                            parameters: [
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "SimpleType",
                                        name: {
                                            node: "QualifiedName",
                                            qualifier: {
                                                node: "QualifiedName",
                                                qualifier: {
                                                    node: "SimpleName",
                                                    identifier: "java"
                                                },
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "io"
                                                }
                                            },
                                            name: {
                                                node: "SimpleName",
                                                identifier: "Reader"
                                            }
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "reader"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "Assignment",
                                            leftHandSide: {
                                                node: "SimpleName",
                                                identifier: "zzReader"
                                            },
                                            operator: "=",
                                            rightHandSide: {
                                                node: "SimpleName",
                                                identifier: "reader"
                                            }
                                        }
                                    },
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "Assignment",
                                            leftHandSide: {
                                                node: "SimpleName",
                                                identifier: "zzAtBOL"
                                            },
                                            operator: "=",
                                            rightHandSide: {
                                                node: "BooleanLiteral",
                                                booleanValue: true
                                            }
                                        }
                                    },
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "Assignment",
                                            leftHandSide: {
                                                node: "SimpleName",
                                                identifier: "zzAtEOF"
                                            },
                                            operator: "=",
                                            rightHandSide: {
                                                node: "BooleanLiteral",
                                                booleanValue: false
                                            }
                                        }
                                    },
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "Assignment",
                                            leftHandSide: {
                                                node: "SimpleName",
                                                identifier: "zzEOFDone"
                                            },
                                            operator: "=",
                                            rightHandSide: {
                                                node: "BooleanLiteral",
                                                booleanValue: false
                                            }
                                        }
                                    },
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "Assignment",
                                            leftHandSide: {
                                                node: "SimpleName",
                                                identifier: "zzEndRead"
                                            },
                                            operator: "=",
                                            rightHandSide: {
                                                node: "Assignment",
                                                leftHandSide: {
                                                    node: "SimpleName",
                                                    identifier: "zzStartRead"
                                                },
                                                operator: "=",
                                                rightHandSide: {
                                                    node: "NumberLiteral",
                                                    token: "0"
                                                }
                                            }
                                        }
                                    },
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "Assignment",
                                            leftHandSide: {
                                                node: "SimpleName",
                                                identifier: "zzCurrentPos"
                                            },
                                            operator: "=",
                                            rightHandSide: {
                                                node: "Assignment",
                                                leftHandSide: {
                                                    node: "SimpleName",
                                                    identifier: "zzMarkedPos"
                                                },
                                                operator: "=",
                                                rightHandSide: {
                                                    node: "NumberLiteral",
                                                    token: "0"
                                                }
                                            }
                                        }
                                    },
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "Assignment",
                                            leftHandSide: {
                                                node: "SimpleName",
                                                identifier: "zzFinalHighSurrogate"
                                            },
                                            operator: "=",
                                            rightHandSide: {
                                                node: "NumberLiteral",
                                                token: "0"
                                            }
                                        }
                                    },
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "Assignment",
                                            leftHandSide: {
                                                node: "SimpleName",
                                                identifier: "yyline"
                                            },
                                            operator: "=",
                                            rightHandSide: {
                                                node: "Assignment",
                                                leftHandSide: {
                                                    node: "SimpleName",
                                                    identifier: "yychar"
                                                },
                                                operator: "=",
                                                rightHandSide: {
                                                    node: "Assignment",
                                                    leftHandSide: {
                                                        node: "SimpleName",
                                                        identifier: "yycolumn"
                                                    },
                                                    operator: "=",
                                                    rightHandSide: {
                                                        node: "NumberLiteral",
                                                        token: "0"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "Assignment",
                                            leftHandSide: {
                                                node: "SimpleName",
                                                identifier: "zzLexicalState"
                                            },
                                            operator: "=",
                                            rightHandSide: {
                                                node: "SimpleName",
                                                identifier: "YYINITIAL"
                                            }
                                        }
                                    },
                                    {
                                        node: "IfStatement",
                                        expression: {
                                            node: "InfixExpression",
                                            leftOperand: {
                                                node: "QualifiedName",
                                                qualifier: {
                                                    node: "SimpleName",
                                                    identifier: "zzBuffer"
                                                },
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "length"
                                                }
                                            },
                                            operator: ">",
                                            rightOperand: {
                                                node: "SimpleName",
                                                identifier: "ZZ_BUFFERSIZE"
                                            },
                                        },
                                        thenStatement: {
                                            node: "ExpressionStatement",
                                            expression: {
                                                node: "Assignment",
                                                leftHandSide: {
                                                    node: "SimpleName",
                                                    identifier: "zzBuffer"
                                                },
                                                operator: "=",
                                                rightHandSide: {
                                                    node: "ArrayCreation",
                                                    type: {
                                                        node: "ArrayType",
                                                        componentType: {
                                                            node: "PrimitiveType",
                                                            primitiveTypeCode: "char"
                                                        }
                                                    },
                                                    dimensions: [
                                                        {
                                                            node: "SimpleName",
                                                            identifier: "ZZ_BUFFERSIZE"
                                                        }
                                                    ],
                                                    initializer: null
                                                }
                                            }
                                        },
                                        elseStatement: null
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "yystate"
                            },
                            parameters: [],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "ReturnStatement",
                                        expression: {
                                            node: "SimpleName",
                                            identifier: "zzLexicalState"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "void"
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "yybegin"
                            },
                            parameters: [
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "PrimitiveType",
                                        primitiveTypeCode: "int"
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "newState"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "Assignment",
                                            leftHandSide: {
                                                node: "SimpleName",
                                                identifier: "zzLexicalState"
                                            },
                                            operator: "=",
                                            rightHandSide: {
                                                node: "SimpleName",
                                                identifier: "newState"
                                            }
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "SimpleType",
                                name: {
                                    node: "SimpleName",
                                    identifier: "String"
                                }
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "yytext"
                            },
                            parameters: [],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "ReturnStatement",
                                        expression: {
                                            node: "ClassInstanceCreation",
                                            expression: null,
                                            typeArguments: [],
                                            type: {
                                                node: "SimpleType",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "String"
                                                }
                                            },
                                            arguments: [
                                                {
                                                    node: "SimpleName",
                                                    identifier: "zzBuffer"
                                                },
                                                {
                                                    node: "SimpleName",
                                                    identifier: "zzStartRead"
                                                },
                                                {
                                                    node: "InfixExpression",
                                                    leftOperand: {
                                                        node: "SimpleName",
                                                        identifier: "zzMarkedPos"
                                                    },
                                                    operator: "-",
                                                    rightOperand: {
                                                        node: "SimpleName",
                                                        identifier: "zzStartRead"
                                                    },
                                                }
                                            ],
                                            anonymousClassDeclaration: null
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "char"
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "yycharat"
                            },
                            parameters: [
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "PrimitiveType",
                                        primitiveTypeCode: "int"
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "pos"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "ReturnStatement",
                                        expression: {
                                            node: "ArrayAccess",
                                            array: {
                                                node: "SimpleName",
                                                identifier: "zzBuffer"
                                            },
                                            index: {
                                                node: "InfixExpression",
                                                leftOperand: {
                                                    node: "SimpleName",
                                                    identifier: "zzStartRead"
                                                },
                                                operator: "+",
                                                rightOperand: {
                                                    node: "SimpleName",
                                                    identifier: "pos"
                                                },
                                            }
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "yylength"
                            },
                            parameters: [],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "ReturnStatement",
                                        expression: {
                                            node: "InfixExpression",
                                            leftOperand: {
                                                node: "SimpleName",
                                                identifier: "zzMarkedPos"
                                            },
                                            operator: "-",
                                            rightOperand: {
                                                node: "SimpleName",
                                                identifier: "zzStartRead"
                                            },
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "void"
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "zzScanError"
                            },
                            parameters: [
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "PrimitiveType",
                                        primitiveTypeCode: "int"
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "errorCode"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "SimpleType",
                                            name: {
                                                node: "SimpleName",
                                                identifier: "String"
                                            }
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "message"
                                                },
                                                extraDimensions: 0,
                                                initializer: null
                                            }
                                        ]
                                    },
                                    {
                                        node: "TryStatement",
                                        resources: [],
                                        body: {
                                            node: "Block",
                                            statements: [
                                                {
                                                    node: "ExpressionStatement",
                                                    expression: {
                                                        node: "Assignment",
                                                        leftHandSide: {
                                                            node: "SimpleName",
                                                            identifier: "message"
                                                        },
                                                        operator: "=",
                                                        rightHandSide: {
                                                            node: "ArrayAccess",
                                                            array: {
                                                                node: "SimpleName",
                                                                identifier: "ZZ_ERROR_MSG"
                                                            },
                                                            index: {
                                                                node: "SimpleName",
                                                                identifier: "errorCode"
                                                            }
                                                        }
                                                    }
                                                }
                                            ]
                                        },
                                        catchClauses: [
                                            {
                                                node: "CatchClause",
                                                exception: {
                                                    node: "SingleVariableDeclaration",
                                                    modifiers: [],
                                                    type: {
                                                        node: "SimpleType",
                                                        name: {
                                                            node: "SimpleName",
                                                            identifier: "ArrayIndexOutOfBoundsException"
                                                        }
                                                    },
                                                    varargs: false,
                                                    name: {
                                                        node: "SimpleName",
                                                        identifier: "e"
                                                    },
                                                    extraDimensions: 0,
                                                    initializer: null
                                                },
                                                body: {
                                                    node: "Block",
                                                    statements: [
                                                        {
                                                            node: "ExpressionStatement",
                                                            expression: {
                                                                node: "Assignment",
                                                                leftHandSide: {
                                                                    node: "SimpleName",
                                                                    identifier: "message"
                                                                },
                                                                operator: "=",
                                                                rightHandSide: {
                                                                    node: "ArrayAccess",
                                                                    array: {
                                                                        node: "SimpleName",
                                                                        identifier: "ZZ_ERROR_MSG"
                                                                    },
                                                                    index: {
                                                                        node: "SimpleName",
                                                                        identifier: "ZZ_UNKNOWN_ERROR"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ],
                                        finally: null
                                    },
                                    {
                                        node: "ThrowStatement",
                                        expression: {
                                            node: "ClassInstanceCreation",
                                            expression: null,
                                            typeArguments: [],
                                            type: {
                                                node: "SimpleType",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "Error"
                                                }
                                            },
                                            arguments: [
                                                {
                                                    node: "SimpleName",
                                                    identifier: "message"
                                                }
                                            ],
                                            anonymousClassDeclaration: null
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "void"
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "yypushback"
                            },
                            parameters: [
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "PrimitiveType",
                                        primitiveTypeCode: "int"
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "number"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "IfStatement",
                                        expression: {
                                            node: "InfixExpression",
                                            leftOperand: {
                                                node: "SimpleName",
                                                identifier: "number"
                                            },
                                            operator: ">",
                                            rightOperand: {
                                                node: "MethodInvocation",
                                                expression: null,
                                                typeArguments: [],
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "yylength"
                                                },
                                                arguments: []
                                            },
                                        },
                                        thenStatement: {
                                            node: "ExpressionStatement",
                                            expression: {
                                                node: "MethodInvocation",
                                                expression: null,
                                                typeArguments: [],
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "zzScanError"
                                                },
                                                arguments: [
                                                    {
                                                        node: "SimpleName",
                                                        identifier: "ZZ_PUSHBACK_2BIG"
                                                    }
                                                ]
                                            }
                                        },
                                        elseStatement: null
                                    },
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "Assignment",
                                            leftHandSide: {
                                                node: "SimpleName",
                                                identifier: "zzMarkedPos"
                                            },
                                            operator: "-=",
                                            rightHandSide: {
                                                node: "SimpleName",
                                                identifier: "number"
                                            }
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "getNextToken"
                            },
                            parameters: [],
                            extraDimensions: 0,
                            thrownExceptions: [
                                {
                                    node: "QualifiedName",
                                    qualifier: {
                                        node: "QualifiedName",
                                        qualifier: {
                                            node: "SimpleName",
                                            identifier: "java"
                                        },
                                        name: {
                                            node: "SimpleName",
                                            identifier: "io"
                                        }
                                    },
                                    name: {
                                        node: "SimpleName",
                                        identifier: "IOException"
                                    }
                                }
                            ],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "zzInput"
                                                },
                                                extraDimensions: 0,
                                                initializer: null
                                            }
                                        ]
                                    },
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "zzAction"
                                                },
                                                extraDimensions: 0,
                                                initializer: null
                                            }
                                        ]
                                    },
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "zzCurrentPosL"
                                                },
                                                extraDimensions: 0,
                                                initializer: null
                                            }
                                        ]
                                    },
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "zzMarkedPosL"
                                                },
                                                extraDimensions: 0,
                                                initializer: null
                                            }
                                        ]
                                    },
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "PrimitiveType",
                                            primitiveTypeCode: "int"
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "zzEndReadL"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "SimpleName",
                                                    identifier: "zzEndRead"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "ArrayType",
                                            componentType: {
                                                node: "PrimitiveType",
                                                primitiveTypeCode: "char"
                                            }
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "zzBufferL"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "SimpleName",
                                                    identifier: "zzBuffer"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "ArrayType",
                                            componentType: {
                                                node: "PrimitiveType",
                                                primitiveTypeCode: "char"
                                            }
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "zzCMapL"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "SimpleName",
                                                    identifier: "ZZ_CMAP"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "ArrayType",
                                            componentType: {
                                                node: "PrimitiveType",
                                                primitiveTypeCode: "int"
                                            }
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "zzTransL"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "SimpleName",
                                                    identifier: "ZZ_TRANS"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "ArrayType",
                                            componentType: {
                                                node: "PrimitiveType",
                                                primitiveTypeCode: "int"
                                            }
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "zzRowMapL"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "SimpleName",
                                                    identifier: "ZZ_ROWMAP"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "ArrayType",
                                            componentType: {
                                                node: "PrimitiveType",
                                                primitiveTypeCode: "int"
                                            }
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "zzAttrL"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "SimpleName",
                                                    identifier: "ZZ_ATTRIBUTE"
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "WhileStatement",
                                        expression: {
                                            node: "BooleanLiteral",
                                            booleanValue: true
                                        },
                                        body: {
                                            node: "Block",
                                            statements: [
                                                {
                                                    node: "ExpressionStatement",
                                                    expression: {
                                                        node: "Assignment",
                                                        leftHandSide: {
                                                            node: "SimpleName",
                                                            identifier: "zzMarkedPosL"
                                                        },
                                                        operator: "=",
                                                        rightHandSide: {
                                                            node: "SimpleName",
                                                            identifier: "zzMarkedPos"
                                                        }
                                                    }
                                                },
                                                {
                                                    node: "ExpressionStatement",
                                                    expression: {
                                                        node: "Assignment",
                                                        leftHandSide: {
                                                            node: "SimpleName",
                                                            identifier: "yychar"
                                                        },
                                                        operator: "+=",
                                                        rightHandSide: {
                                                            node: "InfixExpression",
                                                            leftOperand: {
                                                                node: "SimpleName",
                                                                identifier: "zzMarkedPosL"
                                                            },
                                                            operator: "-",
                                                            rightOperand: {
                                                                node: "SimpleName",
                                                                identifier: "zzStartRead"
                                                            },
                                                        }
                                                    }
                                                },
                                                {
                                                    node: "ExpressionStatement",
                                                    expression: {
                                                        node: "Assignment",
                                                        leftHandSide: {
                                                            node: "SimpleName",
                                                            identifier: "zzAction"
                                                        },
                                                        operator: "=",
                                                        rightHandSide: {
                                                            node: "PrefixExpression",
                                                            operator: "-",
                                                            operand: {
                                                                node: "NumberLiteral",
                                                                token: "1"
                                                            }
                                                        }
                                                    }
                                                },
                                                {
                                                    node: "ExpressionStatement",
                                                    expression: {
                                                        node: "Assignment",
                                                        leftHandSide: {
                                                            node: "SimpleName",
                                                            identifier: "zzCurrentPosL"
                                                        },
                                                        operator: "=",
                                                        rightHandSide: {
                                                            node: "Assignment",
                                                            leftHandSide: {
                                                                node: "SimpleName",
                                                                identifier: "zzCurrentPos"
                                                            },
                                                            operator: "=",
                                                            rightHandSide: {
                                                                node: "Assignment",
                                                                leftHandSide: {
                                                                    node: "SimpleName",
                                                                    identifier: "zzStartRead"
                                                                },
                                                                operator: "=",
                                                                rightHandSide: {
                                                                    node: "SimpleName",
                                                                    identifier: "zzMarkedPosL"
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                {
                                                    node: "ExpressionStatement",
                                                    expression: {
                                                        node: "Assignment",
                                                        leftHandSide: {
                                                            node: "SimpleName",
                                                            identifier: "zzState"
                                                        },
                                                        operator: "=",
                                                        rightHandSide: {
                                                            node: "ArrayAccess",
                                                            array: {
                                                                node: "SimpleName",
                                                                identifier: "ZZ_LEXSTATE"
                                                            },
                                                            index: {
                                                                node: "SimpleName",
                                                                identifier: "zzLexicalState"
                                                            }
                                                        }
                                                    }
                                                },
                                                {
                                                    node: "VariableDeclarationStatement",
                                                    modifiers: [],
                                                    type: {
                                                        node: "PrimitiveType",
                                                        primitiveTypeCode: "int"
                                                    },
                                                    fragments: [
                                                        {
                                                            node: "VariableDeclarationFragment",
                                                            name: {
                                                                node: "SimpleName",
                                                                identifier: "zzAttributes"
                                                            },
                                                            extraDimensions: 0,
                                                            initializer: {
                                                                node: "ArrayAccess",
                                                                array: {
                                                                    node: "SimpleName",
                                                                    identifier: "zzAttrL"
                                                                },
                                                                index: {
                                                                    node: "SimpleName",
                                                                    identifier: "zzState"
                                                                }
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    node: "IfStatement",
                                                    expression: {
                                                        node: "InfixExpression",
                                                        leftOperand: {
                                                            node: "ParenthesizedExpression",
                                                            expression: {
                                                                node: "InfixExpression",
                                                                leftOperand: {
                                                                    node: "SimpleName",
                                                                    identifier: "zzAttributes"
                                                                },
                                                                operator: "&",
                                                                rightOperand: {
                                                                    node: "NumberLiteral",
                                                                    token: "1"
                                                                },
                                                            }
                                                        },
                                                        operator: "==",
                                                        rightOperand: {
                                                            node: "NumberLiteral",
                                                            token: "1"
                                                        },
                                                    },
                                                    thenStatement: {
                                                        node: "Block",
                                                        statements: [
                                                            {
                                                                node: "ExpressionStatement",
                                                                expression: {
                                                                    node: "Assignment",
                                                                    leftHandSide: {
                                                                        node: "SimpleName",
                                                                        identifier: "zzAction"
                                                                    },
                                                                    operator: "=",
                                                                    rightHandSide: {
                                                                        node: "SimpleName",
                                                                        identifier: "zzState"
                                                                    }
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    elseStatement: null
                                                },
                                                {
                                                    node: "LabeledStatement",
                                                    label: {
                                                        node: "SimpleName",
                                                        identifier: "zzForAction"
                                                    },
                                                    body: {
                                                        node: "Block",
                                                        statements: [
                                                            {
                                                                node: "WhileStatement",
                                                                expression: {
                                                                    node: "BooleanLiteral",
                                                                    booleanValue: true
                                                                },
                                                                body: {
                                                                    node: "Block",
                                                                    statements: [
                                                                        {
                                                                            node: "IfStatement",
                                                                            expression: {
                                                                                node: "InfixExpression",
                                                                                leftOperand: {
                                                                                    node: "SimpleName",
                                                                                    identifier: "zzCurrentPosL"
                                                                                },
                                                                                operator: "<",
                                                                                rightOperand: {
                                                                                    node: "SimpleName",
                                                                                    identifier: "zzEndReadL"
                                                                                },
                                                                            },
                                                                            thenStatement: {
                                                                                node: "Block",
                                                                                statements: [
                                                                                    {
                                                                                        node: "ExpressionStatement",
                                                                                        expression: {
                                                                                            node: "Assignment",
                                                                                            leftHandSide: {
                                                                                                node: "SimpleName",
                                                                                                identifier: "zzInput"
                                                                                            },
                                                                                            operator: "=",
                                                                                            rightHandSide: {
                                                                                                node: "MethodInvocation",
                                                                                                expression: {
                                                                                                    node: "SimpleName",
                                                                                                    identifier: "Character"
                                                                                                },
                                                                                                typeArguments: [],
                                                                                                name: {
                                                                                                    node: "SimpleName",
                                                                                                    identifier: "codePointAt"
                                                                                                },
                                                                                                arguments: [
                                                                                                    {
                                                                                                        node: "SimpleName",
                                                                                                        identifier: "zzBufferL"
                                                                                                    },
                                                                                                    {
                                                                                                        node: "SimpleName",
                                                                                                        identifier: "zzCurrentPosL"
                                                                                                    },
                                                                                                    {
                                                                                                        node: "SimpleName",
                                                                                                        identifier: "zzEndReadL"
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        }
                                                                                    },
                                                                                    {
                                                                                        node: "ExpressionStatement",
                                                                                        expression: {
                                                                                            node: "Assignment",
                                                                                            leftHandSide: {
                                                                                                node: "SimpleName",
                                                                                                identifier: "zzCurrentPosL"
                                                                                            },
                                                                                            operator: "+=",
                                                                                            rightHandSide: {
                                                                                                node: "MethodInvocation",
                                                                                                expression: {
                                                                                                    node: "SimpleName",
                                                                                                    identifier: "Character"
                                                                                                },
                                                                                                typeArguments: [],
                                                                                                name: {
                                                                                                    node: "SimpleName",
                                                                                                    identifier: "charCount"
                                                                                                },
                                                                                                arguments: [
                                                                                                    {
                                                                                                        node: "SimpleName",
                                                                                                        identifier: "zzInput"
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            },
                                                                            elseStatement: {
                                                                                node: "IfStatement",
                                                                                expression: {
                                                                                    node: "SimpleName",
                                                                                    identifier: "zzAtEOF"
                                                                                },
                                                                                thenStatement: {
                                                                                    node: "Block",
                                                                                    statements: [
                                                                                        {
                                                                                            node: "ExpressionStatement",
                                                                                            expression: {
                                                                                                node: "Assignment",
                                                                                                leftHandSide: {
                                                                                                    node: "SimpleName",
                                                                                                    identifier: "zzInput"
                                                                                                },
                                                                                                operator: "=",
                                                                                                rightHandSide: {
                                                                                                    node: "SimpleName",
                                                                                                    identifier: "YYEOF"
                                                                                                }
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            node: "BreakStatement",
                                                                                            label: {
                                                                                                node: "SimpleName",
                                                                                                identifier: "zzForAction"
                                                                                            }
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                elseStatement: {
                                                                                    node: "Block",
                                                                                    statements: [
                                                                                        {
                                                                                            node: "ExpressionStatement",
                                                                                            expression: {
                                                                                                node: "Assignment",
                                                                                                leftHandSide: {
                                                                                                    node: "SimpleName",
                                                                                                    identifier: "zzCurrentPos"
                                                                                                },
                                                                                                operator: "=",
                                                                                                rightHandSide: {
                                                                                                    node: "SimpleName",
                                                                                                    identifier: "zzCurrentPosL"
                                                                                                }
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            node: "ExpressionStatement",
                                                                                            expression: {
                                                                                                node: "Assignment",
                                                                                                leftHandSide: {
                                                                                                    node: "SimpleName",
                                                                                                    identifier: "zzMarkedPos"
                                                                                                },
                                                                                                operator: "=",
                                                                                                rightHandSide: {
                                                                                                    node: "SimpleName",
                                                                                                    identifier: "zzMarkedPosL"
                                                                                                }
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            node: "VariableDeclarationStatement",
                                                                                            modifiers: [],
                                                                                            type: {
                                                                                                node: "PrimitiveType",
                                                                                                primitiveTypeCode: "boolean"
                                                                                            },
                                                                                            fragments: [
                                                                                                {
                                                                                                    node: "VariableDeclarationFragment",
                                                                                                    name: {
                                                                                                        node: "SimpleName",
                                                                                                        identifier: "eof"
                                                                                                    },
                                                                                                    extraDimensions: 0,
                                                                                                    initializer: {
                                                                                                        node: "MethodInvocation",
                                                                                                        expression: null,
                                                                                                        typeArguments: [],
                                                                                                        name: {
                                                                                                            node: "SimpleName",
                                                                                                            identifier: "zzRefill"
                                                                                                        },
                                                                                                        arguments: []
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            node: "ExpressionStatement",
                                                                                            expression: {
                                                                                                node: "Assignment",
                                                                                                leftHandSide: {
                                                                                                    node: "SimpleName",
                                                                                                    identifier: "zzCurrentPosL"
                                                                                                },
                                                                                                operator: "=",
                                                                                                rightHandSide: {
                                                                                                    node: "SimpleName",
                                                                                                    identifier: "zzCurrentPos"
                                                                                                }
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            node: "ExpressionStatement",
                                                                                            expression: {
                                                                                                node: "Assignment",
                                                                                                leftHandSide: {
                                                                                                    node: "SimpleName",
                                                                                                    identifier: "zzMarkedPosL"
                                                                                                },
                                                                                                operator: "=",
                                                                                                rightHandSide: {
                                                                                                    node: "SimpleName",
                                                                                                    identifier: "zzMarkedPos"
                                                                                                }
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            node: "ExpressionStatement",
                                                                                            expression: {
                                                                                                node: "Assignment",
                                                                                                leftHandSide: {
                                                                                                    node: "SimpleName",
                                                                                                    identifier: "zzBufferL"
                                                                                                },
                                                                                                operator: "=",
                                                                                                rightHandSide: {
                                                                                                    node: "SimpleName",
                                                                                                    identifier: "zzBuffer"
                                                                                                }
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            node: "ExpressionStatement",
                                                                                            expression: {
                                                                                                node: "Assignment",
                                                                                                leftHandSide: {
                                                                                                    node: "SimpleName",
                                                                                                    identifier: "zzEndReadL"
                                                                                                },
                                                                                                operator: "=",
                                                                                                rightHandSide: {
                                                                                                    node: "SimpleName",
                                                                                                    identifier: "zzEndRead"
                                                                                                }
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            node: "IfStatement",
                                                                                            expression: {
                                                                                                node: "SimpleName",
                                                                                                identifier: "eof"
                                                                                            },
                                                                                            thenStatement: {
                                                                                                node: "Block",
                                                                                                statements: [
                                                                                                    {
                                                                                                        node: "ExpressionStatement",
                                                                                                        expression: {
                                                                                                            node: "Assignment",
                                                                                                            leftHandSide: {
                                                                                                                node: "SimpleName",
                                                                                                                identifier: "zzInput"
                                                                                                            },
                                                                                                            operator: "=",
                                                                                                            rightHandSide: {
                                                                                                                node: "SimpleName",
                                                                                                                identifier: "YYEOF"
                                                                                                            }
                                                                                                        }
                                                                                                    },
                                                                                                    {
                                                                                                        node: "BreakStatement",
                                                                                                        label: {
                                                                                                            node: "SimpleName",
                                                                                                            identifier: "zzForAction"
                                                                                                        }
                                                                                                    }
                                                                                                ]
                                                                                            },
                                                                                            elseStatement: {
                                                                                                node: "Block",
                                                                                                statements: [
                                                                                                    {
                                                                                                        node: "ExpressionStatement",
                                                                                                        expression: {
                                                                                                            node: "Assignment",
                                                                                                            leftHandSide: {
                                                                                                                node: "SimpleName",
                                                                                                                identifier: "zzInput"
                                                                                                            },
                                                                                                            operator: "=",
                                                                                                            rightHandSide: {
                                                                                                                node: "MethodInvocation",
                                                                                                                expression: {
                                                                                                                    node: "SimpleName",
                                                                                                                    identifier: "Character"
                                                                                                                },
                                                                                                                typeArguments: [],
                                                                                                                name: {
                                                                                                                    node: "SimpleName",
                                                                                                                    identifier: "codePointAt"
                                                                                                                },
                                                                                                                arguments: [
                                                                                                                    {
                                                                                                                        node: "SimpleName",
                                                                                                                        identifier: "zzBufferL"
                                                                                                                    },
                                                                                                                    {
                                                                                                                        node: "SimpleName",
                                                                                                                        identifier: "zzCurrentPosL"
                                                                                                                    },
                                                                                                                    {
                                                                                                                        node: "SimpleName",
                                                                                                                        identifier: "zzEndReadL"
                                                                                                                    }
                                                                                                                ]
                                                                                                            }
                                                                                                        }
                                                                                                    },
                                                                                                    {
                                                                                                        node: "ExpressionStatement",
                                                                                                        expression: {
                                                                                                            node: "Assignment",
                                                                                                            leftHandSide: {
                                                                                                                node: "SimpleName",
                                                                                                                identifier: "zzCurrentPosL"
                                                                                                            },
                                                                                                            operator: "+=",
                                                                                                            rightHandSide: {
                                                                                                                node: "MethodInvocation",
                                                                                                                expression: {
                                                                                                                    node: "SimpleName",
                                                                                                                    identifier: "Character"
                                                                                                                },
                                                                                                                typeArguments: [],
                                                                                                                name: {
                                                                                                                    node: "SimpleName",
                                                                                                                    identifier: "charCount"
                                                                                                                },
                                                                                                                arguments: [
                                                                                                                    {
                                                                                                                        node: "SimpleName",
                                                                                                                        identifier: "zzInput"
                                                                                                                    }
                                                                                                                ]
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            }
                                                                        },
                                                                        {
                                                                            node: "VariableDeclarationStatement",
                                                                            modifiers: [],
                                                                            type: {
                                                                                node: "PrimitiveType",
                                                                                primitiveTypeCode: "int"
                                                                            },
                                                                            fragments: [
                                                                                {
                                                                                    node: "VariableDeclarationFragment",
                                                                                    name: {
                                                                                        node: "SimpleName",
                                                                                        identifier: "zzNext"
                                                                                    },
                                                                                    extraDimensions: 0,
                                                                                    initializer: {
                                                                                        node: "ArrayAccess",
                                                                                        array: {
                                                                                            node: "SimpleName",
                                                                                            identifier: "zzTransL"
                                                                                        },
                                                                                        index: {
                                                                                            node: "InfixExpression",
                                                                                            leftOperand: {
                                                                                                node: "ArrayAccess",
                                                                                                array: {
                                                                                                    node: "SimpleName",
                                                                                                    identifier: "zzRowMapL"
                                                                                                },
                                                                                                index: {
                                                                                                    node: "SimpleName",
                                                                                                    identifier: "zzState"
                                                                                                }
                                                                                            },
                                                                                            operator: "+",
                                                                                            rightOperand: {
                                                                                                node: "ArrayAccess",
                                                                                                array: {
                                                                                                    node: "SimpleName",
                                                                                                    identifier: "zzCMapL"
                                                                                                },
                                                                                                index: {
                                                                                                    node: "SimpleName",
                                                                                                    identifier: "zzInput"
                                                                                                }
                                                                                            },
                                                                                        }
                                                                                    }
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            node: "IfStatement",
                                                                            expression: {
                                                                                node: "InfixExpression",
                                                                                leftOperand: {
                                                                                    node: "SimpleName",
                                                                                    identifier: "zzNext"
                                                                                },
                                                                                operator: "==",
                                                                                rightOperand: {
                                                                                    node: "PrefixExpression",
                                                                                    operator: "-",
                                                                                    operand: {
                                                                                        node: "NumberLiteral",
                                                                                        token: "1"
                                                                                    }
                                                                                },
                                                                            },
                                                                            thenStatement: {
                                                                                node: "BreakStatement",
                                                                                label: {
                                                                                    node: "SimpleName",
                                                                                    identifier: "zzForAction"
                                                                                }
                                                                            },
                                                                            elseStatement: null
                                                                        },
                                                                        {
                                                                            node: "ExpressionStatement",
                                                                            expression: {
                                                                                node: "Assignment",
                                                                                leftHandSide: {
                                                                                    node: "SimpleName",
                                                                                    identifier: "zzState"
                                                                                },
                                                                                operator: "=",
                                                                                rightHandSide: {
                                                                                    node: "SimpleName",
                                                                                    identifier: "zzNext"
                                                                                }
                                                                            }
                                                                        },
                                                                        {
                                                                            node: "ExpressionStatement",
                                                                            expression: {
                                                                                node: "Assignment",
                                                                                leftHandSide: {
                                                                                    node: "SimpleName",
                                                                                    identifier: "zzAttributes"
                                                                                },
                                                                                operator: "=",
                                                                                rightHandSide: {
                                                                                    node: "ArrayAccess",
                                                                                    array: {
                                                                                        node: "SimpleName",
                                                                                        identifier: "zzAttrL"
                                                                                    },
                                                                                    index: {
                                                                                        node: "SimpleName",
                                                                                        identifier: "zzState"
                                                                                    }
                                                                                }
                                                                            }
                                                                        },
                                                                        {
                                                                            node: "IfStatement",
                                                                            expression: {
                                                                                node: "InfixExpression",
                                                                                leftOperand: {
                                                                                    node: "ParenthesizedExpression",
                                                                                    expression: {
                                                                                        node: "InfixExpression",
                                                                                        leftOperand: {
                                                                                            node: "SimpleName",
                                                                                            identifier: "zzAttributes"
                                                                                        },
                                                                                        operator: "&",
                                                                                        rightOperand: {
                                                                                            node: "NumberLiteral",
                                                                                            token: "1"
                                                                                        },
                                                                                    }
                                                                                },
                                                                                operator: "==",
                                                                                rightOperand: {
                                                                                    node: "NumberLiteral",
                                                                                    token: "1"
                                                                                },
                                                                            },
                                                                            thenStatement: {
                                                                                node: "Block",
                                                                                statements: [
                                                                                    {
                                                                                        node: "ExpressionStatement",
                                                                                        expression: {
                                                                                            node: "Assignment",
                                                                                            leftHandSide: {
                                                                                                node: "SimpleName",
                                                                                                identifier: "zzAction"
                                                                                            },
                                                                                            operator: "=",
                                                                                            rightHandSide: {
                                                                                                node: "SimpleName",
                                                                                                identifier: "zzState"
                                                                                            }
                                                                                        }
                                                                                    },
                                                                                    {
                                                                                        node: "ExpressionStatement",
                                                                                        expression: {
                                                                                            node: "Assignment",
                                                                                            leftHandSide: {
                                                                                                node: "SimpleName",
                                                                                                identifier: "zzMarkedPosL"
                                                                                            },
                                                                                            operator: "=",
                                                                                            rightHandSide: {
                                                                                                node: "SimpleName",
                                                                                                identifier: "zzCurrentPosL"
                                                                                            }
                                                                                        }
                                                                                    },
                                                                                    {
                                                                                        node: "IfStatement",
                                                                                        expression: {
                                                                                            node: "InfixExpression",
                                                                                            leftOperand: {
                                                                                                node: "ParenthesizedExpression",
                                                                                                expression: {
                                                                                                    node: "InfixExpression",
                                                                                                    leftOperand: {
                                                                                                        node: "SimpleName",
                                                                                                        identifier: "zzAttributes"
                                                                                                    },
                                                                                                    operator: "&",
                                                                                                    rightOperand: {
                                                                                                        node: "NumberLiteral",
                                                                                                        token: "8"
                                                                                                    },
                                                                                                }
                                                                                            },
                                                                                            operator: "==",
                                                                                            rightOperand: {
                                                                                                node: "NumberLiteral",
                                                                                                token: "8"
                                                                                            },
                                                                                        },
                                                                                        thenStatement: {
                                                                                            node: "BreakStatement",
                                                                                            label: {
                                                                                                node: "SimpleName",
                                                                                                identifier: "zzForAction"
                                                                                            }
                                                                                        },
                                                                                        elseStatement: null
                                                                                    }
                                                                                ]
                                                                            },
                                                                            elseStatement: null
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    node: "ExpressionStatement",
                                                    expression: {
                                                        node: "Assignment",
                                                        leftHandSide: {
                                                            node: "SimpleName",
                                                            identifier: "zzMarkedPos"
                                                        },
                                                        operator: "=",
                                                        rightHandSide: {
                                                            node: "SimpleName",
                                                            identifier: "zzMarkedPosL"
                                                        }
                                                    }
                                                },
                                                {
                                                    node: "SwitchStatement",
                                                    expression: {
                                                        node: "ConditionalExpression",
                                                        expression: {
                                                            node: "InfixExpression",
                                                            leftOperand: {
                                                                node: "SimpleName",
                                                                identifier: "zzAction"
                                                            },
                                                            operator: "<",
                                                            rightOperand: {
                                                                node: "NumberLiteral",
                                                                token: "0"
                                                            },
                                                        },
                                                        thenExpression: {
                                                            node: "SimpleName",
                                                            identifier: "zzAction"
                                                        },
                                                        elseExpression: {
                                                            node: "ArrayAccess",
                                                            array: {
                                                                node: "SimpleName",
                                                                identifier: "ZZ_ACTION"
                                                            },
                                                            index: {
                                                                node: "SimpleName",
                                                                identifier: "zzAction"
                                                            }
                                                        }
                                                    },
                                                    statements: [
                                                        {
                                                            node: "SwitchCase",
                                                            expression: {
                                                                node: "NumberLiteral",
                                                                token: "1"
                                                            }
                                                        },
                                                        {
                                                            node: "Block",
                                                            statements: [
                                                                {
                                                                    node: "BreakStatement",
                                                                    label: null
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            node: "SwitchCase",
                                                            expression: {
                                                                node: "NumberLiteral",
                                                                token: "9"
                                                            }
                                                        },
                                                        {
                                                            node: "BreakStatement",
                                                            label: null
                                                        },
                                                        {
                                                            node: "SwitchCase",
                                                            expression: {
                                                                node: "NumberLiteral",
                                                                token: "2"
                                                            }
                                                        },
                                                        {
                                                            node: "Block",
                                                            statements: [
                                                                {
                                                                    node: "ReturnStatement",
                                                                    expression: {
                                                                        node: "SimpleName",
                                                                        identifier: "WORD_TYPE"
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            node: "SwitchCase",
                                                            expression: {
                                                                node: "NumberLiteral",
                                                                token: "10"
                                                            }
                                                        },
                                                        {
                                                            node: "BreakStatement",
                                                            label: null
                                                        },
                                                        {
                                                            node: "SwitchCase",
                                                            expression: {
                                                                node: "NumberLiteral",
                                                                token: "3"
                                                            }
                                                        },
                                                        {
                                                            node: "Block",
                                                            statements: [
                                                                {
                                                                    node: "ReturnStatement",
                                                                    expression: {
                                                                        node: "SimpleName",
                                                                        identifier: "HANGUL_TYPE"
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            node: "SwitchCase",
                                                            expression: {
                                                                node: "NumberLiteral",
                                                                token: "11"
                                                            }
                                                        },
                                                        {
                                                            node: "BreakStatement",
                                                            label: null
                                                        },
                                                        {
                                                            node: "SwitchCase",
                                                            expression: {
                                                                node: "NumberLiteral",
                                                                token: "4"
                                                            }
                                                        },
                                                        {
                                                            node: "Block",
                                                            statements: [
                                                                {
                                                                    node: "ReturnStatement",
                                                                    expression: {
                                                                        node: "SimpleName",
                                                                        identifier: "NUMERIC_TYPE"
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            node: "SwitchCase",
                                                            expression: {
                                                                node: "NumberLiteral",
                                                                token: "12"
                                                            }
                                                        },
                                                        {
                                                            node: "BreakStatement",
                                                            label: null
                                                        },
                                                        {
                                                            node: "SwitchCase",
                                                            expression: {
                                                                node: "NumberLiteral",
                                                                token: "5"
                                                            }
                                                        },
                                                        {
                                                            node: "Block",
                                                            statements: [
                                                                {
                                                                    node: "ReturnStatement",
                                                                    expression: {
                                                                        node: "SimpleName",
                                                                        identifier: "KATAKANA_TYPE"
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            node: "SwitchCase",
                                                            expression: {
                                                                node: "NumberLiteral",
                                                                token: "13"
                                                            }
                                                        },
                                                        {
                                                            node: "BreakStatement",
                                                            label: null
                                                        },
                                                        {
                                                            node: "SwitchCase",
                                                            expression: {
                                                                node: "NumberLiteral",
                                                                token: "6"
                                                            }
                                                        },
                                                        {
                                                            node: "Block",
                                                            statements: [
                                                                {
                                                                    node: "ReturnStatement",
                                                                    expression: {
                                                                        node: "SimpleName",
                                                                        identifier: "IDEOGRAPHIC_TYPE"
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            node: "SwitchCase",
                                                            expression: {
                                                                node: "NumberLiteral",
                                                                token: "14"
                                                            }
                                                        },
                                                        {
                                                            node: "BreakStatement",
                                                            label: null
                                                        },
                                                        {
                                                            node: "SwitchCase",
                                                            expression: {
                                                                node: "NumberLiteral",
                                                                token: "7"
                                                            }
                                                        },
                                                        {
                                                            node: "Block",
                                                            statements: [
                                                                {
                                                                    node: "ReturnStatement",
                                                                    expression: {
                                                                        node: "SimpleName",
                                                                        identifier: "HIRAGANA_TYPE"
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            node: "SwitchCase",
                                                            expression: {
                                                                node: "NumberLiteral",
                                                                token: "15"
                                                            }
                                                        },
                                                        {
                                                            node: "BreakStatement",
                                                            label: null
                                                        },
                                                        {
                                                            node: "SwitchCase",
                                                            expression: {
                                                                node: "NumberLiteral",
                                                                token: "8"
                                                            }
                                                        },
                                                        {
                                                            node: "Block",
                                                            statements: [
                                                                {
                                                                    node: "ReturnStatement",
                                                                    expression: {
                                                                        node: "SimpleName",
                                                                        identifier: "SOUTH_EAST_ASIAN_TYPE"
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            node: "SwitchCase",
                                                            expression: {
                                                                node: "NumberLiteral",
                                                                token: "16"
                                                            }
                                                        },
                                                        {
                                                            node: "BreakStatement",
                                                            label: null
                                                        },
                                                        {
                                                            node: "SwitchCase",
                                                            expression: null
                                                        },
                                                        {
                                                            node: "IfStatement",
                                                            expression: {
                                                                node: "InfixExpression",
                                                                leftOperand: {
                                                                    node: "InfixExpression",
                                                                    leftOperand: {
                                                                        node: "SimpleName",
                                                                        identifier: "zzInput"
                                                                    },
                                                                    operator: "==",
                                                                    rightOperand: {
                                                                        node: "SimpleName",
                                                                        identifier: "YYEOF"
                                                                    },
                                                                },
                                                                operator: "&&",
                                                                rightOperand: {
                                                                    node: "InfixExpression",
                                                                    leftOperand: {
                                                                        node: "SimpleName",
                                                                        identifier: "zzStartRead"
                                                                    },
                                                                    operator: "==",
                                                                    rightOperand: {
                                                                        node: "SimpleName",
                                                                        identifier: "zzCurrentPos"
                                                                    },
                                                                },
                                                            },
                                                            thenStatement: {
                                                                node: "Block",
                                                                statements: [
                                                                    {
                                                                        node: "ExpressionStatement",
                                                                        expression: {
                                                                            node: "Assignment",
                                                                            leftHandSide: {
                                                                                node: "SimpleName",
                                                                                identifier: "zzAtEOF"
                                                                            },
                                                                            operator: "=",
                                                                            rightHandSide: {
                                                                                node: "BooleanLiteral",
                                                                                booleanValue: true
                                                                            }
                                                                        }
                                                                    },
                                                                    {
                                                                        node: "Block",
                                                                        statements: [
                                                                            {
                                                                                node: "ReturnStatement",
                                                                                expression: {
                                                                                    node: "QualifiedName",
                                                                                    qualifier: {
                                                                                        node: "SimpleName",
                                                                                        identifier: "StandardTokenizerInterface"
                                                                                    },
                                                                                    name: {
                                                                                        node: "SimpleName",
                                                                                        identifier: "YYEOF"
                                                                                    }
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            },
                                                            elseStatement: {
                                                                node: "Block",
                                                                statements: [
                                                                    {
                                                                        node: "ExpressionStatement",
                                                                        expression: {
                                                                            node: "MethodInvocation",
                                                                            expression: null,
                                                                            typeArguments: [],
                                                                            name: {
                                                                                node: "SimpleName",
                                                                                identifier: "zzScanError"
                                                                            },
                                                                            arguments: [
                                                                                {
                                                                                    node: "SimpleName",
                                                                                    identifier: "ZZ_NO_MATCH"
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                {
                    node: "TypeDeclaration",
                    modifiers: [
                        {
                            node: "Modifier",
                            keyword: "public"
                        },
                        {
                            node: "Modifier",
                            keyword: "final"
                        }
                    ],
                    interface: false,
                    name: {
                        node: "SimpleName",
                        identifier: "StandardAnalyzer"
                    },
                    typeParameters: [],
                    superclassType: {
                        node: "SimpleType",
                        name: {
                            node: "SimpleName",
                            identifier: "StopwordAnalyzerBase"
                        }
                    },
                    superInterfaceTypes: [],
                    bodyDeclarations: [
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "DEFAULT_MAX_TOKEN_LENGTH"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "NumberLiteral",
                                        token: "255"
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "private"
                                }
                            ],
                            type: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "maxTokenLength"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "SimpleName",
                                        identifier: "DEFAULT_MAX_TOKEN_LENGTH"
                                    }
                                }
                            ]
                        },
                        {
                            node: "FieldDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "static"
                                },
                                {
                                    node: "Modifier",
                                    keyword: "final"
                                }
                            ],
                            type: {
                                node: "SimpleType",
                                name: {
                                    node: "SimpleName",
                                    identifier: "CharArraySet"
                                }
                            },
                            fragments: [
                                {
                                    node: "VariableDeclarationFragment",
                                    name: {
                                        node: "SimpleName",
                                        identifier: "STOP_WORDS_SET"
                                    },
                                    extraDimensions: 0,
                                    initializer: {
                                        node: "QualifiedName",
                                        qualifier: {
                                            node: "SimpleName",
                                            identifier: "StopAnalyzer"
                                        },
                                        name: {
                                            node: "SimpleName",
                                            identifier: "ENGLISH_STOP_WORDS_SET"
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                }
                            ],
                            constructor: true,
                            typeParameters: [],
                            returnType2: null,
                            name: {
                                node: "SimpleName",
                                identifier: "StandardAnalyzer"
                            },
                            parameters: [
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "SimpleType",
                                        name: {
                                            node: "SimpleName",
                                            identifier: "CharArraySet"
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "stopWords"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "SuperConstructorInvocation",
                                        expression: null,
                                        typeArguments: [],
                                        arguments: [
                                            {
                                                node: "SimpleName",
                                                identifier: "stopWords"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "MarkerAnnotation",
                                    typeName: {
                                        node: "SimpleName",
                                        identifier: "Deprecated"
                                    }
                                },
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                }
                            ],
                            constructor: true,
                            typeParameters: [],
                            returnType2: null,
                            name: {
                                node: "SimpleName",
                                identifier: "StandardAnalyzer"
                            },
                            parameters: [
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "SimpleType",
                                        name: {
                                            node: "SimpleName",
                                            identifier: "Version"
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "matchVersion"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                },
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "SimpleType",
                                        name: {
                                            node: "SimpleName",
                                            identifier: "CharArraySet"
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "stopWords"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "SuperConstructorInvocation",
                                        expression: null,
                                        typeArguments: [],
                                        arguments: [
                                            {
                                                node: "SimpleName",
                                                identifier: "matchVersion"
                                            },
                                            {
                                                node: "SimpleName",
                                                identifier: "stopWords"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                }
                            ],
                            constructor: true,
                            typeParameters: [],
                            returnType2: null,
                            name: {
                                node: "SimpleName",
                                identifier: "StandardAnalyzer"
                            },
                            parameters: [],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "ConstructorInvocation",
                                        typeArguments: [],
                                        arguments: [
                                            {
                                                node: "SimpleName",
                                                identifier: "STOP_WORDS_SET"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "MarkerAnnotation",
                                    typeName: {
                                        node: "SimpleName",
                                        identifier: "Deprecated"
                                    }
                                },
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                }
                            ],
                            constructor: true,
                            typeParameters: [],
                            returnType2: null,
                            name: {
                                node: "SimpleName",
                                identifier: "StandardAnalyzer"
                            },
                            parameters: [
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "SimpleType",
                                        name: {
                                            node: "SimpleName",
                                            identifier: "Version"
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "matchVersion"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "ConstructorInvocation",
                                        typeArguments: [],
                                        arguments: [
                                            {
                                                node: "SimpleName",
                                                identifier: "matchVersion"
                                            },
                                            {
                                                node: "SimpleName",
                                                identifier: "STOP_WORDS_SET"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                }
                            ],
                            constructor: true,
                            typeParameters: [],
                            returnType2: null,
                            name: {
                                node: "SimpleName",
                                identifier: "StandardAnalyzer"
                            },
                            parameters: [
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "SimpleType",
                                        name: {
                                            node: "SimpleName",
                                            identifier: "Reader"
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "stopwords"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ],
                            extraDimensions: 0,
                            thrownExceptions: [
                                {
                                    node: "SimpleName",
                                    identifier: "IOException"
                                }
                            ],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "ConstructorInvocation",
                                        typeArguments: [],
                                        arguments: [
                                            {
                                                node: "MethodInvocation",
                                                expression: null,
                                                typeArguments: [],
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "loadStopwordSet"
                                                },
                                                arguments: [
                                                    {
                                                        node: "SimpleName",
                                                        identifier: "stopwords"
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "MarkerAnnotation",
                                    typeName: {
                                        node: "SimpleName",
                                        identifier: "Deprecated"
                                    }
                                },
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                }
                            ],
                            constructor: true,
                            typeParameters: [],
                            returnType2: null,
                            name: {
                                node: "SimpleName",
                                identifier: "StandardAnalyzer"
                            },
                            parameters: [
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "SimpleType",
                                        name: {
                                            node: "SimpleName",
                                            identifier: "Version"
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "matchVersion"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                },
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "SimpleType",
                                        name: {
                                            node: "SimpleName",
                                            identifier: "Reader"
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "stopwords"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ],
                            extraDimensions: 0,
                            thrownExceptions: [
                                {
                                    node: "SimpleName",
                                    identifier: "IOException"
                                }
                            ],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "ConstructorInvocation",
                                        typeArguments: [],
                                        arguments: [
                                            {
                                                node: "SimpleName",
                                                identifier: "matchVersion"
                                            },
                                            {
                                                node: "MethodInvocation",
                                                expression: null,
                                                typeArguments: [],
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "loadStopwordSet"
                                                },
                                                arguments: [
                                                    {
                                                        node: "SimpleName",
                                                        identifier: "stopwords"
                                                    },
                                                    {
                                                        node: "SimpleName",
                                                        identifier: "matchVersion"
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "void"
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "setMaxTokenLength"
                            },
                            parameters: [
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [],
                                    type: {
                                        node: "PrimitiveType",
                                        primitiveTypeCode: "int"
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "length"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "Assignment",
                                            leftHandSide: {
                                                node: "SimpleName",
                                                identifier: "maxTokenLength"
                                            },
                                            operator: "=",
                                            rightHandSide: {
                                                node: "SimpleName",
                                                identifier: "length"
                                            }
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "Modifier",
                                    keyword: "public"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "PrimitiveType",
                                primitiveTypeCode: "int"
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "getMaxTokenLength"
                            },
                            parameters: [],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "ReturnStatement",
                                        expression: {
                                            node: "SimpleName",
                                            identifier: "maxTokenLength"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            node: "MethodDeclaration",
                            modifiers: [
                                {
                                    node: "MarkerAnnotation",
                                    typeName: {
                                        node: "SimpleName",
                                        identifier: "Override"
                                    }
                                },
                                {
                                    node: "Modifier",
                                    keyword: "protected"
                                }
                            ],
                            constructor: false,
                            typeParameters: [],
                            returnType2: {
                                node: "SimpleType",
                                name: {
                                    node: "SimpleName",
                                    identifier: "TokenStreamComponents"
                                }
                            },
                            name: {
                                node: "SimpleName",
                                identifier: "createComponents"
                            },
                            parameters: [
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [
                                        {
                                            node: "Modifier",
                                            keyword: "final"
                                        }
                                    ],
                                    type: {
                                        node: "SimpleType",
                                        name: {
                                            node: "SimpleName",
                                            identifier: "String"
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "fieldName"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                },
                                {
                                    node: "SingleVariableDeclaration",
                                    modifiers: [
                                        {
                                            node: "Modifier",
                                            keyword: "final"
                                        }
                                    ],
                                    type: {
                                        node: "SimpleType",
                                        name: {
                                            node: "SimpleName",
                                            identifier: "Reader"
                                        }
                                    },
                                    varargs: false,
                                    name: {
                                        node: "SimpleName",
                                        identifier: "reader"
                                    },
                                    extraDimensions: 0,
                                    initializer: null
                                }
                            ],
                            extraDimensions: 0,
                            thrownExceptions: [],
                            body: {
                                node: "Block",
                                statements: [
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [
                                            {
                                                node: "Modifier",
                                                keyword: "final"
                                            }
                                        ],
                                        type: {
                                            node: "SimpleType",
                                            name: {
                                                node: "SimpleName",
                                                identifier: "StandardTokenizer"
                                            }
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "src"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "ClassInstanceCreation",
                                                    expression: null,
                                                    typeArguments: [],
                                                    type: {
                                                        node: "SimpleType",
                                                        name: {
                                                            node: "SimpleName",
                                                            identifier: "StandardTokenizer"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            node: "MethodInvocation",
                                                            expression: null,
                                                            typeArguments: [],
                                                            name: {
                                                                node: "SimpleName",
                                                                identifier: "getVersion"
                                                            },
                                                            arguments: []
                                                        },
                                                        {
                                                            node: "SimpleName",
                                                            identifier: "reader"
                                                        }
                                                    ],
                                                    anonymousClassDeclaration: null
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "MethodInvocation",
                                            expression: {
                                                node: "SimpleName",
                                                identifier: "src"
                                            },
                                            typeArguments: [],
                                            name: {
                                                node: "SimpleName",
                                                identifier: "setMaxTokenLength"
                                            },
                                            arguments: [
                                                {
                                                    node: "SimpleName",
                                                    identifier: "maxTokenLength"
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        node: "VariableDeclarationStatement",
                                        modifiers: [],
                                        type: {
                                            node: "SimpleType",
                                            name: {
                                                node: "SimpleName",
                                                identifier: "TokenStream"
                                            }
                                        },
                                        fragments: [
                                            {
                                                node: "VariableDeclarationFragment",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "tok"
                                                },
                                                extraDimensions: 0,
                                                initializer: {
                                                    node: "ClassInstanceCreation",
                                                    expression: null,
                                                    typeArguments: [],
                                                    type: {
                                                        node: "SimpleType",
                                                        name: {
                                                            node: "SimpleName",
                                                            identifier: "StandardFilter"
                                                        }
                                                    },
                                                    arguments: [
                                                        {
                                                            node: "MethodInvocation",
                                                            expression: null,
                                                            typeArguments: [],
                                                            name: {
                                                                node: "SimpleName",
                                                                identifier: "getVersion"
                                                            },
                                                            arguments: []
                                                        },
                                                        {
                                                            node: "SimpleName",
                                                            identifier: "src"
                                                        }
                                                    ],
                                                    anonymousClassDeclaration: null
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "Assignment",
                                            leftHandSide: {
                                                node: "SimpleName",
                                                identifier: "tok"
                                            },
                                            operator: "=",
                                            rightHandSide: {
                                                node: "ClassInstanceCreation",
                                                expression: null,
                                                typeArguments: [],
                                                type: {
                                                    node: "SimpleType",
                                                    name: {
                                                        node: "SimpleName",
                                                        identifier: "LowerCaseFilter"
                                                    }
                                                },
                                                arguments: [
                                                    {
                                                        node: "MethodInvocation",
                                                        expression: null,
                                                        typeArguments: [],
                                                        name: {
                                                            node: "SimpleName",
                                                            identifier: "getVersion"
                                                        },
                                                        arguments: []
                                                    },
                                                    {
                                                        node: "SimpleName",
                                                        identifier: "tok"
                                                    }
                                                ],
                                                anonymousClassDeclaration: null
                                            }
                                        }
                                    },
                                    {
                                        node: "ExpressionStatement",
                                        expression: {
                                            node: "Assignment",
                                            leftHandSide: {
                                                node: "SimpleName",
                                                identifier: "tok"
                                            },
                                            operator: "=",
                                            rightHandSide: {
                                                node: "ClassInstanceCreation",
                                                expression: null,
                                                typeArguments: [],
                                                type: {
                                                    node: "SimpleType",
                                                    name: {
                                                        node: "SimpleName",
                                                        identifier: "StopFilter"
                                                    }
                                                },
                                                arguments: [
                                                    {
                                                        node: "MethodInvocation",
                                                        expression: null,
                                                        typeArguments: [],
                                                        name: {
                                                            node: "SimpleName",
                                                            identifier: "getVersion"
                                                        },
                                                        arguments: []
                                                    },
                                                    {
                                                        node: "SimpleName",
                                                        identifier: "tok"
                                                    },
                                                    {
                                                        node: "SimpleName",
                                                        identifier: "stopwords"
                                                    }
                                                ],
                                                anonymousClassDeclaration: null
                                            }
                                        }
                                    },
                                    {
                                        node: "ReturnStatement",
                                        expression: {
                                            node: "ClassInstanceCreation",
                                            expression: null,
                                            typeArguments: [],
                                            type: {
                                                node: "SimpleType",
                                                name: {
                                                    node: "SimpleName",
                                                    identifier: "TokenStreamComponents"
                                                }
                                            },
                                            arguments: [
                                                {
                                                    node: "SimpleName",
                                                    identifier: "src"
                                                },
                                                {
                                                    node: "SimpleName",
                                                    identifier: "tok"
                                                }
                                            ],
                                            anonymousClassDeclaration: {
                                                node: "AnonymousClassDeclaration",
                                                bodyDeclarations: [
                                                    {
                                                        node: "MethodDeclaration",
                                                        modifiers: [
                                                            {
                                                                node: "MarkerAnnotation",
                                                                typeName: {
                                                                    node: "SimpleName",
                                                                    identifier: "Override"
                                                                }
                                                            },
                                                            {
                                                                node: "Modifier",
                                                                keyword: "protected"
                                                            }
                                                        ],
                                                        constructor: false,
                                                        typeParameters: [],
                                                        returnType2: {
                                                            node: "PrimitiveType",
                                                            primitiveTypeCode: "void"
                                                        },
                                                        name: {
                                                            node: "SimpleName",
                                                            identifier: "setReader"
                                                        },
                                                        parameters: [
                                                            {
                                                                node: "SingleVariableDeclaration",
                                                                modifiers: [
                                                                    {
                                                                        node: "Modifier",
                                                                        keyword: "final"
                                                                    }
                                                                ],
                                                                type: {
                                                                    node: "SimpleType",
                                                                    name: {
                                                                        node: "SimpleName",
                                                                        identifier: "Reader"
                                                                    }
                                                                },
                                                                varargs: false,
                                                                name: {
                                                                    node: "SimpleName",
                                                                    identifier: "reader"
                                                                },
                                                                extraDimensions: 0,
                                                                initializer: null
                                                            }
                                                        ],
                                                        extraDimensions: 0,
                                                        thrownExceptions: [
                                                            {
                                                                node: "SimpleName",
                                                                identifier: "IOException"
                                                            }
                                                        ],
                                                        body: {
                                                            node: "Block",
                                                            statements: [
                                                                {
                                                                    node: "ExpressionStatement",
                                                                    expression: {
                                                                        node: "MethodInvocation",
                                                                        expression: {
                                                                            node: "SimpleName",
                                                                            identifier: "src"
                                                                        },
                                                                        typeArguments: [],
                                                                        name: {
                                                                            node: "SimpleName",
                                                                            identifier: "setMaxTokenLength"
                                                                        },
                                                                        arguments: [
                                                                            {
                                                                                node: "FieldAccess",
                                                                                expression: {
                                                                                    node: "ThisExpression",
                                                                                    qualifier: {
                                                                                        node: "SimpleName",
                                                                                        identifier: "StandardAnalyzer"
                                                                                    }
                                                                                },
                                                                                name: {
                                                                                    node: "SimpleName",
                                                                                    identifier: "maxTokenLength"
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    node: "ExpressionStatement",
                                                                    expression: {
                                                                        node: "SuperMethodInvocation",
                                                                        qualifier: null,
                                                                        typeArguments: [],
                                                                        name: {
                                                                            node: "SimpleName",
                                                                            identifier: "setReader"
                                                                        },
                                                                        arguments: [
                                                                            {
                                                                                node: "SimpleName",
                                                                                identifier: "reader"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            ]
        }

 );
    });